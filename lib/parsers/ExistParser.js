// This file was generated on Sun Sep 11, 2022 13:40 (UTC+01) by REx v5.55 which is Copyright (c) 1979-2022 by Gunther Rademacher <grd@gmx.net>
// REx command line: ExistParser.ebnf -backtrack -ll 3 -javascript -tree -a xqlint

                                                            // line 2 "ExistParser.ebnf"
                                                            var ExistParser = exports.ExistParser = function ExistParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 9 "ExistParser.js"
  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    l3 = 0; b3 = 0; e3 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? ExistParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = ExistParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [ExistParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Module();
    consume(26);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  this.parse_TransformWithExpr = function()
  {
    eventHandler.startNonterminal("TransformWithExpr", e0);
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_UnaryExpr();
    lookahead1W(74);                // END | S^WS | '(:' | 'transform'
    if (l1 == 205)                  // 'transform'
    {
      consume(205);                 // 'transform'
      lookahead1W(71);              // S^WS | '(:' | 'with'
      consume(222);                 // 'with'
      lookahead1W(72);              // S^WS | '(:' | '{'
      consume(225);                 // '{'
      lookahead1W(223);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 229)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(229);                 // '}'
    }
    eventHandler.endNonterminal("TransformWithExpr", e0);
  };

  this.parse_MapExpr = function()
  {
    eventHandler.startNonterminal("MapExpr", e0);
    lookahead1W(53);                // S^WS | '(:' | 'map'
    consume(154);                   // 'map'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      whitespace();
      parse_ExprSingle();
      lookahead1W(28);              // S^WS | '(:' | ':'
      consume(49);                  // ':'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ',' | '}'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
        lookahead1W(28);            // S^WS | '(:' | ':'
        consume(49);                // ':'
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(229);                   // '}'
    eventHandler.endNonterminal("MapExpr", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 223:                       // 'xquery'
      lookahead2W(164);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 30431                 // 'xquery' 'encoding'
     || lk == 56031)                // 'xquery' 'version'
    {
      whitespace();
      parse_VersionDecl();
    }
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 158:                       // 'module'
      lookahead2W(163);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 40862:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(223);                   // 'xquery'
    lookahead1W(104);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 118:                       // 'encoding'
      consume(118);                 // 'encoding'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(5);                   // StringLiteral
      break;
    default:
      consume(218);                 // 'version'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(5);                   // StringLiteral
      lookahead1W(95);              // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 118)                // 'encoding'
      {
        consume(118);               // 'encoding'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(5);                 // StringLiteral
      }
    }
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_QueryBody();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(122);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(158);                   // 'module'
    lookahead1W(55);                // S^WS | '(:' | 'namespace'
    consume(159);                   // 'namespace'
    lookahead1W(166);               // NCName^Token | S^WS | '(:' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(61);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(219);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      switch (l1)
      {
      case 104:                     // 'declare'
        lookahead2W(174);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'construction' |
                                    // 'context' | 'copy-namespaces' | 'decimal-format' | 'default' | 'div' | 'eq' |
                                    // 'except' | 'function' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' |
                                    // 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'option' | 'or' | 'ordering' |
                                    // 'revalidation' | 'to' | 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      case 136:                     // 'import'
        lookahead2W(165);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' | 'schema' |
                                    // 'to' | 'treat' | 'union' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 22120               // 'declare' 'base-uri'
       && lk != 22632               // 'declare' 'boundary-space'
       && lk != 24936               // 'declare' 'construction'
       && lk != 25704               // 'declare' 'copy-namespaces'
       && lk != 26216               // 'declare' 'decimal-format'
       && lk != 26984               // 'declare' 'default'
       && lk != 40584               // 'import' 'module'
       && lk != 40808               // 'declare' 'namespace'
       && lk != 44648               // 'declare' 'ordering'
       && lk != 47976               // 'declare' 'revalidation'
       && lk != 48520)              // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 104:                     // 'declare'
        lookahead2W(154);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'namespace' | 'ordering' |
                                    // 'revalidation'
        switch (lk)
        {
        case 26984:                 // 'declare' 'default'
          lookahead3W(144);         // S^WS | '(:' | 'collation' | 'decimal-format' | 'element' | 'function' | 'order'
          break;
        }
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 7498088:                 // 'declare' 'default' 'element'
      case 8415592:                 // 'declare' 'default' 'function'
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 40808:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 136:                     // 'import'
        whitespace();
        parse_Import();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(219);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      switch (l1)
      {
      case 104:                     // 'declare'
        lookahead2W(167);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'context' | 'div' | 'eq' | 'except' | 'function' | 'ge' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' |
                                    // 'option' | 'or' | 'to' | 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 8552                // 'declare' '%'
       && lk != 25192               // 'declare' 'context'
       && lk != 32872               // 'declare' 'function'
       && lk != 43624               // 'declare' 'option'
       && lk != 54888               // 'declare' 'updating'
       && lk != 55656)              // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 104:                     // 'declare'
        lookahead2W(149);           // S^WS | '%' | '(:' | 'context' | 'function' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 25192:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 43624:                   // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(53);                    // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 104:                       // 'declare'
      lookahead2W(150);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      switch (lk)
      {
      case 26984:                   // 'declare' 'default'
        lookahead3W(131);           // S^WS | '(:' | 'collation' | 'decimal-format' | 'order'
        break;
      }
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 22632:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case 6252904:                   // 'declare' 'default' 'collation'
      parse_DefaultCollationDecl();
      break;
    case 22120:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 24936:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 44648:                     // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case 11299176:                  // 'declare' 'default' 'order'
      parse_EmptyOrderDecl();
      break;
    case 47976:                     // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 25704:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(35);                // S^WS | '(:' | 'boundary-space'
    consume(88);                    // 'boundary-space'
    lookahead1W(116);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 181:                       // 'preserve'
      consume(181);                 // 'preserve'
      break;
    default:
      consume(199);                 // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'default'
    consume(105);                   // 'default'
    lookahead1W(39);                // S^WS | '(:' | 'collation'
    consume(95);                    // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(34);                // S^WS | '(:' | 'base-uri'
    consume(86);                    // 'base-uri'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(40);                // S^WS | '(:' | 'construction'
    consume(97);                    // 'construction'
    lookahead1W(116);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 199:                       // 'strip'
      consume(199);                 // 'strip'
      break;
    default:
      consume(181);                 // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(59);                // S^WS | '(:' | 'ordering'
    consume(174);                   // 'ordering'
    lookahead1W(115);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 173:                       // 'ordered'
      consume(173);                 // 'ordered'
      break;
    default:
      consume(212);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'default'
    consume(105);                   // 'default'
    lookahead1W(58);                // S^WS | '(:' | 'order'
    consume(172);                   // 'order'
    lookahead1W(48);                // S^WS | '(:' | 'empty'
    consume(116);                   // 'empty'
    lookahead1W(108);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 130:                       // 'greatest'
      consume(130);                 // 'greatest'
      break;
    default:
      consume(151);                 // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(42);                // S^WS | '(:' | 'copy-namespaces'
    consume(100);                   // 'copy-namespaces'
    lookahead1W(112);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(41);                    // ','
    lookahead1W(109);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 181:                       // 'preserve'
      consume(181);                 // 'preserve'
      break;
    default:
      consume(164);                 // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 139:                       // 'inherit'
      consume(139);                 // 'inherit'
      break;
    default:
      consume(163);                 // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(102);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 102:                       // 'decimal-format'
      consume(102);                 // 'decimal-format'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(105);                 // 'default'
      lookahead1W(43);              // S^WS | '(:' | 'decimal-format'
      consume(102);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(158);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 53)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(61);                  // '='
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(5);                   // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 103:                       // 'decimal-separator'
      consume(103);                 // 'decimal-separator'
      break;
    case 132:                       // 'grouping-separator'
      consume(132);                 // 'grouping-separator'
      break;
    case 138:                       // 'infinity'
      consume(138);                 // 'infinity'
      break;
    case 155:                       // 'minus-sign'
      consume(155);                 // 'minus-sign'
      break;
    case 69:                        // 'NaN'
      consume(69);                  // 'NaN'
      break;
    case 178:                       // 'percent'
      consume(178);                 // 'percent'
      break;
    case 177:                       // 'per-mille'
      consume(177);                 // 'per-mille'
      break;
    case 224:                       // 'zero-digit'
      consume(224);                 // 'zero-digit'
      break;
    case 110:                       // 'digit'
      consume(110);                 // 'digit'
      break;
    default:
      consume(176);                 // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 136:                       // 'import'
      lookahead2W(110);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 48520:                     // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(136);                   // 'import'
    lookahead1W(64);                // S^WS | '(:' | 'schema'
    consume(189);                   // 'schema'
    lookahead1W(121);               // StringLiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 5)                    // StringLiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(94);                // S^WS | '(:' | ';' | 'at'
    if (l1 == 84)                   // 'at'
    {
      consume(84);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(86);            // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 159:                       // 'namespace'
      consume(159);                 // 'namespace'
      lookahead1W(166);             // NCName^Token | S^WS | '(:' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(61);                  // '='
      break;
    default:
      consume(105);                 // 'default'
      lookahead1W(46);              // S^WS | '(:' | 'element'
      consume(114);                 // 'element'
      lookahead1W(55);              // S^WS | '(:' | 'namespace'
      consume(159);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(136);                   // 'import'
    lookahead1W(54);                // S^WS | '(:' | 'module'
    consume(158);                   // 'module'
    lookahead1W(75);                // StringLiteral | S^WS | '(:' | 'namespace'
    if (l1 == 159)                  // 'namespace'
    {
      consume(159);                 // 'namespace'
      lookahead1W(166);             // NCName^Token | S^WS | '(:' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(61);                  // '='
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(94);                // S^WS | '(:' | ';' | 'at'
    if (l1 == 84)                   // 'at'
    {
      consume(84);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(86);            // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(55);                // S^WS | '(:' | 'namespace'
    consume(159);                   // 'namespace'
    lookahead1W(166);               // NCName^Token | S^WS | '(:' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(61);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'default'
    consume(105);                   // 'default'
    lookahead1W(103);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 114:                       // 'element'
      consume(114);                 // 'element'
      break;
    default:
      consume(128);                 // 'function'
    }
    lookahead1W(55);                // S^WS | '(:' | 'namespace'
    consume(159);                   // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(104);                   // 'declare'
    for (;;)
    {
      lookahead1W(138);             // S^WS | '%' | '(:' | 'function' | 'updating' | 'variable'
      if (l1 != 33                  // '%'
       && l1 != 214)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 214:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 217:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    default:
      whitespace();
      parse_FunctionDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    consume(214);                   // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(33);                    // '%'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(143);               // S^WS | '%' | '(' | '(:' | 'function' | 'updating' | 'variable'
    if (l1 == 35)                   // '('
    {
      consume(35);                  // '('
      lookahead1W(136);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(84);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(136);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(38);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    consumeT(33);                   // '%'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_EQName();
    lookahead1W(143);               // S^WS | '%' | '(' | '(:' | 'function' | 'updating' | 'variable'
    if (l1 == 35)                   // '('
    {
      consumeT(35);                 // '('
      lookahead1W(136);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(84);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(136);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(38);                 // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(217);                   // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(128);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(93);                // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      consume(52);                  // ':='
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(123);                 // 'external'
      lookahead1W(91);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consume(52);                // ':='
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'context'
    consume(98);                    // 'context'
    lookahead1W(52);                // S^WS | '(:' | 'item'
    consume(146);                   // 'item'
    lookahead1W(128);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 82)                   // 'as'
    {
      consume(82);                  // 'as'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(93);                // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      consume(52);                  // ':='
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(123);                 // 'external'
      lookahead1W(91);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consume(52);                // ':='
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(128);                   // 'function'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(79);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(38);                    // ')'
    lookahead1W(130);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_ReturnType();
    }
    lookahead1W(107);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      whitespace();
      parse_FunctionBody();
      break;
    default:
      consume(123);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function parse_ReturnType()
  {
    eventHandler.startNonterminal("ReturnType", e0);
    consume(82);                    // 'as'
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("ReturnType", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(84);              // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(84);              // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(126);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_EQName();
    lookahead1W(126);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(229);                  // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(57);                // S^WS | '(:' | 'option'
    consume(170);                   // 'option'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(5);                     // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_QueryBody()
  {
    eventHandler.startNonterminal("QueryBody", e0);
    parse_Expr();
    eventHandler.endNonterminal("QueryBody", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(147);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(147);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_ExprSingle();
    }
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 127:                       // 'for'
      lookahead2W(196);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'sliding' | 'stable' | 'start' | 'to' | 'treat' | 'tumbling' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 144:                       // 'invoke'
      lookahead2W(189);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'updating' | 'where' | 'with' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 207:                       // 'try'
      lookahead2W(190);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 213:                       // 'update'
      lookahead2W(197);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'delete' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'rename' |
                                    // 'replace' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'value' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 135:                       // 'if'
    case 201:                       // 'switch'
    case 210:                       // 'typeswitch'
      lookahead2W(184);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 99:                        // 'copy'
    case 121:                       // 'every'
    case 152:                       // 'let'
    case 195:                       // 'some'
      lookahead2W(188);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8319:                      // 'for' '$'
    case 8344:                      // 'let' '$'
    case 49791:                     // 'for' 'sliding'
    case 53375:                     // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 8313:                      // 'every' '$'
    case 8387:                      // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 9161:                      // 'switch' '('
      parse_SwitchExpr();
      break;
    case 9170:                      // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    case 9095:                      // 'if' '('
      parse_IfExpr();
      break;
    case 57807:                     // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 36053:                     // 'update' 'insert'
      parse_InsertExpr();
      break;
    case 27349:                     // 'update' 'delete'
      parse_DeleteExpr();
      break;
    case 47317:                     // 'update' 'rename'
      parse_RenameExpr();
      break;
    case 47573:                     // 'update' 'replace'
      parse_ReplaceExpr();
      break;
    case 55509:                     // 'update' 'value'
      parse_UpdateValueExpr();
      break;
    case 54928:                     // 'invoke' 'updating'
      parse_UpdatingFunctionCall();
      break;
    case 8291:                      // 'copy' '$'
      parse_CopyModifyExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 127:                       // 'for'
      lookahead2W(196);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'sliding' | 'stable' | 'start' | 'to' | 'treat' | 'tumbling' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 144:                       // 'invoke'
      lookahead2W(189);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'updating' | 'where' | 'with' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 207:                       // 'try'
      lookahead2W(190);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 213:                       // 'update'
      lookahead2W(197);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'delete' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'rename' |
                                    // 'replace' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'value' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 135:                       // 'if'
    case 201:                       // 'switch'
    case 210:                       // 'typeswitch'
      lookahead2W(184);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 99:                        // 'copy'
    case 121:                       // 'every'
    case 152:                       // 'let'
    case 195:                       // 'some'
      lookahead2W(188);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8319:                      // 'for' '$'
    case 8344:                      // 'let' '$'
    case 49791:                     // 'for' 'sliding'
    case 53375:                     // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 8313:                      // 'every' '$'
    case 8387:                      // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 9161:                      // 'switch' '('
      try_SwitchExpr();
      break;
    case 9170:                      // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    case 9095:                      // 'if' '('
      try_IfExpr();
      break;
    case 57807:                     // 'try' '{'
      try_TryCatchExpr();
      break;
    case 36053:                     // 'update' 'insert'
      try_InsertExpr();
      break;
    case 27349:                     // 'update' 'delete'
      try_DeleteExpr();
      break;
    case 47317:                     // 'update' 'rename'
      try_RenameExpr();
      break;
    case 47573:                     // 'update' 'replace'
      try_ReplaceExpr();
      break;
    case 55509:                     // 'update' 'value'
      try_UpdateValueExpr();
      break;
    case 54928:                     // 'invoke' 'updating'
      try_UpdatingFunctionCall();
      break;
    case 8291:                      // 'copy' '$'
      try_CopyModifyExpr();
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(151);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 186)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(151);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 186)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 127:                       // 'for'
      lookahead2W(125);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8319:                      // 'for' '$'
      parse_ForClause();
      break;
    case 152:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 127:                       // 'for'
      lookahead2W(125);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8319:                      // 'for' '$'
      try_ForClause();
      break;
    case 152:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 127:                       // 'for'
    case 152:                       // 'let'
      parse_InitialClause();
      break;
    case 220:                       // 'where'
      parse_WhereClause();
      break;
    case 131:                       // 'group'
      parse_GroupByClause();
      break;
    case 101:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 127:                       // 'for'
    case 152:                       // 'let'
      try_InitialClause();
      break;
    case 220:                       // 'where'
      try_WhereClause();
      break;
    case 131:                       // 'group'
      try_GroupByClause();
      break;
    case 101:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(127);                   // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      lookahead1W(153);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    consumeT(127);                  // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      lookahead1W(153);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(139);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(129);               // S^WS | '(:' | 'allowing' | 'at' | 'in'
    if (l1 == 77)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(98);                // S^WS | '(:' | 'at' | 'in'
    if (l1 == 84)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(50);                // S^WS | '(:' | 'in'
    consume(137);                   // 'in'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(139);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(129);               // S^WS | '(:' | 'allowing' | 'at' | 'in'
    if (l1 == 77)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(98);                // S^WS | '(:' | 'at' | 'in'
    if (l1 == 84)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(50);                // S^WS | '(:' | 'in'
    consumeT(137);                  // 'in'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(77);                    // 'allowing'
    lookahead1W(48);                // S^WS | '(:' | 'empty'
    consume(116);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    consumeT(77);                   // 'allowing'
    lookahead1W(48);                // S^WS | '(:' | 'empty'
    consumeT(116);                  // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(84);                    // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    consumeT(84);                   // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(152);                   // 'let'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      lookahead1W(153);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    consumeT(152);                  // 'let'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_LetBinding();
    for (;;)
    {
      lookahead1W(153);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(92);                // S^WS | '(:' | ':=' | 'as'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(52);                    // ':='
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(92);                // S^WS | '(:' | ':=' | 'as'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(52);                   // ':='
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(127);                   // 'for'
    lookahead1W(118);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 208:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    consumeT(127);                  // 'for'
    lookahead1W(118);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 208:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(208);                   // 'tumbling'
    lookahead1W(70);                // S^WS | '(:' | 'window'
    consume(221);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(50);                // S^WS | '(:' | 'in'
    consume(137);                   // 'in'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(65);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(156);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 119                   // 'end'
     || l1 == 169)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    consumeT(208);                  // 'tumbling'
    lookahead1W(70);                // S^WS | '(:' | 'window'
    consumeT(221);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(50);                // S^WS | '(:' | 'in'
    consumeT(137);                  // 'in'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(65);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(156);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 119                   // 'end'
     || l1 == 169)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(194);                   // 'sliding'
    lookahead1W(70);                // S^WS | '(:' | 'window'
    consume(221);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(50);                // S^WS | '(:' | 'in'
    consume(137);                   // 'in'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(65);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(105);               // S^WS | '(:' | 'end' | 'only'
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    consumeT(194);                  // 'sliding'
    lookahead1W(70);                // S^WS | '(:' | 'window'
    consumeT(221);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(50);                // S^WS | '(:' | 'in'
    consumeT(137);                  // 'in'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(65);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(105);               // S^WS | '(:' | 'end' | 'only'
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(197);                   // 'start'
    lookahead1W(142);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(69);                // S^WS | '(:' | 'when'
    consume(219);                   // 'when'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    consumeT(197);                  // 'start'
    lookahead1W(142);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(69);                // S^WS | '(:' | 'when'
    consumeT(219);                  // 'when'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 169)                  // 'only'
    {
      consume(169);                 // 'only'
    }
    lookahead1W(49);                // S^WS | '(:' | 'end'
    consume(119);                   // 'end'
    lookahead1W(142);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(69);                // S^WS | '(:' | 'when'
    consume(219);                   // 'when'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 169)                  // 'only'
    {
      consumeT(169);                // 'only'
    }
    lookahead1W(49);                // S^WS | '(:' | 'end'
    consumeT(119);                  // 'end'
    lookahead1W(142);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(69);                // S^WS | '(:' | 'when'
    consumeT(219);                  // 'when'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 32)                   // '$'
    {
      consume(32);                  // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 84)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(135);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 182)                  // 'previous'
    {
      consume(182);                 // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(32);                  // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(111);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 162)                  // 'next'
    {
      consume(162);                 // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(32);                  // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 32)                   // '$'
    {
      consumeT(32);                 // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_CurrentItem();
    }
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 84)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(135);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 182)                  // 'previous'
    {
      consumeT(182);                // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(32);                 // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_PreviousItem();
    }
    lookahead1W(111);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 162)                  // 'next'
    {
      consumeT(162);                // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(32);                 // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(101);                   // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    consumeT(101);                  // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(220);                   // 'where'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    consumeT(220);                  // 'where'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(131);                   // 'group'
    lookahead1W(36);                // S^WS | '(:' | 'by'
    consume(89);                    // 'by'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    consumeT(131);                  // 'group'
    lookahead1W(36);                // S^WS | '(:' | 'by'
    consumeT(89);                   // 'by'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(153);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(153);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    parse_GroupingVariable();
    lookahead1W(159);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 52                    // ':='
     || l1 == 82)                   // 'as'
    {
      if (l1 == 82)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(30);              // S^WS | '(:' | ':='
      consume(52);                  // ':='
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    lookahead1W(155);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 95)                   // 'collation'
    {
      consume(95);                  // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    try_GroupingVariable();
    lookahead1W(159);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 52                    // ':='
     || l1 == 82)                   // 'as'
    {
      if (l1 == 82)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(30);              // S^WS | '(:' | ':='
      consumeT(52);                 // ':='
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_ExprSingle();
    }
    lookahead1W(155);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 95)                   // 'collation'
    {
      consumeT(95);                 // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 172:                       // 'order'
      consume(172);                 // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consume(89);                  // 'by'
      break;
    default:
      consume(196);                 // 'stable'
      lookahead1W(58);              // S^WS | '(:' | 'order'
      consume(172);                 // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consume(89);                  // 'by'
    }
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 172:                       // 'order'
      consumeT(172);                // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consumeT(89);                 // 'by'
      break;
    default:
      consumeT(196);                // 'stable'
      lookahead1W(58);              // S^WS | '(:' | 'order'
      consumeT(172);                // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consumeT(89);                 // 'by'
    }
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(153);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(153);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    lookahead1W(161);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    lookahead1W(161);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 83                    // 'ascending'
     || l1 == 109)                  // 'descending'
    {
      switch (l1)
      {
      case 83:                      // 'ascending'
        consume(83);                // 'ascending'
        break;
      default:
        consume(109);               // 'descending'
      }
    }
    lookahead1W(157);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 116)                  // 'empty'
    {
      consume(116);                 // 'empty'
      lookahead1W(108);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 130:                     // 'greatest'
        consume(130);               // 'greatest'
        break;
      default:
        consume(151);               // 'least'
      }
    }
    lookahead1W(155);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 95)                   // 'collation'
    {
      consume(95);                  // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 83                    // 'ascending'
     || l1 == 109)                  // 'descending'
    {
      switch (l1)
      {
      case 83:                      // 'ascending'
        consumeT(83);               // 'ascending'
        break;
      default:
        consumeT(109);              // 'descending'
      }
    }
    lookahead1W(157);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 116)                  // 'empty'
    {
      consumeT(116);                // 'empty'
      lookahead1W(108);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 130:                     // 'greatest'
        consumeT(130);              // 'greatest'
        break;
      default:
        consumeT(151);              // 'least'
      }
    }
    lookahead1W(155);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 95)                   // 'collation'
    {
      consumeT(95);                 // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(186);                   // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    consumeT(186);                  // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 195:                       // 'some'
      consume(195);                 // 'some'
      break;
    default:
      consume(121);                 // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(50);                // S^WS | '(:' | 'in'
    consume(137);                   // 'in'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(89);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(32);                  // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(96);              // S^WS | '(:' | 'as' | 'in'
      if (l1 == 82)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(50);              // S^WS | '(:' | 'in'
      consume(137);                 // 'in'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    consume(188);                   // 'satisfies'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 195:                       // 'some'
      consumeT(195);                // 'some'
      break;
    default:
      consumeT(121);                // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(50);                // S^WS | '(:' | 'in'
    consumeT(137);                  // 'in'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(89);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(32);                 // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_VarName();
      lookahead1W(96);              // S^WS | '(:' | 'as' | 'in'
      if (l1 == 82)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(50);              // S^WS | '(:' | 'in'
      consumeT(137);                // 'in'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_ExprSingle();
    }
    consumeT(188);                  // 'satisfies'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(201);                   // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      lookahead1W(100);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 90)                 // 'case'
      {
        break;
      }
    }
    consume(105);                   // 'default'
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consume(186);                   // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    consumeT(201);                  // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(38);                   // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      lookahead1W(100);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 90)                 // 'case'
      {
        break;
      }
    }
    consumeT(105);                  // 'default'
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consumeT(186);                  // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(90);                  // 'case'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SwitchCaseOperand();
      lookahead1W(101);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 90)                 // 'case'
      {
        break;
      }
    }
    consume(186);                   // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(90);                 // 'case'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SwitchCaseOperand();
      lookahead1W(101);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 90)                 // 'case'
      {
        break;
      }
    }
    consumeT(186);                  // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(210);                   // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      lookahead1W(100);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 90)                 // 'case'
      {
        break;
      }
    }
    consume(105);                   // 'default'
    lookahead1W(80);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 32)                   // '$'
    {
      consume(32);                  // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consume(186);                   // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    consumeT(210);                  // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(38);                   // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      try_CaseClause();
      lookahead1W(100);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 90)                 // 'case'
      {
        break;
      }
    }
    consumeT(105);                  // 'default'
    lookahead1W(80);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 32)                   // '$'
    {
      consumeT(32);                 // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consumeT(186);                  // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(90);                    // 'case'
    lookahead1W(212);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' |
                                    // 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    if (l1 == 32)                   // '$'
    {
      consume(32);                  // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(82);                  // 'as'
    }
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(186);                   // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    consumeT(90);                   // 'case'
    lookahead1W(212);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' |
                                    // 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    if (l1 == 32)                   // '$'
    {
      consumeT(32);                 // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(82);                 // 'as'
    }
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_SequenceTypeUnion();
    consumeT(186);                  // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(117);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 227)                // '|'
      {
        break;
      }
      consume(227);                 // '|'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(117);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 227)                // '|'
      {
        break;
      }
      consumeT(227);                // '|'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(135);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    lookahead1W(66);                // S^WS | '(:' | 'then'
    consume(203);                   // 'then'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(47);                // S^WS | '(:' | 'else'
    consume(115);                   // 'else'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    consumeT(135);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(38);                   // ')'
    lookahead1W(66);                // S^WS | '(:' | 'then'
    consumeT(203);                  // 'then'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(47);                // S^WS | '(:' | 'else'
    consumeT(115);                  // 'else'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(162);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'as' | 'ascending' | 'case' |
                                    // 'catch' | 'collation' | 'count' | 'default' | 'descending' | 'else' | 'empty' |
                                    // 'end' | 'following' | 'for' | 'group' | 'into' | 'let' | 'modify' | 'only' |
                                    // 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' | 'start' | 'where' |
                                    // 'with' | '}' | '}`'
      if (l1 != 93)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(162);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'as' | 'ascending' | 'case' |
                                    // 'catch' | 'collation' | 'count' | 'default' | 'descending' | 'else' | 'empty' |
                                    // 'end' | 'following' | 'for' | 'group' | 'into' | 'let' | 'modify' | 'only' |
                                    // 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' | 'start' | 'where' |
                                    // 'with' | '}' | '}`'
      if (l1 != 93)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(207);                   // 'try'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TryTargetExpr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    consumeT(207);                  // 'try'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_TryTargetExpr();
    consumeT(229);                  // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(93);                    // 'catch'
    lookahead1W(205);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_CatchErrorList();
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    consumeT(93);                   // 'catch'
    lookahead1W(205);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_CatchErrorList();
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(229);                  // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(120);             // S^WS | '(:' | '{' | '|'
      if (l1 != 227)                // '|'
      {
        break;
      }
      consume(227);                 // '|'
      lookahead1W(205);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(120);             // S^WS | '(:' | '{' | '|'
      if (l1 != 227)                // '|'
      {
        break;
      }
      consumeT(227);                // '|'
      lookahead1W(205);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 171)                // 'or'
      {
        break;
      }
      consume(171);                 // 'or'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 171)                // 'or'
      {
        break;
      }
      consumeT(171);                // 'or'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 80)                 // 'and'
      {
        break;
      }
      consume(80);                  // 'and'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 80)                 // 'and'
      {
        break;
      }
      consumeT(80);                 // 'and'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 28                    // '!='
     || l1 == 54                    // '<'
     || l1 == 58                    // '<<'
     || l1 == 59                    // '<='
     || l1 == 61                    // '='
     || l1 == 63                    // '>'
     || l1 == 64                    // '>='
     || l1 == 65                    // '>>'
     || l1 == 120                   // 'eq'
     || l1 == 129                   // 'ge'
     || l1 == 133                   // 'gt'
     || l1 == 145                   // 'is'
     || l1 == 150                   // 'le'
     || l1 == 153                   // 'lt'
     || l1 == 161)                  // 'ne'
    {
      switch (l1)
      {
      case 120:                     // 'eq'
      case 129:                     // 'ge'
      case 133:                     // 'gt'
      case 150:                     // 'le'
      case 153:                     // 'lt'
      case 161:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 58:                      // '<<'
      case 65:                      // '>>'
      case 145:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_StringConcatExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_StringConcatExpr();
    if (l1 == 28                    // '!='
     || l1 == 54                    // '<'
     || l1 == 58                    // '<<'
     || l1 == 59                    // '<='
     || l1 == 61                    // '='
     || l1 == 63                    // '>'
     || l1 == 64                    // '>='
     || l1 == 65                    // '>>'
     || l1 == 120                   // 'eq'
     || l1 == 129                   // 'ge'
     || l1 == 133                   // 'gt'
     || l1 == 145                   // 'is'
     || l1 == 150                   // 'le'
     || l1 == 153                   // 'lt'
     || l1 == 161)                  // 'ne'
    {
      switch (l1)
      {
      case 120:                     // 'eq'
      case 129:                     // 'ge'
      case 133:                     // 'gt'
      case 150:                     // 'le'
      case 153:                     // 'lt'
      case 161:                     // 'ne'
        try_ValueComp();
        break;
      case 58:                      // '<<'
      case 65:                      // '>>'
      case 145:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_StringConcatExpr();
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 228)                // '||'
      {
        break;
      }
      consume(228);                 // '||'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 228)                // '||'
      {
        break;
      }
      consumeT(228);                // '||'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 204)                  // 'to'
    {
      consume(204);                 // 'to'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 204)                  // 'to'
    {
      consumeT(204);                // 'to'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        consume(40);                // '+'
        break;
      default:
        consume(42);                // '-'
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        consumeT(40);               // '+'
        break;
      default:
        consumeT(42);               // '-'
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 111                 // 'div'
       && l1 != 134                 // 'idiv'
       && l1 != 156)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        consume(39);                // '*'
        break;
      case 111:                     // 'div'
        consume(111);               // 'div'
        break;
      case 134:                     // 'idiv'
        consume(134);               // 'idiv'
        break;
      default:
        consume(156);               // 'mod'
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 111                 // 'div'
       && l1 != 134                 // 'idiv'
       && l1 != 156)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        consumeT(39);               // '*'
        break;
      case 111:                     // 'div'
        consumeT(111);              // 'div'
        break;
      case 134:                     // 'idiv'
        consumeT(134);              // 'idiv'
        break;
      default:
        consumeT(156);              // 'mod'
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 211                 // 'union'
       && l1 != 227)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 211:                     // 'union'
        consume(211);               // 'union'
        break;
      default:
        consume(227);               // '|'
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 211                 // 'union'
       && l1 != 227)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 211:                     // 'union'
        consumeT(211);              // 'union'
        break;
      default:
        consumeT(227);              // '|'
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(175);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'union' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      if (l1 != 122                 // 'except'
       && l1 != 142)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 142:                     // 'intersect'
        consume(142);               // 'intersect'
        break;
      default:
        consume(122);               // 'except'
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(175);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'union' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      if (l1 != 122                 // 'except'
       && l1 != 142)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 142:                     // 'intersect'
        consumeT(142);              // 'intersect'
        break;
      default:
        consumeT(122);              // 'except'
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(176);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
    if (l1 == 141)                  // 'instance'
    {
      consume(141);                 // 'instance'
      lookahead1W(56);              // S^WS | '(:' | 'of'
      consume(168);                 // 'of'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(176);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
    if (l1 == 141)                  // 'instance'
    {
      consumeT(141);                // 'instance'
      lookahead1W(56);              // S^WS | '(:' | 'of'
      consumeT(168);                // 'of'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(177);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '}' | '}`'
    if (l1 == 206)                  // 'treat'
    {
      consume(206);                 // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(82);                  // 'as'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(177);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '}' | '}`'
    if (l1 == 206)                  // 'treat'
    {
      consumeT(206);                // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(82);                 // 'as'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(178);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '}' | '}`'
    if (l1 == 92)                   // 'castable'
    {
      consume(92);                  // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(82);                  // 'as'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(178);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '}' | '}`'
    if (l1 == 92)                   // 'castable'
    {
      consumeT(92);                 // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(82);                 // 'as'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_ArrowExpr();
    if (l1 == 91)                   // 'cast'
    {
      consume(91);                  // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(82);                  // 'as'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_ArrowExpr();
    if (l1 == 91)                   // 'cast'
    {
      consumeT(91);                 // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(82);                 // 'as'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_ArrowExpr()
  {
    eventHandler.startNonterminal("ArrowExpr", e0);
    parse_UnaryExpr();
    for (;;)
    {
      lookahead1W(180);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      if (l1 != 62)                 // '=>'
      {
        break;
      }
      consume(62);                  // '=>'
      lookahead1W(209);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      whitespace();
      parse_ArgumentList();
    }
    eventHandler.endNonterminal("ArrowExpr", e0);
  }

  function try_ArrowExpr()
  {
    try_UnaryExpr();
    for (;;)
    {
      lookahead1W(180);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      if (l1 != 62)                 // '=>'
      {
        break;
      }
      consumeT(62);                 // '=>'
      lookahead1W(209);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      try_ArgumentList();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        consume(42);                // '-'
        break;
      default:
        consume(40);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        consumeT(42);               // '-'
        break;
      default:
        consumeT(40);               // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 215:                       // 'validate'
      lookahead2W(198);             // END | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'strict' | 'to' | 'transform' | 'treat' |
                                    // 'type' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 38359:                     // 'validate' 'lax'
    case 50903:                     // 'validate' 'strict'
    case 53719:                     // 'validate' 'type'
    case 57815:                     // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 36:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 215:                       // 'validate'
      lookahead2W(198);             // END | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'strict' | 'to' | 'transform' | 'treat' |
                                    // 'type' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 38359:                     // 'validate' 'lax'
    case 50903:                     // 'validate' 'strict'
    case 53719:                     // 'validate' 'type'
    case 57815:                     // 'validate' '{'
      try_ValidateExpr();
      break;
    case 36:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 61:                        // '='
      consume(61);                  // '='
      break;
    case 28:                        // '!='
      consume(28);                  // '!='
      break;
    case 54:                        // '<'
      consume(54);                  // '<'
      break;
    case 59:                        // '<='
      consume(59);                  // '<='
      break;
    case 63:                        // '>'
      consume(63);                  // '>'
      break;
    default:
      consume(64);                  // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 61:                        // '='
      consumeT(61);                 // '='
      break;
    case 28:                        // '!='
      consumeT(28);                 // '!='
      break;
    case 54:                        // '<'
      consumeT(54);                 // '<'
      break;
    case 59:                        // '<='
      consumeT(59);                 // '<='
      break;
    case 63:                        // '>'
      consumeT(63);                 // '>'
      break;
    default:
      consumeT(64);                 // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 120:                       // 'eq'
      consume(120);                 // 'eq'
      break;
    case 161:                       // 'ne'
      consume(161);                 // 'ne'
      break;
    case 153:                       // 'lt'
      consume(153);                 // 'lt'
      break;
    case 150:                       // 'le'
      consume(150);                 // 'le'
      break;
    case 133:                       // 'gt'
      consume(133);                 // 'gt'
      break;
    default:
      consume(129);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 120:                       // 'eq'
      consumeT(120);                // 'eq'
      break;
    case 161:                       // 'ne'
      consumeT(161);                // 'ne'
      break;
    case 153:                       // 'lt'
      consumeT(153);                // 'lt'
      break;
    case 150:                       // 'le'
      consumeT(150);                // 'le'
      break;
    case 133:                       // 'gt'
      consumeT(133);                // 'gt'
      break;
    default:
      consumeT(129);                // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 145:                       // 'is'
      consume(145);                 // 'is'
      break;
    case 58:                        // '<<'
      consume(58);                  // '<<'
      break;
    default:
      consume(65);                  // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 145:                       // 'is'
      consumeT(145);                // 'is'
      break;
    case 58:                        // '<<'
      consumeT(58);                 // '<<'
      break;
    default:
      consumeT(65);                 // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(215);                   // 'validate'
    lookahead1W(141);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 225)                  // '{'
    {
      switch (l1)
      {
      case 209:                     // 'type'
        consume(209);               // 'type'
        lookahead1W(203);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    consumeT(215);                  // 'validate'
    lookahead1W(141);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 225)                  // '{'
    {
      switch (l1)
      {
      case 209:                     // 'type'
        consumeT(209);              // 'type'
        lookahead1W(203);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(229);                  // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 149:                       // 'lax'
      consume(149);                 // 'lax'
      break;
    default:
      consume(198);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 149:                       // 'lax'
      consumeT(149);                // 'lax'
      break;
    default:
      consumeT(198);                // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(83);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    consume(225);                   // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(229);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(83);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    consumeT(225);                  // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      try_Expr();
    }
    consumeT(229);                  // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(36);                    // '(#'
    lookahead1(202);                // URIQualifiedName | QName^Token | S | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 18)                   // S
    {
      consume(18);                  // S
    }
    parse_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 18)                   // S
    {
      consume(18);                  // S
      lookahead1(2);                // PragmaContents
      consume(21);                  // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consume(31);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    consumeT(36);                   // '(#'
    lookahead1(202);                // URIQualifiedName | QName^Token | S | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 18)                   // S
    {
      consumeT(18);                 // S
    }
    try_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 18)                   // S
    {
      consumeT(18);                 // S
      lookahead1(2);                // PragmaContents
      consumeT(21);                 // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consumeT(31);                   // '#)'
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 27)                 // '!'
      {
        break;
      }
      consume(27);                  // '!'
      lookahead1W(217);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' |
                                    // 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 27)                 // '!'
      {
        break;
      }
      consumeT(27);                 // '!'
      lookahead1W(217);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' |
                                    // 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_PathExpr();
    }
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 46:                        // '/'
      consume(46);                  // '/'
      lookahead1W(228);             // END | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' |
                                    // '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 1:                       // END
      case 26:                      // EOF
      case 27:                      // '!'
      case 28:                      // '!='
      case 38:                      // ')'
      case 39:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 53:                      // ';'
      case 58:                      // '<<'
      case 59:                      // '<='
      case 61:                      // '='
      case 62:                      // '=>'
      case 63:                      // '>'
      case 64:                      // '>='
      case 65:                      // '>>'
      case 71:                      // ']'
      case 227:                     // '|'
      case 228:                     // '||'
      case 229:                     // '}'
      case 230:                     // '}`'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      consume(47);                  // '//'
      lookahead1W(216);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 46:                        // '/'
      consumeT(46);                 // '/'
      lookahead1W(228);             // END | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' |
                                    // '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 1:                       // END
      case 26:                      // EOF
      case 27:                      // '!'
      case 28:                      // '!='
      case 38:                      // ')'
      case 39:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 53:                      // ';'
      case 58:                      // '<<'
      case 59:                      // '<='
      case 61:                      // '='
      case 62:                      // '=>'
      case 63:                      // '>'
      case 64:                      // '>='
      case 65:                      // '>>'
      case 71:                      // ']'
      case 227:                     // '|'
      case 228:                     // '||'
      case 229:                     // '}'
      case 230:                     // '}`'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      consumeT(47);                 // '//'
      lookahead1W(216);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      if (l1 != 46                  // '/'
       && l1 != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        consume(46);                // '/'
        break;
      default:
        consume(47);                // '//'
      }
      lookahead1W(216);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      if (l1 != 46                  // '/'
       && l1 != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        consumeT(46);               // '/'
        break;
      default:
        consumeT(47);               // '//'
      }
      lookahead1W(216);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 85:                        // 'attribute'
      lookahead2W(227);             // END | URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' |
                                    // '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      switch (lk)
      {
      case 23125:                   // 'attribute' 'case'
        lookahead3W(225);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'json-item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'object' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 24405:                   // 'attribute' 'collation'
        lookahead3W(76);            // StringLiteral | S^WS | '(:' | '{'
        break;
      case 26965:                   // 'attribute' 'default'
        lookahead3W(124);           // S^WS | '$' | '(:' | 'return' | '{'
        break;
      case 29781:                   // 'attribute' 'empty'
        lookahead3W(133);           // S^WS | '(:' | 'greatest' | 'least' | '{'
        break;
      case 32597:                   // 'attribute' 'for'
        lookahead3W(137);           // S^WS | '$' | '(:' | 'sliding' | 'tumbling' | '{'
        break;
      case 36181:                   // 'attribute' 'instance'
        lookahead3W(113);           // S^WS | '(:' | 'of' | '{'
        break;
      case 43349:                   // 'attribute' 'only'
        lookahead3W(106);           // S^WS | '(:' | 'end' | '{'
        break;
      case 50261:                   // 'attribute' 'stable'
        lookahead3W(114);           // S^WS | '(:' | 'order' | '{'
        break;
      case 52565:                   // 'attribute' 'transform'
        lookahead3W(119);           // S^WS | '(:' | 'with' | '{'
        break;
      case 21333:                   // 'attribute' 'ascending'
      case 27989:                   // 'attribute' 'descending'
        lookahead3W(160);           // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where' | '{'
        break;
      case 25941:                   // 'attribute' 'count'
      case 38997:                   // 'attribute' 'let'
        lookahead3W(81);            // S^WS | '$' | '(:' | '{'
        break;
      case 30549:                   // 'attribute' 'end'
      case 50517:                   // 'attribute' 'start'
        lookahead3W(148);           // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when' | '{'
        break;
      case 33621:                   // 'attribute' 'group'
      case 44117:                   // 'attribute' 'order'
        lookahead3W(99);            // S^WS | '(:' | 'by' | '{'
        break;
      case 23381:                   // 'attribute' 'cast'
      case 23637:                   // 'attribute' 'castable'
      case 52821:                   // 'attribute' 'treat'
        lookahead3W(97);            // S^WS | '(:' | 'as' | '{'
        break;
      case 20565:                   // 'attribute' 'and'
      case 21077:                   // 'attribute' 'as'
      case 28501:                   // 'attribute' 'div'
      case 29525:                   // 'attribute' 'else'
      case 30805:                   // 'attribute' 'eq'
      case 31317:                   // 'attribute' 'except'
      case 32085:                   // 'attribute' 'following'
      case 33109:                   // 'attribute' 'ge'
      case 34133:                   // 'attribute' 'gt'
      case 34389:                   // 'attribute' 'idiv'
      case 36437:                   // 'attribute' 'intersect'
      case 36693:                   // 'attribute' 'into'
      case 37205:                   // 'attribute' 'is'
      case 38485:                   // 'attribute' 'le'
      case 39253:                   // 'attribute' 'lt'
      case 40021:                   // 'attribute' 'mod'
      case 40277:                   // 'attribute' 'modify'
      case 41301:                   // 'attribute' 'ne'
      case 43861:                   // 'attribute' 'or'
      case 45909:                   // 'attribute' 'preceding'
      case 47701:                   // 'attribute' 'return'
      case 48213:                   // 'attribute' 'satisfies'
      case 52309:                   // 'attribute' 'to'
      case 54101:                   // 'attribute' 'union'
      case 56405:                   // 'attribute' 'where'
      case 56917:                   // 'attribute' 'with'
        lookahead3W(222);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
        break;
      }
      break;
    case 114:                       // 'element'
      lookahead2W(226);             // END | URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' |
                                    // '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      switch (lk)
      {
      case 23154:                   // 'element' 'case'
        lookahead3W(225);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'json-item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'object' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 24434:                   // 'element' 'collation'
        lookahead3W(76);            // StringLiteral | S^WS | '(:' | '{'
        break;
      case 26994:                   // 'element' 'default'
        lookahead3W(124);           // S^WS | '$' | '(:' | 'return' | '{'
        break;
      case 29810:                   // 'element' 'empty'
        lookahead3W(133);           // S^WS | '(:' | 'greatest' | 'least' | '{'
        break;
      case 32626:                   // 'element' 'for'
        lookahead3W(137);           // S^WS | '$' | '(:' | 'sliding' | 'tumbling' | '{'
        break;
      case 36210:                   // 'element' 'instance'
        lookahead3W(113);           // S^WS | '(:' | 'of' | '{'
        break;
      case 43378:                   // 'element' 'only'
        lookahead3W(106);           // S^WS | '(:' | 'end' | '{'
        break;
      case 50290:                   // 'element' 'stable'
        lookahead3W(114);           // S^WS | '(:' | 'order' | '{'
        break;
      case 52594:                   // 'element' 'transform'
        lookahead3W(119);           // S^WS | '(:' | 'with' | '{'
        break;
      case 21362:                   // 'element' 'ascending'
      case 28018:                   // 'element' 'descending'
        lookahead3W(160);           // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where' | '{'
        break;
      case 25970:                   // 'element' 'count'
      case 39026:                   // 'element' 'let'
        lookahead3W(81);            // S^WS | '$' | '(:' | '{'
        break;
      case 30578:                   // 'element' 'end'
      case 50546:                   // 'element' 'start'
        lookahead3W(148);           // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when' | '{'
        break;
      case 33650:                   // 'element' 'group'
      case 44146:                   // 'element' 'order'
        lookahead3W(99);            // S^WS | '(:' | 'by' | '{'
        break;
      case 23410:                   // 'element' 'cast'
      case 23666:                   // 'element' 'castable'
      case 52850:                   // 'element' 'treat'
        lookahead3W(97);            // S^WS | '(:' | 'as' | '{'
        break;
      case 20594:                   // 'element' 'and'
      case 21106:                   // 'element' 'as'
      case 28530:                   // 'element' 'div'
      case 29554:                   // 'element' 'else'
      case 30834:                   // 'element' 'eq'
      case 31346:                   // 'element' 'except'
      case 32114:                   // 'element' 'following'
      case 33138:                   // 'element' 'ge'
      case 34162:                   // 'element' 'gt'
      case 34418:                   // 'element' 'idiv'
      case 36466:                   // 'element' 'intersect'
      case 36722:                   // 'element' 'into'
      case 37234:                   // 'element' 'is'
      case 38514:                   // 'element' 'le'
      case 39282:                   // 'element' 'lt'
      case 40050:                   // 'element' 'mod'
      case 40306:                   // 'element' 'modify'
      case 41330:                   // 'element' 'ne'
      case 43890:                   // 'element' 'or'
      case 45938:                   // 'element' 'preceding'
      case 47730:                   // 'element' 'return'
      case 48242:                   // 'element' 'satisfies'
      case 52338:                   // 'element' 'to'
      case 54130:                   // 'element' 'union'
      case 56434:                   // 'element' 'where'
      case 56946:                   // 'element' 'with'
        lookahead3W(222);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
        break;
      }
      break;
    case 154:                       // 'map'
      lookahead2W(192);             // END | S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 159:                       // 'namespace'
    case 183:                       // 'processing-instruction'
      lookahead2W(199);             // END | NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'preceding' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      switch (lk)
      {
      case 23199:                   // 'namespace' 'case'
      case 23223:                   // 'processing-instruction' 'case'
        lookahead3W(225);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'json-item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'object' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 24479:                   // 'namespace' 'collation'
      case 24503:                   // 'processing-instruction' 'collation'
        lookahead3W(76);            // StringLiteral | S^WS | '(:' | '{'
        break;
      case 27039:                   // 'namespace' 'default'
      case 27063:                   // 'processing-instruction' 'default'
        lookahead3W(124);           // S^WS | '$' | '(:' | 'return' | '{'
        break;
      case 29855:                   // 'namespace' 'empty'
      case 29879:                   // 'processing-instruction' 'empty'
        lookahead3W(133);           // S^WS | '(:' | 'greatest' | 'least' | '{'
        break;
      case 32671:                   // 'namespace' 'for'
      case 32695:                   // 'processing-instruction' 'for'
        lookahead3W(137);           // S^WS | '$' | '(:' | 'sliding' | 'tumbling' | '{'
        break;
      case 36255:                   // 'namespace' 'instance'
      case 36279:                   // 'processing-instruction' 'instance'
        lookahead3W(113);           // S^WS | '(:' | 'of' | '{'
        break;
      case 43423:                   // 'namespace' 'only'
      case 43447:                   // 'processing-instruction' 'only'
        lookahead3W(106);           // S^WS | '(:' | 'end' | '{'
        break;
      case 50335:                   // 'namespace' 'stable'
      case 50359:                   // 'processing-instruction' 'stable'
        lookahead3W(114);           // S^WS | '(:' | 'order' | '{'
        break;
      case 52639:                   // 'namespace' 'transform'
      case 52663:                   // 'processing-instruction' 'transform'
        lookahead3W(119);           // S^WS | '(:' | 'with' | '{'
        break;
      case 21407:                   // 'namespace' 'ascending'
      case 28063:                   // 'namespace' 'descending'
      case 21431:                   // 'processing-instruction' 'ascending'
      case 28087:                   // 'processing-instruction' 'descending'
        lookahead3W(160);           // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where' | '{'
        break;
      case 26015:                   // 'namespace' 'count'
      case 39071:                   // 'namespace' 'let'
      case 26039:                   // 'processing-instruction' 'count'
      case 39095:                   // 'processing-instruction' 'let'
        lookahead3W(81);            // S^WS | '$' | '(:' | '{'
        break;
      case 30623:                   // 'namespace' 'end'
      case 50591:                   // 'namespace' 'start'
      case 30647:                   // 'processing-instruction' 'end'
      case 50615:                   // 'processing-instruction' 'start'
        lookahead3W(148);           // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when' | '{'
        break;
      case 33695:                   // 'namespace' 'group'
      case 44191:                   // 'namespace' 'order'
      case 33719:                   // 'processing-instruction' 'group'
      case 44215:                   // 'processing-instruction' 'order'
        lookahead3W(99);            // S^WS | '(:' | 'by' | '{'
        break;
      case 23455:                   // 'namespace' 'cast'
      case 23711:                   // 'namespace' 'castable'
      case 52895:                   // 'namespace' 'treat'
      case 23479:                   // 'processing-instruction' 'cast'
      case 23735:                   // 'processing-instruction' 'castable'
      case 52919:                   // 'processing-instruction' 'treat'
        lookahead3W(97);            // S^WS | '(:' | 'as' | '{'
        break;
      case 20639:                   // 'namespace' 'and'
      case 21151:                   // 'namespace' 'as'
      case 28575:                   // 'namespace' 'div'
      case 29599:                   // 'namespace' 'else'
      case 30879:                   // 'namespace' 'eq'
      case 31391:                   // 'namespace' 'except'
      case 33183:                   // 'namespace' 'ge'
      case 34207:                   // 'namespace' 'gt'
      case 34463:                   // 'namespace' 'idiv'
      case 36511:                   // 'namespace' 'intersect'
      case 36767:                   // 'namespace' 'into'
      case 37279:                   // 'namespace' 'is'
      case 38559:                   // 'namespace' 'le'
      case 39327:                   // 'namespace' 'lt'
      case 40095:                   // 'namespace' 'mod'
      case 40351:                   // 'namespace' 'modify'
      case 41375:                   // 'namespace' 'ne'
      case 43935:                   // 'namespace' 'or'
      case 47775:                   // 'namespace' 'return'
      case 48287:                   // 'namespace' 'satisfies'
      case 52383:                   // 'namespace' 'to'
      case 54175:                   // 'namespace' 'union'
      case 56479:                   // 'namespace' 'where'
      case 56991:                   // 'namespace' 'with'
      case 20663:                   // 'processing-instruction' 'and'
      case 21175:                   // 'processing-instruction' 'as'
      case 28599:                   // 'processing-instruction' 'div'
      case 29623:                   // 'processing-instruction' 'else'
      case 30903:                   // 'processing-instruction' 'eq'
      case 31415:                   // 'processing-instruction' 'except'
      case 33207:                   // 'processing-instruction' 'ge'
      case 34231:                   // 'processing-instruction' 'gt'
      case 34487:                   // 'processing-instruction' 'idiv'
      case 36535:                   // 'processing-instruction' 'intersect'
      case 36791:                   // 'processing-instruction' 'into'
      case 37303:                   // 'processing-instruction' 'is'
      case 38583:                   // 'processing-instruction' 'le'
      case 39351:                   // 'processing-instruction' 'lt'
      case 40119:                   // 'processing-instruction' 'mod'
      case 40375:                   // 'processing-instruction' 'modify'
      case 41399:                   // 'processing-instruction' 'ne'
      case 43959:                   // 'processing-instruction' 'or'
      case 47799:                   // 'processing-instruction' 'return'
      case 48311:                   // 'processing-instruction' 'satisfies'
      case 52407:                   // 'processing-instruction' 'to'
      case 54199:                   // 'processing-instruction' 'union'
      case 56503:                   // 'processing-instruction' 'where'
      case 57015:                   // 'processing-instruction' 'with'
        lookahead3W(222);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
        break;
      }
      break;
    case 96:                        // 'comment'
    case 112:                       // 'document'
    case 173:                       // 'ordered'
    case 202:                       // 'text'
    case 212:                       // 'unordered'
      lookahead2W(195);             // END | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 117:                       // 'empty-sequence'
    case 135:                       // 'if'
    case 146:                       // 'item'
    case 201:                       // 'switch'
    case 210:                       // 'typeswitch'
      lookahead2W(185);             // END | S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 94:                        // 'child'
    case 107:                       // 'descendant'
    case 108:                       // 'descendant-or-self'
    case 125:                       // 'following'
    case 126:                       // 'following-sibling'
    case 175:                       // 'parent'
    case 179:                       // 'preceding'
    case 180:                       // 'preceding-sibling'
    case 192:                       // 'self'
      lookahead2W(194);             // END | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 6:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 76:                        // 'after'
    case 80:                        // 'and'
    case 82:                        // 'as'
    case 83:                        // 'ascending'
    case 87:                        // 'before'
    case 90:                        // 'case'
    case 91:                        // 'cast'
    case 92:                        // 'castable'
    case 95:                        // 'collation'
    case 99:                        // 'copy'
    case 101:                       // 'count'
    case 104:                       // 'declare'
    case 105:                       // 'default'
    case 106:                       // 'delete'
    case 109:                       // 'descending'
    case 111:                       // 'div'
    case 113:                       // 'document-node'
    case 115:                       // 'else'
    case 116:                       // 'empty'
    case 119:                       // 'end'
    case 120:                       // 'eq'
    case 121:                       // 'every'
    case 122:                       // 'except'
    case 124:                       // 'first'
    case 127:                       // 'for'
    case 128:                       // 'function'
    case 129:                       // 'ge'
    case 131:                       // 'group'
    case 133:                       // 'gt'
    case 134:                       // 'idiv'
    case 136:                       // 'import'
    case 140:                       // 'insert'
    case 141:                       // 'instance'
    case 142:                       // 'intersect'
    case 143:                       // 'into'
    case 144:                       // 'invoke'
    case 145:                       // 'is'
    case 148:                       // 'last'
    case 150:                       // 'le'
    case 152:                       // 'let'
    case 153:                       // 'lt'
    case 156:                       // 'mod'
    case 157:                       // 'modify'
    case 158:                       // 'module'
    case 160:                       // 'namespace-node'
    case 161:                       // 'ne'
    case 165:                       // 'node'
    case 169:                       // 'only'
    case 171:                       // 'or'
    case 172:                       // 'order'
    case 184:                       // 'rename'
    case 185:                       // 'replace'
    case 186:                       // 'return'
    case 188:                       // 'satisfies'
    case 190:                       // 'schema-attribute'
    case 191:                       // 'schema-element'
    case 195:                       // 'some'
    case 196:                       // 'stable'
    case 197:                       // 'start'
    case 204:                       // 'to'
    case 205:                       // 'transform'
    case 206:                       // 'treat'
    case 207:                       // 'try'
    case 211:                       // 'union'
    case 213:                       // 'update'
    case 215:                       // 'validate'
    case 220:                       // 'where'
    case 222:                       // 'with'
    case 223:                       // 'xquery'
      lookahead2W(191);             // END | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 2:                         // IntegerLiteral
    case 3:                         // DecimalLiteral
    case 4:                         // DoubleLiteral
    case 5:                         // StringLiteral
    case 32:                        // '$'
    case 33:                        // '%'
    case 35:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 60:                        // '<?'
    case 66:                        // '?'
    case 70:                        // '['
    case 74:                        // '``['
    case 81:                        // 'array'
    case 1621:                      // 'attribute' URIQualifiedName
    case 1650:                      // 'element' URIQualifiedName
    case 3925:                      // 'attribute' QName^Token
    case 3954:                      // 'element' QName^Token
    case 4511:                      // 'namespace' NCName^Token
    case 4535:                      // 'processing-instruction' NCName^Token
    case 7686:                      // URIQualifiedName '#'
    case 7695:                      // QName^Token '#'
    case 7756:                      // 'after' '#'
    case 7758:                      // 'ancestor' '#'
    case 7759:                      // 'ancestor-or-self' '#'
    case 7760:                      // 'and' '#'
    case 7762:                      // 'as' '#'
    case 7763:                      // 'ascending' '#'
    case 7765:                      // 'attribute' '#'
    case 7767:                      // 'before' '#'
    case 7770:                      // 'case' '#'
    case 7771:                      // 'cast' '#'
    case 7772:                      // 'castable' '#'
    case 7774:                      // 'child' '#'
    case 7775:                      // 'collation' '#'
    case 7776:                      // 'comment' '#'
    case 7779:                      // 'copy' '#'
    case 7781:                      // 'count' '#'
    case 7784:                      // 'declare' '#'
    case 7785:                      // 'default' '#'
    case 7786:                      // 'delete' '#'
    case 7787:                      // 'descendant' '#'
    case 7788:                      // 'descendant-or-self' '#'
    case 7789:                      // 'descending' '#'
    case 7791:                      // 'div' '#'
    case 7792:                      // 'document' '#'
    case 7793:                      // 'document-node' '#'
    case 7794:                      // 'element' '#'
    case 7795:                      // 'else' '#'
    case 7796:                      // 'empty' '#'
    case 7797:                      // 'empty-sequence' '#'
    case 7799:                      // 'end' '#'
    case 7800:                      // 'eq' '#'
    case 7801:                      // 'every' '#'
    case 7802:                      // 'except' '#'
    case 7804:                      // 'first' '#'
    case 7805:                      // 'following' '#'
    case 7806:                      // 'following-sibling' '#'
    case 7807:                      // 'for' '#'
    case 7808:                      // 'function' '#'
    case 7809:                      // 'ge' '#'
    case 7811:                      // 'group' '#'
    case 7813:                      // 'gt' '#'
    case 7814:                      // 'idiv' '#'
    case 7815:                      // 'if' '#'
    case 7816:                      // 'import' '#'
    case 7820:                      // 'insert' '#'
    case 7821:                      // 'instance' '#'
    case 7822:                      // 'intersect' '#'
    case 7823:                      // 'into' '#'
    case 7824:                      // 'invoke' '#'
    case 7825:                      // 'is' '#'
    case 7826:                      // 'item' '#'
    case 7828:                      // 'last' '#'
    case 7830:                      // 'le' '#'
    case 7832:                      // 'let' '#'
    case 7833:                      // 'lt' '#'
    case 7834:                      // 'map' '#'
    case 7836:                      // 'mod' '#'
    case 7837:                      // 'modify' '#'
    case 7838:                      // 'module' '#'
    case 7839:                      // 'namespace' '#'
    case 7840:                      // 'namespace-node' '#'
    case 7841:                      // 'ne' '#'
    case 7845:                      // 'node' '#'
    case 7849:                      // 'only' '#'
    case 7851:                      // 'or' '#'
    case 7852:                      // 'order' '#'
    case 7853:                      // 'ordered' '#'
    case 7855:                      // 'parent' '#'
    case 7859:                      // 'preceding' '#'
    case 7860:                      // 'preceding-sibling' '#'
    case 7863:                      // 'processing-instruction' '#'
    case 7864:                      // 'rename' '#'
    case 7865:                      // 'replace' '#'
    case 7866:                      // 'return' '#'
    case 7868:                      // 'satisfies' '#'
    case 7870:                      // 'schema-attribute' '#'
    case 7871:                      // 'schema-element' '#'
    case 7872:                      // 'self' '#'
    case 7875:                      // 'some' '#'
    case 7876:                      // 'stable' '#'
    case 7877:                      // 'start' '#'
    case 7881:                      // 'switch' '#'
    case 7882:                      // 'text' '#'
    case 7884:                      // 'to' '#'
    case 7885:                      // 'transform' '#'
    case 7886:                      // 'treat' '#'
    case 7887:                      // 'try' '#'
    case 7890:                      // 'typeswitch' '#'
    case 7891:                      // 'union' '#'
    case 7892:                      // 'unordered' '#'
    case 7893:                      // 'update' '#'
    case 7895:                      // 'validate' '#'
    case 7900:                      // 'where' '#'
    case 7902:                      // 'with' '#'
    case 7903:                      // 'xquery' '#'
    case 8966:                      // URIQualifiedName '('
    case 8975:                      // QName^Token '('
    case 9036:                      // 'after' '('
    case 9038:                      // 'ancestor' '('
    case 9039:                      // 'ancestor-or-self' '('
    case 9040:                      // 'and' '('
    case 9042:                      // 'as' '('
    case 9043:                      // 'ascending' '('
    case 9047:                      // 'before' '('
    case 9050:                      // 'case' '('
    case 9051:                      // 'cast' '('
    case 9052:                      // 'castable' '('
    case 9054:                      // 'child' '('
    case 9055:                      // 'collation' '('
    case 9059:                      // 'copy' '('
    case 9061:                      // 'count' '('
    case 9064:                      // 'declare' '('
    case 9065:                      // 'default' '('
    case 9066:                      // 'delete' '('
    case 9067:                      // 'descendant' '('
    case 9068:                      // 'descendant-or-self' '('
    case 9069:                      // 'descending' '('
    case 9071:                      // 'div' '('
    case 9072:                      // 'document' '('
    case 9075:                      // 'else' '('
    case 9076:                      // 'empty' '('
    case 9079:                      // 'end' '('
    case 9080:                      // 'eq' '('
    case 9081:                      // 'every' '('
    case 9082:                      // 'except' '('
    case 9084:                      // 'first' '('
    case 9085:                      // 'following' '('
    case 9086:                      // 'following-sibling' '('
    case 9087:                      // 'for' '('
    case 9088:                      // 'function' '('
    case 9089:                      // 'ge' '('
    case 9091:                      // 'group' '('
    case 9093:                      // 'gt' '('
    case 9094:                      // 'idiv' '('
    case 9096:                      // 'import' '('
    case 9100:                      // 'insert' '('
    case 9101:                      // 'instance' '('
    case 9102:                      // 'intersect' '('
    case 9103:                      // 'into' '('
    case 9104:                      // 'invoke' '('
    case 9105:                      // 'is' '('
    case 9108:                      // 'last' '('
    case 9110:                      // 'le' '('
    case 9112:                      // 'let' '('
    case 9113:                      // 'lt' '('
    case 9116:                      // 'mod' '('
    case 9117:                      // 'modify' '('
    case 9118:                      // 'module' '('
    case 9119:                      // 'namespace' '('
    case 9121:                      // 'ne' '('
    case 9129:                      // 'only' '('
    case 9131:                      // 'or' '('
    case 9132:                      // 'order' '('
    case 9133:                      // 'ordered' '('
    case 9135:                      // 'parent' '('
    case 9139:                      // 'preceding' '('
    case 9140:                      // 'preceding-sibling' '('
    case 9144:                      // 'rename' '('
    case 9145:                      // 'replace' '('
    case 9146:                      // 'return' '('
    case 9148:                      // 'satisfies' '('
    case 9152:                      // 'self' '('
    case 9155:                      // 'some' '('
    case 9156:                      // 'stable' '('
    case 9157:                      // 'start' '('
    case 9164:                      // 'to' '('
    case 9165:                      // 'transform' '('
    case 9166:                      // 'treat' '('
    case 9167:                      // 'try' '('
    case 9171:                      // 'union' '('
    case 9172:                      // 'unordered' '('
    case 9173:                      // 'update' '('
    case 9175:                      // 'validate' '('
    case 9180:                      // 'where' '('
    case 9182:                      // 'with' '('
    case 9183:                      // 'xquery' '('
    case 19541:                     // 'attribute' 'after'
    case 19570:                     // 'element' 'after'
    case 19615:                     // 'namespace' 'after'
    case 19639:                     // 'processing-instruction' 'after'
    case 20053:                     // 'attribute' 'ancestor'
    case 20082:                     // 'element' 'ancestor'
    case 20309:                     // 'attribute' 'ancestor-or-self'
    case 20338:                     // 'element' 'ancestor-or-self'
    case 21845:                     // 'attribute' 'attribute'
    case 21874:                     // 'element' 'attribute'
    case 22357:                     // 'attribute' 'before'
    case 22386:                     // 'element' 'before'
    case 22431:                     // 'namespace' 'before'
    case 22455:                     // 'processing-instruction' 'before'
    case 24149:                     // 'attribute' 'child'
    case 24178:                     // 'element' 'child'
    case 24661:                     // 'attribute' 'comment'
    case 24690:                     // 'element' 'comment'
    case 25429:                     // 'attribute' 'copy'
    case 25458:                     // 'element' 'copy'
    case 26709:                     // 'attribute' 'declare'
    case 26738:                     // 'element' 'declare'
    case 27221:                     // 'attribute' 'delete'
    case 27250:                     // 'element' 'delete'
    case 27477:                     // 'attribute' 'descendant'
    case 27506:                     // 'element' 'descendant'
    case 27733:                     // 'attribute' 'descendant-or-self'
    case 27762:                     // 'element' 'descendant-or-self'
    case 28757:                     // 'attribute' 'document'
    case 28786:                     // 'element' 'document'
    case 29013:                     // 'attribute' 'document-node'
    case 29042:                     // 'element' 'document-node'
    case 29269:                     // 'attribute' 'element'
    case 29298:                     // 'element' 'element'
    case 30037:                     // 'attribute' 'empty-sequence'
    case 30066:                     // 'element' 'empty-sequence'
    case 31061:                     // 'attribute' 'every'
    case 31090:                     // 'element' 'every'
    case 31829:                     // 'attribute' 'first'
    case 31858:                     // 'element' 'first'
    case 32341:                     // 'attribute' 'following-sibling'
    case 32370:                     // 'element' 'following-sibling'
    case 32853:                     // 'attribute' 'function'
    case 32882:                     // 'element' 'function'
    case 34645:                     // 'attribute' 'if'
    case 34674:                     // 'element' 'if'
    case 34901:                     // 'attribute' 'import'
    case 34930:                     // 'element' 'import'
    case 35925:                     // 'attribute' 'insert'
    case 35954:                     // 'element' 'insert'
    case 36949:                     // 'attribute' 'invoke'
    case 36978:                     // 'element' 'invoke'
    case 37461:                     // 'attribute' 'item'
    case 37490:                     // 'element' 'item'
    case 37973:                     // 'attribute' 'last'
    case 38002:                     // 'element' 'last'
    case 39509:                     // 'attribute' 'map'
    case 39538:                     // 'element' 'map'
    case 39583:                     // 'namespace' 'map'
    case 39607:                     // 'processing-instruction' 'map'
    case 40533:                     // 'attribute' 'module'
    case 40562:                     // 'element' 'module'
    case 40789:                     // 'attribute' 'namespace'
    case 40818:                     // 'element' 'namespace'
    case 41045:                     // 'attribute' 'namespace-node'
    case 41074:                     // 'element' 'namespace-node'
    case 42325:                     // 'attribute' 'node'
    case 42354:                     // 'element' 'node'
    case 44373:                     // 'attribute' 'ordered'
    case 44402:                     // 'element' 'ordered'
    case 44885:                     // 'attribute' 'parent'
    case 44914:                     // 'element' 'parent'
    case 46165:                     // 'attribute' 'preceding-sibling'
    case 46194:                     // 'element' 'preceding-sibling'
    case 46933:                     // 'attribute' 'processing-instruction'
    case 46962:                     // 'element' 'processing-instruction'
    case 47189:                     // 'attribute' 'rename'
    case 47218:                     // 'element' 'rename'
    case 47445:                     // 'attribute' 'replace'
    case 47474:                     // 'element' 'replace'
    case 48725:                     // 'attribute' 'schema-attribute'
    case 48754:                     // 'element' 'schema-attribute'
    case 48981:                     // 'attribute' 'schema-element'
    case 49010:                     // 'element' 'schema-element'
    case 49237:                     // 'attribute' 'self'
    case 49266:                     // 'element' 'self'
    case 50005:                     // 'attribute' 'some'
    case 50034:                     // 'element' 'some'
    case 51541:                     // 'attribute' 'switch'
    case 51570:                     // 'element' 'switch'
    case 51797:                     // 'attribute' 'text'
    case 51826:                     // 'element' 'text'
    case 53077:                     // 'attribute' 'try'
    case 53106:                     // 'element' 'try'
    case 53845:                     // 'attribute' 'typeswitch'
    case 53874:                     // 'element' 'typeswitch'
    case 54357:                     // 'attribute' 'unordered'
    case 54386:                     // 'element' 'unordered'
    case 54613:                     // 'attribute' 'update'
    case 54642:                     // 'element' 'update'
    case 55125:                     // 'attribute' 'validate'
    case 55154:                     // 'element' 'validate'
    case 57173:                     // 'attribute' 'xquery'
    case 57202:                     // 'element' 'xquery'
    case 57685:                     // 'attribute' '{'
    case 57696:                     // 'comment' '{'
    case 57712:                     // 'document' '{'
    case 57714:                     // 'element' '{'
    case 57754:                     // 'map' '{'
    case 57759:                     // 'namespace' '{'
    case 57773:                     // 'ordered' '{'
    case 57783:                     // 'processing-instruction' '{'
    case 57802:                     // 'text' '{'
    case 57812:                     // 'unordered' '{'
    case 14766165:                  // 'attribute' 'and' '{'
    case 14766194:                  // 'element' 'and' '{'
    case 14766239:                  // 'namespace' 'and' '{'
    case 14766263:                  // 'processing-instruction' 'and' '{'
    case 14766677:                  // 'attribute' 'as' '{'
    case 14766706:                  // 'element' 'as' '{'
    case 14766751:                  // 'namespace' 'as' '{'
    case 14766775:                  // 'processing-instruction' 'as' '{'
    case 14766933:                  // 'attribute' 'ascending' '{'
    case 14766962:                  // 'element' 'ascending' '{'
    case 14767007:                  // 'namespace' 'ascending' '{'
    case 14767031:                  // 'processing-instruction' 'ascending' '{'
    case 14768725:                  // 'attribute' 'case' '{'
    case 14768754:                  // 'element' 'case' '{'
    case 14768799:                  // 'namespace' 'case' '{'
    case 14768823:                  // 'processing-instruction' 'case' '{'
    case 14768981:                  // 'attribute' 'cast' '{'
    case 14769010:                  // 'element' 'cast' '{'
    case 14769055:                  // 'namespace' 'cast' '{'
    case 14769079:                  // 'processing-instruction' 'cast' '{'
    case 14769237:                  // 'attribute' 'castable' '{'
    case 14769266:                  // 'element' 'castable' '{'
    case 14769311:                  // 'namespace' 'castable' '{'
    case 14769335:                  // 'processing-instruction' 'castable' '{'
    case 14770005:                  // 'attribute' 'collation' '{'
    case 14770034:                  // 'element' 'collation' '{'
    case 14770079:                  // 'namespace' 'collation' '{'
    case 14770103:                  // 'processing-instruction' 'collation' '{'
    case 14771541:                  // 'attribute' 'count' '{'
    case 14771570:                  // 'element' 'count' '{'
    case 14771615:                  // 'namespace' 'count' '{'
    case 14771639:                  // 'processing-instruction' 'count' '{'
    case 14772565:                  // 'attribute' 'default' '{'
    case 14772594:                  // 'element' 'default' '{'
    case 14772639:                  // 'namespace' 'default' '{'
    case 14772663:                  // 'processing-instruction' 'default' '{'
    case 14773589:                  // 'attribute' 'descending' '{'
    case 14773618:                  // 'element' 'descending' '{'
    case 14773663:                  // 'namespace' 'descending' '{'
    case 14773687:                  // 'processing-instruction' 'descending' '{'
    case 14774101:                  // 'attribute' 'div' '{'
    case 14774130:                  // 'element' 'div' '{'
    case 14774175:                  // 'namespace' 'div' '{'
    case 14774199:                  // 'processing-instruction' 'div' '{'
    case 14775125:                  // 'attribute' 'else' '{'
    case 14775154:                  // 'element' 'else' '{'
    case 14775199:                  // 'namespace' 'else' '{'
    case 14775223:                  // 'processing-instruction' 'else' '{'
    case 14775381:                  // 'attribute' 'empty' '{'
    case 14775410:                  // 'element' 'empty' '{'
    case 14775455:                  // 'namespace' 'empty' '{'
    case 14775479:                  // 'processing-instruction' 'empty' '{'
    case 14776149:                  // 'attribute' 'end' '{'
    case 14776178:                  // 'element' 'end' '{'
    case 14776223:                  // 'namespace' 'end' '{'
    case 14776247:                  // 'processing-instruction' 'end' '{'
    case 14776405:                  // 'attribute' 'eq' '{'
    case 14776434:                  // 'element' 'eq' '{'
    case 14776479:                  // 'namespace' 'eq' '{'
    case 14776503:                  // 'processing-instruction' 'eq' '{'
    case 14776917:                  // 'attribute' 'except' '{'
    case 14776946:                  // 'element' 'except' '{'
    case 14776991:                  // 'namespace' 'except' '{'
    case 14777015:                  // 'processing-instruction' 'except' '{'
    case 14777685:                  // 'attribute' 'following' '{'
    case 14777714:                  // 'element' 'following' '{'
    case 14778197:                  // 'attribute' 'for' '{'
    case 14778226:                  // 'element' 'for' '{'
    case 14778271:                  // 'namespace' 'for' '{'
    case 14778295:                  // 'processing-instruction' 'for' '{'
    case 14778709:                  // 'attribute' 'ge' '{'
    case 14778738:                  // 'element' 'ge' '{'
    case 14778783:                  // 'namespace' 'ge' '{'
    case 14778807:                  // 'processing-instruction' 'ge' '{'
    case 14779221:                  // 'attribute' 'group' '{'
    case 14779250:                  // 'element' 'group' '{'
    case 14779295:                  // 'namespace' 'group' '{'
    case 14779319:                  // 'processing-instruction' 'group' '{'
    case 14779733:                  // 'attribute' 'gt' '{'
    case 14779762:                  // 'element' 'gt' '{'
    case 14779807:                  // 'namespace' 'gt' '{'
    case 14779831:                  // 'processing-instruction' 'gt' '{'
    case 14779989:                  // 'attribute' 'idiv' '{'
    case 14780018:                  // 'element' 'idiv' '{'
    case 14780063:                  // 'namespace' 'idiv' '{'
    case 14780087:                  // 'processing-instruction' 'idiv' '{'
    case 14781781:                  // 'attribute' 'instance' '{'
    case 14781810:                  // 'element' 'instance' '{'
    case 14781855:                  // 'namespace' 'instance' '{'
    case 14781879:                  // 'processing-instruction' 'instance' '{'
    case 14782037:                  // 'attribute' 'intersect' '{'
    case 14782066:                  // 'element' 'intersect' '{'
    case 14782111:                  // 'namespace' 'intersect' '{'
    case 14782135:                  // 'processing-instruction' 'intersect' '{'
    case 14782293:                  // 'attribute' 'into' '{'
    case 14782322:                  // 'element' 'into' '{'
    case 14782367:                  // 'namespace' 'into' '{'
    case 14782391:                  // 'processing-instruction' 'into' '{'
    case 14782805:                  // 'attribute' 'is' '{'
    case 14782834:                  // 'element' 'is' '{'
    case 14782879:                  // 'namespace' 'is' '{'
    case 14782903:                  // 'processing-instruction' 'is' '{'
    case 14784085:                  // 'attribute' 'le' '{'
    case 14784114:                  // 'element' 'le' '{'
    case 14784159:                  // 'namespace' 'le' '{'
    case 14784183:                  // 'processing-instruction' 'le' '{'
    case 14784597:                  // 'attribute' 'let' '{'
    case 14784626:                  // 'element' 'let' '{'
    case 14784671:                  // 'namespace' 'let' '{'
    case 14784695:                  // 'processing-instruction' 'let' '{'
    case 14784853:                  // 'attribute' 'lt' '{'
    case 14784882:                  // 'element' 'lt' '{'
    case 14784927:                  // 'namespace' 'lt' '{'
    case 14784951:                  // 'processing-instruction' 'lt' '{'
    case 14785621:                  // 'attribute' 'mod' '{'
    case 14785650:                  // 'element' 'mod' '{'
    case 14785695:                  // 'namespace' 'mod' '{'
    case 14785719:                  // 'processing-instruction' 'mod' '{'
    case 14785877:                  // 'attribute' 'modify' '{'
    case 14785906:                  // 'element' 'modify' '{'
    case 14785951:                  // 'namespace' 'modify' '{'
    case 14785975:                  // 'processing-instruction' 'modify' '{'
    case 14786901:                  // 'attribute' 'ne' '{'
    case 14786930:                  // 'element' 'ne' '{'
    case 14786975:                  // 'namespace' 'ne' '{'
    case 14786999:                  // 'processing-instruction' 'ne' '{'
    case 14788949:                  // 'attribute' 'only' '{'
    case 14788978:                  // 'element' 'only' '{'
    case 14789023:                  // 'namespace' 'only' '{'
    case 14789047:                  // 'processing-instruction' 'only' '{'
    case 14789461:                  // 'attribute' 'or' '{'
    case 14789490:                  // 'element' 'or' '{'
    case 14789535:                  // 'namespace' 'or' '{'
    case 14789559:                  // 'processing-instruction' 'or' '{'
    case 14789717:                  // 'attribute' 'order' '{'
    case 14789746:                  // 'element' 'order' '{'
    case 14789791:                  // 'namespace' 'order' '{'
    case 14789815:                  // 'processing-instruction' 'order' '{'
    case 14791509:                  // 'attribute' 'preceding' '{'
    case 14791538:                  // 'element' 'preceding' '{'
    case 14793301:                  // 'attribute' 'return' '{'
    case 14793330:                  // 'element' 'return' '{'
    case 14793375:                  // 'namespace' 'return' '{'
    case 14793399:                  // 'processing-instruction' 'return' '{'
    case 14793813:                  // 'attribute' 'satisfies' '{'
    case 14793842:                  // 'element' 'satisfies' '{'
    case 14793887:                  // 'namespace' 'satisfies' '{'
    case 14793911:                  // 'processing-instruction' 'satisfies' '{'
    case 14795861:                  // 'attribute' 'stable' '{'
    case 14795890:                  // 'element' 'stable' '{'
    case 14795935:                  // 'namespace' 'stable' '{'
    case 14795959:                  // 'processing-instruction' 'stable' '{'
    case 14796117:                  // 'attribute' 'start' '{'
    case 14796146:                  // 'element' 'start' '{'
    case 14796191:                  // 'namespace' 'start' '{'
    case 14796215:                  // 'processing-instruction' 'start' '{'
    case 14797909:                  // 'attribute' 'to' '{'
    case 14797938:                  // 'element' 'to' '{'
    case 14797983:                  // 'namespace' 'to' '{'
    case 14798007:                  // 'processing-instruction' 'to' '{'
    case 14798165:                  // 'attribute' 'transform' '{'
    case 14798194:                  // 'element' 'transform' '{'
    case 14798239:                  // 'namespace' 'transform' '{'
    case 14798263:                  // 'processing-instruction' 'transform' '{'
    case 14798421:                  // 'attribute' 'treat' '{'
    case 14798450:                  // 'element' 'treat' '{'
    case 14798495:                  // 'namespace' 'treat' '{'
    case 14798519:                  // 'processing-instruction' 'treat' '{'
    case 14799701:                  // 'attribute' 'union' '{'
    case 14799730:                  // 'element' 'union' '{'
    case 14799775:                  // 'namespace' 'union' '{'
    case 14799799:                  // 'processing-instruction' 'union' '{'
    case 14802005:                  // 'attribute' 'where' '{'
    case 14802034:                  // 'element' 'where' '{'
    case 14802079:                  // 'namespace' 'where' '{'
    case 14802103:                  // 'processing-instruction' 'where' '{'
    case 14802517:                  // 'attribute' 'with' '{'
    case 14802546:                  // 'element' 'with' '{'
    case 14802591:                  // 'namespace' 'with' '{'
    case 14802615:                  // 'processing-instruction' 'with' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 85:                        // 'attribute'
      lookahead2W(227);             // END | URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' |
                                    // '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      switch (lk)
      {
      case 23125:                   // 'attribute' 'case'
        lookahead3W(225);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'json-item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'object' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 24405:                   // 'attribute' 'collation'
        lookahead3W(76);            // StringLiteral | S^WS | '(:' | '{'
        break;
      case 26965:                   // 'attribute' 'default'
        lookahead3W(124);           // S^WS | '$' | '(:' | 'return' | '{'
        break;
      case 29781:                   // 'attribute' 'empty'
        lookahead3W(133);           // S^WS | '(:' | 'greatest' | 'least' | '{'
        break;
      case 32597:                   // 'attribute' 'for'
        lookahead3W(137);           // S^WS | '$' | '(:' | 'sliding' | 'tumbling' | '{'
        break;
      case 36181:                   // 'attribute' 'instance'
        lookahead3W(113);           // S^WS | '(:' | 'of' | '{'
        break;
      case 43349:                   // 'attribute' 'only'
        lookahead3W(106);           // S^WS | '(:' | 'end' | '{'
        break;
      case 50261:                   // 'attribute' 'stable'
        lookahead3W(114);           // S^WS | '(:' | 'order' | '{'
        break;
      case 52565:                   // 'attribute' 'transform'
        lookahead3W(119);           // S^WS | '(:' | 'with' | '{'
        break;
      case 21333:                   // 'attribute' 'ascending'
      case 27989:                   // 'attribute' 'descending'
        lookahead3W(160);           // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where' | '{'
        break;
      case 25941:                   // 'attribute' 'count'
      case 38997:                   // 'attribute' 'let'
        lookahead3W(81);            // S^WS | '$' | '(:' | '{'
        break;
      case 30549:                   // 'attribute' 'end'
      case 50517:                   // 'attribute' 'start'
        lookahead3W(148);           // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when' | '{'
        break;
      case 33621:                   // 'attribute' 'group'
      case 44117:                   // 'attribute' 'order'
        lookahead3W(99);            // S^WS | '(:' | 'by' | '{'
        break;
      case 23381:                   // 'attribute' 'cast'
      case 23637:                   // 'attribute' 'castable'
      case 52821:                   // 'attribute' 'treat'
        lookahead3W(97);            // S^WS | '(:' | 'as' | '{'
        break;
      case 20565:                   // 'attribute' 'and'
      case 21077:                   // 'attribute' 'as'
      case 28501:                   // 'attribute' 'div'
      case 29525:                   // 'attribute' 'else'
      case 30805:                   // 'attribute' 'eq'
      case 31317:                   // 'attribute' 'except'
      case 32085:                   // 'attribute' 'following'
      case 33109:                   // 'attribute' 'ge'
      case 34133:                   // 'attribute' 'gt'
      case 34389:                   // 'attribute' 'idiv'
      case 36437:                   // 'attribute' 'intersect'
      case 36693:                   // 'attribute' 'into'
      case 37205:                   // 'attribute' 'is'
      case 38485:                   // 'attribute' 'le'
      case 39253:                   // 'attribute' 'lt'
      case 40021:                   // 'attribute' 'mod'
      case 40277:                   // 'attribute' 'modify'
      case 41301:                   // 'attribute' 'ne'
      case 43861:                   // 'attribute' 'or'
      case 45909:                   // 'attribute' 'preceding'
      case 47701:                   // 'attribute' 'return'
      case 48213:                   // 'attribute' 'satisfies'
      case 52309:                   // 'attribute' 'to'
      case 54101:                   // 'attribute' 'union'
      case 56405:                   // 'attribute' 'where'
      case 56917:                   // 'attribute' 'with'
        lookahead3W(222);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
        break;
      }
      break;
    case 114:                       // 'element'
      lookahead2W(226);             // END | URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' |
                                    // '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      switch (lk)
      {
      case 23154:                   // 'element' 'case'
        lookahead3W(225);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'json-item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'object' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 24434:                   // 'element' 'collation'
        lookahead3W(76);            // StringLiteral | S^WS | '(:' | '{'
        break;
      case 26994:                   // 'element' 'default'
        lookahead3W(124);           // S^WS | '$' | '(:' | 'return' | '{'
        break;
      case 29810:                   // 'element' 'empty'
        lookahead3W(133);           // S^WS | '(:' | 'greatest' | 'least' | '{'
        break;
      case 32626:                   // 'element' 'for'
        lookahead3W(137);           // S^WS | '$' | '(:' | 'sliding' | 'tumbling' | '{'
        break;
      case 36210:                   // 'element' 'instance'
        lookahead3W(113);           // S^WS | '(:' | 'of' | '{'
        break;
      case 43378:                   // 'element' 'only'
        lookahead3W(106);           // S^WS | '(:' | 'end' | '{'
        break;
      case 50290:                   // 'element' 'stable'
        lookahead3W(114);           // S^WS | '(:' | 'order' | '{'
        break;
      case 52594:                   // 'element' 'transform'
        lookahead3W(119);           // S^WS | '(:' | 'with' | '{'
        break;
      case 21362:                   // 'element' 'ascending'
      case 28018:                   // 'element' 'descending'
        lookahead3W(160);           // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where' | '{'
        break;
      case 25970:                   // 'element' 'count'
      case 39026:                   // 'element' 'let'
        lookahead3W(81);            // S^WS | '$' | '(:' | '{'
        break;
      case 30578:                   // 'element' 'end'
      case 50546:                   // 'element' 'start'
        lookahead3W(148);           // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when' | '{'
        break;
      case 33650:                   // 'element' 'group'
      case 44146:                   // 'element' 'order'
        lookahead3W(99);            // S^WS | '(:' | 'by' | '{'
        break;
      case 23410:                   // 'element' 'cast'
      case 23666:                   // 'element' 'castable'
      case 52850:                   // 'element' 'treat'
        lookahead3W(97);            // S^WS | '(:' | 'as' | '{'
        break;
      case 20594:                   // 'element' 'and'
      case 21106:                   // 'element' 'as'
      case 28530:                   // 'element' 'div'
      case 29554:                   // 'element' 'else'
      case 30834:                   // 'element' 'eq'
      case 31346:                   // 'element' 'except'
      case 32114:                   // 'element' 'following'
      case 33138:                   // 'element' 'ge'
      case 34162:                   // 'element' 'gt'
      case 34418:                   // 'element' 'idiv'
      case 36466:                   // 'element' 'intersect'
      case 36722:                   // 'element' 'into'
      case 37234:                   // 'element' 'is'
      case 38514:                   // 'element' 'le'
      case 39282:                   // 'element' 'lt'
      case 40050:                   // 'element' 'mod'
      case 40306:                   // 'element' 'modify'
      case 41330:                   // 'element' 'ne'
      case 43890:                   // 'element' 'or'
      case 45938:                   // 'element' 'preceding'
      case 47730:                   // 'element' 'return'
      case 48242:                   // 'element' 'satisfies'
      case 52338:                   // 'element' 'to'
      case 54130:                   // 'element' 'union'
      case 56434:                   // 'element' 'where'
      case 56946:                   // 'element' 'with'
        lookahead3W(222);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
        break;
      }
      break;
    case 154:                       // 'map'
      lookahead2W(192);             // END | S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 159:                       // 'namespace'
    case 183:                       // 'processing-instruction'
      lookahead2W(199);             // END | NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'preceding' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      switch (lk)
      {
      case 23199:                   // 'namespace' 'case'
      case 23223:                   // 'processing-instruction' 'case'
        lookahead3W(225);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'json-item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'object' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 24479:                   // 'namespace' 'collation'
      case 24503:                   // 'processing-instruction' 'collation'
        lookahead3W(76);            // StringLiteral | S^WS | '(:' | '{'
        break;
      case 27039:                   // 'namespace' 'default'
      case 27063:                   // 'processing-instruction' 'default'
        lookahead3W(124);           // S^WS | '$' | '(:' | 'return' | '{'
        break;
      case 29855:                   // 'namespace' 'empty'
      case 29879:                   // 'processing-instruction' 'empty'
        lookahead3W(133);           // S^WS | '(:' | 'greatest' | 'least' | '{'
        break;
      case 32671:                   // 'namespace' 'for'
      case 32695:                   // 'processing-instruction' 'for'
        lookahead3W(137);           // S^WS | '$' | '(:' | 'sliding' | 'tumbling' | '{'
        break;
      case 36255:                   // 'namespace' 'instance'
      case 36279:                   // 'processing-instruction' 'instance'
        lookahead3W(113);           // S^WS | '(:' | 'of' | '{'
        break;
      case 43423:                   // 'namespace' 'only'
      case 43447:                   // 'processing-instruction' 'only'
        lookahead3W(106);           // S^WS | '(:' | 'end' | '{'
        break;
      case 50335:                   // 'namespace' 'stable'
      case 50359:                   // 'processing-instruction' 'stable'
        lookahead3W(114);           // S^WS | '(:' | 'order' | '{'
        break;
      case 52639:                   // 'namespace' 'transform'
      case 52663:                   // 'processing-instruction' 'transform'
        lookahead3W(119);           // S^WS | '(:' | 'with' | '{'
        break;
      case 21407:                   // 'namespace' 'ascending'
      case 28063:                   // 'namespace' 'descending'
      case 21431:                   // 'processing-instruction' 'ascending'
      case 28087:                   // 'processing-instruction' 'descending'
        lookahead3W(160);           // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where' | '{'
        break;
      case 26015:                   // 'namespace' 'count'
      case 39071:                   // 'namespace' 'let'
      case 26039:                   // 'processing-instruction' 'count'
      case 39095:                   // 'processing-instruction' 'let'
        lookahead3W(81);            // S^WS | '$' | '(:' | '{'
        break;
      case 30623:                   // 'namespace' 'end'
      case 50591:                   // 'namespace' 'start'
      case 30647:                   // 'processing-instruction' 'end'
      case 50615:                   // 'processing-instruction' 'start'
        lookahead3W(148);           // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when' | '{'
        break;
      case 33695:                   // 'namespace' 'group'
      case 44191:                   // 'namespace' 'order'
      case 33719:                   // 'processing-instruction' 'group'
      case 44215:                   // 'processing-instruction' 'order'
        lookahead3W(99);            // S^WS | '(:' | 'by' | '{'
        break;
      case 23455:                   // 'namespace' 'cast'
      case 23711:                   // 'namespace' 'castable'
      case 52895:                   // 'namespace' 'treat'
      case 23479:                   // 'processing-instruction' 'cast'
      case 23735:                   // 'processing-instruction' 'castable'
      case 52919:                   // 'processing-instruction' 'treat'
        lookahead3W(97);            // S^WS | '(:' | 'as' | '{'
        break;
      case 20639:                   // 'namespace' 'and'
      case 21151:                   // 'namespace' 'as'
      case 28575:                   // 'namespace' 'div'
      case 29599:                   // 'namespace' 'else'
      case 30879:                   // 'namespace' 'eq'
      case 31391:                   // 'namespace' 'except'
      case 33183:                   // 'namespace' 'ge'
      case 34207:                   // 'namespace' 'gt'
      case 34463:                   // 'namespace' 'idiv'
      case 36511:                   // 'namespace' 'intersect'
      case 36767:                   // 'namespace' 'into'
      case 37279:                   // 'namespace' 'is'
      case 38559:                   // 'namespace' 'le'
      case 39327:                   // 'namespace' 'lt'
      case 40095:                   // 'namespace' 'mod'
      case 40351:                   // 'namespace' 'modify'
      case 41375:                   // 'namespace' 'ne'
      case 43935:                   // 'namespace' 'or'
      case 47775:                   // 'namespace' 'return'
      case 48287:                   // 'namespace' 'satisfies'
      case 52383:                   // 'namespace' 'to'
      case 54175:                   // 'namespace' 'union'
      case 56479:                   // 'namespace' 'where'
      case 56991:                   // 'namespace' 'with'
      case 20663:                   // 'processing-instruction' 'and'
      case 21175:                   // 'processing-instruction' 'as'
      case 28599:                   // 'processing-instruction' 'div'
      case 29623:                   // 'processing-instruction' 'else'
      case 30903:                   // 'processing-instruction' 'eq'
      case 31415:                   // 'processing-instruction' 'except'
      case 33207:                   // 'processing-instruction' 'ge'
      case 34231:                   // 'processing-instruction' 'gt'
      case 34487:                   // 'processing-instruction' 'idiv'
      case 36535:                   // 'processing-instruction' 'intersect'
      case 36791:                   // 'processing-instruction' 'into'
      case 37303:                   // 'processing-instruction' 'is'
      case 38583:                   // 'processing-instruction' 'le'
      case 39351:                   // 'processing-instruction' 'lt'
      case 40119:                   // 'processing-instruction' 'mod'
      case 40375:                   // 'processing-instruction' 'modify'
      case 41399:                   // 'processing-instruction' 'ne'
      case 43959:                   // 'processing-instruction' 'or'
      case 47799:                   // 'processing-instruction' 'return'
      case 48311:                   // 'processing-instruction' 'satisfies'
      case 52407:                   // 'processing-instruction' 'to'
      case 54199:                   // 'processing-instruction' 'union'
      case 56503:                   // 'processing-instruction' 'where'
      case 57015:                   // 'processing-instruction' 'with'
        lookahead3W(222);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
        break;
      }
      break;
    case 96:                        // 'comment'
    case 112:                       // 'document'
    case 173:                       // 'ordered'
    case 202:                       // 'text'
    case 212:                       // 'unordered'
      lookahead2W(195);             // END | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 117:                       // 'empty-sequence'
    case 135:                       // 'if'
    case 146:                       // 'item'
    case 201:                       // 'switch'
    case 210:                       // 'typeswitch'
      lookahead2W(185);             // END | S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 94:                        // 'child'
    case 107:                       // 'descendant'
    case 108:                       // 'descendant-or-self'
    case 125:                       // 'following'
    case 126:                       // 'following-sibling'
    case 175:                       // 'parent'
    case 179:                       // 'preceding'
    case 180:                       // 'preceding-sibling'
    case 192:                       // 'self'
      lookahead2W(194);             // END | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 6:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 76:                        // 'after'
    case 80:                        // 'and'
    case 82:                        // 'as'
    case 83:                        // 'ascending'
    case 87:                        // 'before'
    case 90:                        // 'case'
    case 91:                        // 'cast'
    case 92:                        // 'castable'
    case 95:                        // 'collation'
    case 99:                        // 'copy'
    case 101:                       // 'count'
    case 104:                       // 'declare'
    case 105:                       // 'default'
    case 106:                       // 'delete'
    case 109:                       // 'descending'
    case 111:                       // 'div'
    case 113:                       // 'document-node'
    case 115:                       // 'else'
    case 116:                       // 'empty'
    case 119:                       // 'end'
    case 120:                       // 'eq'
    case 121:                       // 'every'
    case 122:                       // 'except'
    case 124:                       // 'first'
    case 127:                       // 'for'
    case 128:                       // 'function'
    case 129:                       // 'ge'
    case 131:                       // 'group'
    case 133:                       // 'gt'
    case 134:                       // 'idiv'
    case 136:                       // 'import'
    case 140:                       // 'insert'
    case 141:                       // 'instance'
    case 142:                       // 'intersect'
    case 143:                       // 'into'
    case 144:                       // 'invoke'
    case 145:                       // 'is'
    case 148:                       // 'last'
    case 150:                       // 'le'
    case 152:                       // 'let'
    case 153:                       // 'lt'
    case 156:                       // 'mod'
    case 157:                       // 'modify'
    case 158:                       // 'module'
    case 160:                       // 'namespace-node'
    case 161:                       // 'ne'
    case 165:                       // 'node'
    case 169:                       // 'only'
    case 171:                       // 'or'
    case 172:                       // 'order'
    case 184:                       // 'rename'
    case 185:                       // 'replace'
    case 186:                       // 'return'
    case 188:                       // 'satisfies'
    case 190:                       // 'schema-attribute'
    case 191:                       // 'schema-element'
    case 195:                       // 'some'
    case 196:                       // 'stable'
    case 197:                       // 'start'
    case 204:                       // 'to'
    case 205:                       // 'transform'
    case 206:                       // 'treat'
    case 207:                       // 'try'
    case 211:                       // 'union'
    case 213:                       // 'update'
    case 215:                       // 'validate'
    case 220:                       // 'where'
    case 222:                       // 'with'
    case 223:                       // 'xquery'
      lookahead2W(191);             // END | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 2:                         // IntegerLiteral
    case 3:                         // DecimalLiteral
    case 4:                         // DoubleLiteral
    case 5:                         // StringLiteral
    case 32:                        // '$'
    case 33:                        // '%'
    case 35:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 60:                        // '<?'
    case 66:                        // '?'
    case 70:                        // '['
    case 74:                        // '``['
    case 81:                        // 'array'
    case 1621:                      // 'attribute' URIQualifiedName
    case 1650:                      // 'element' URIQualifiedName
    case 3925:                      // 'attribute' QName^Token
    case 3954:                      // 'element' QName^Token
    case 4511:                      // 'namespace' NCName^Token
    case 4535:                      // 'processing-instruction' NCName^Token
    case 7686:                      // URIQualifiedName '#'
    case 7695:                      // QName^Token '#'
    case 7756:                      // 'after' '#'
    case 7758:                      // 'ancestor' '#'
    case 7759:                      // 'ancestor-or-self' '#'
    case 7760:                      // 'and' '#'
    case 7762:                      // 'as' '#'
    case 7763:                      // 'ascending' '#'
    case 7765:                      // 'attribute' '#'
    case 7767:                      // 'before' '#'
    case 7770:                      // 'case' '#'
    case 7771:                      // 'cast' '#'
    case 7772:                      // 'castable' '#'
    case 7774:                      // 'child' '#'
    case 7775:                      // 'collation' '#'
    case 7776:                      // 'comment' '#'
    case 7779:                      // 'copy' '#'
    case 7781:                      // 'count' '#'
    case 7784:                      // 'declare' '#'
    case 7785:                      // 'default' '#'
    case 7786:                      // 'delete' '#'
    case 7787:                      // 'descendant' '#'
    case 7788:                      // 'descendant-or-self' '#'
    case 7789:                      // 'descending' '#'
    case 7791:                      // 'div' '#'
    case 7792:                      // 'document' '#'
    case 7793:                      // 'document-node' '#'
    case 7794:                      // 'element' '#'
    case 7795:                      // 'else' '#'
    case 7796:                      // 'empty' '#'
    case 7797:                      // 'empty-sequence' '#'
    case 7799:                      // 'end' '#'
    case 7800:                      // 'eq' '#'
    case 7801:                      // 'every' '#'
    case 7802:                      // 'except' '#'
    case 7804:                      // 'first' '#'
    case 7805:                      // 'following' '#'
    case 7806:                      // 'following-sibling' '#'
    case 7807:                      // 'for' '#'
    case 7808:                      // 'function' '#'
    case 7809:                      // 'ge' '#'
    case 7811:                      // 'group' '#'
    case 7813:                      // 'gt' '#'
    case 7814:                      // 'idiv' '#'
    case 7815:                      // 'if' '#'
    case 7816:                      // 'import' '#'
    case 7820:                      // 'insert' '#'
    case 7821:                      // 'instance' '#'
    case 7822:                      // 'intersect' '#'
    case 7823:                      // 'into' '#'
    case 7824:                      // 'invoke' '#'
    case 7825:                      // 'is' '#'
    case 7826:                      // 'item' '#'
    case 7828:                      // 'last' '#'
    case 7830:                      // 'le' '#'
    case 7832:                      // 'let' '#'
    case 7833:                      // 'lt' '#'
    case 7834:                      // 'map' '#'
    case 7836:                      // 'mod' '#'
    case 7837:                      // 'modify' '#'
    case 7838:                      // 'module' '#'
    case 7839:                      // 'namespace' '#'
    case 7840:                      // 'namespace-node' '#'
    case 7841:                      // 'ne' '#'
    case 7845:                      // 'node' '#'
    case 7849:                      // 'only' '#'
    case 7851:                      // 'or' '#'
    case 7852:                      // 'order' '#'
    case 7853:                      // 'ordered' '#'
    case 7855:                      // 'parent' '#'
    case 7859:                      // 'preceding' '#'
    case 7860:                      // 'preceding-sibling' '#'
    case 7863:                      // 'processing-instruction' '#'
    case 7864:                      // 'rename' '#'
    case 7865:                      // 'replace' '#'
    case 7866:                      // 'return' '#'
    case 7868:                      // 'satisfies' '#'
    case 7870:                      // 'schema-attribute' '#'
    case 7871:                      // 'schema-element' '#'
    case 7872:                      // 'self' '#'
    case 7875:                      // 'some' '#'
    case 7876:                      // 'stable' '#'
    case 7877:                      // 'start' '#'
    case 7881:                      // 'switch' '#'
    case 7882:                      // 'text' '#'
    case 7884:                      // 'to' '#'
    case 7885:                      // 'transform' '#'
    case 7886:                      // 'treat' '#'
    case 7887:                      // 'try' '#'
    case 7890:                      // 'typeswitch' '#'
    case 7891:                      // 'union' '#'
    case 7892:                      // 'unordered' '#'
    case 7893:                      // 'update' '#'
    case 7895:                      // 'validate' '#'
    case 7900:                      // 'where' '#'
    case 7902:                      // 'with' '#'
    case 7903:                      // 'xquery' '#'
    case 8966:                      // URIQualifiedName '('
    case 8975:                      // QName^Token '('
    case 9036:                      // 'after' '('
    case 9038:                      // 'ancestor' '('
    case 9039:                      // 'ancestor-or-self' '('
    case 9040:                      // 'and' '('
    case 9042:                      // 'as' '('
    case 9043:                      // 'ascending' '('
    case 9047:                      // 'before' '('
    case 9050:                      // 'case' '('
    case 9051:                      // 'cast' '('
    case 9052:                      // 'castable' '('
    case 9054:                      // 'child' '('
    case 9055:                      // 'collation' '('
    case 9059:                      // 'copy' '('
    case 9061:                      // 'count' '('
    case 9064:                      // 'declare' '('
    case 9065:                      // 'default' '('
    case 9066:                      // 'delete' '('
    case 9067:                      // 'descendant' '('
    case 9068:                      // 'descendant-or-self' '('
    case 9069:                      // 'descending' '('
    case 9071:                      // 'div' '('
    case 9072:                      // 'document' '('
    case 9075:                      // 'else' '('
    case 9076:                      // 'empty' '('
    case 9079:                      // 'end' '('
    case 9080:                      // 'eq' '('
    case 9081:                      // 'every' '('
    case 9082:                      // 'except' '('
    case 9084:                      // 'first' '('
    case 9085:                      // 'following' '('
    case 9086:                      // 'following-sibling' '('
    case 9087:                      // 'for' '('
    case 9088:                      // 'function' '('
    case 9089:                      // 'ge' '('
    case 9091:                      // 'group' '('
    case 9093:                      // 'gt' '('
    case 9094:                      // 'idiv' '('
    case 9096:                      // 'import' '('
    case 9100:                      // 'insert' '('
    case 9101:                      // 'instance' '('
    case 9102:                      // 'intersect' '('
    case 9103:                      // 'into' '('
    case 9104:                      // 'invoke' '('
    case 9105:                      // 'is' '('
    case 9108:                      // 'last' '('
    case 9110:                      // 'le' '('
    case 9112:                      // 'let' '('
    case 9113:                      // 'lt' '('
    case 9116:                      // 'mod' '('
    case 9117:                      // 'modify' '('
    case 9118:                      // 'module' '('
    case 9119:                      // 'namespace' '('
    case 9121:                      // 'ne' '('
    case 9129:                      // 'only' '('
    case 9131:                      // 'or' '('
    case 9132:                      // 'order' '('
    case 9133:                      // 'ordered' '('
    case 9135:                      // 'parent' '('
    case 9139:                      // 'preceding' '('
    case 9140:                      // 'preceding-sibling' '('
    case 9144:                      // 'rename' '('
    case 9145:                      // 'replace' '('
    case 9146:                      // 'return' '('
    case 9148:                      // 'satisfies' '('
    case 9152:                      // 'self' '('
    case 9155:                      // 'some' '('
    case 9156:                      // 'stable' '('
    case 9157:                      // 'start' '('
    case 9164:                      // 'to' '('
    case 9165:                      // 'transform' '('
    case 9166:                      // 'treat' '('
    case 9167:                      // 'try' '('
    case 9171:                      // 'union' '('
    case 9172:                      // 'unordered' '('
    case 9173:                      // 'update' '('
    case 9175:                      // 'validate' '('
    case 9180:                      // 'where' '('
    case 9182:                      // 'with' '('
    case 9183:                      // 'xquery' '('
    case 19541:                     // 'attribute' 'after'
    case 19570:                     // 'element' 'after'
    case 19615:                     // 'namespace' 'after'
    case 19639:                     // 'processing-instruction' 'after'
    case 20053:                     // 'attribute' 'ancestor'
    case 20082:                     // 'element' 'ancestor'
    case 20309:                     // 'attribute' 'ancestor-or-self'
    case 20338:                     // 'element' 'ancestor-or-self'
    case 21845:                     // 'attribute' 'attribute'
    case 21874:                     // 'element' 'attribute'
    case 22357:                     // 'attribute' 'before'
    case 22386:                     // 'element' 'before'
    case 22431:                     // 'namespace' 'before'
    case 22455:                     // 'processing-instruction' 'before'
    case 24149:                     // 'attribute' 'child'
    case 24178:                     // 'element' 'child'
    case 24661:                     // 'attribute' 'comment'
    case 24690:                     // 'element' 'comment'
    case 25429:                     // 'attribute' 'copy'
    case 25458:                     // 'element' 'copy'
    case 26709:                     // 'attribute' 'declare'
    case 26738:                     // 'element' 'declare'
    case 27221:                     // 'attribute' 'delete'
    case 27250:                     // 'element' 'delete'
    case 27477:                     // 'attribute' 'descendant'
    case 27506:                     // 'element' 'descendant'
    case 27733:                     // 'attribute' 'descendant-or-self'
    case 27762:                     // 'element' 'descendant-or-self'
    case 28757:                     // 'attribute' 'document'
    case 28786:                     // 'element' 'document'
    case 29013:                     // 'attribute' 'document-node'
    case 29042:                     // 'element' 'document-node'
    case 29269:                     // 'attribute' 'element'
    case 29298:                     // 'element' 'element'
    case 30037:                     // 'attribute' 'empty-sequence'
    case 30066:                     // 'element' 'empty-sequence'
    case 31061:                     // 'attribute' 'every'
    case 31090:                     // 'element' 'every'
    case 31829:                     // 'attribute' 'first'
    case 31858:                     // 'element' 'first'
    case 32341:                     // 'attribute' 'following-sibling'
    case 32370:                     // 'element' 'following-sibling'
    case 32853:                     // 'attribute' 'function'
    case 32882:                     // 'element' 'function'
    case 34645:                     // 'attribute' 'if'
    case 34674:                     // 'element' 'if'
    case 34901:                     // 'attribute' 'import'
    case 34930:                     // 'element' 'import'
    case 35925:                     // 'attribute' 'insert'
    case 35954:                     // 'element' 'insert'
    case 36949:                     // 'attribute' 'invoke'
    case 36978:                     // 'element' 'invoke'
    case 37461:                     // 'attribute' 'item'
    case 37490:                     // 'element' 'item'
    case 37973:                     // 'attribute' 'last'
    case 38002:                     // 'element' 'last'
    case 39509:                     // 'attribute' 'map'
    case 39538:                     // 'element' 'map'
    case 39583:                     // 'namespace' 'map'
    case 39607:                     // 'processing-instruction' 'map'
    case 40533:                     // 'attribute' 'module'
    case 40562:                     // 'element' 'module'
    case 40789:                     // 'attribute' 'namespace'
    case 40818:                     // 'element' 'namespace'
    case 41045:                     // 'attribute' 'namespace-node'
    case 41074:                     // 'element' 'namespace-node'
    case 42325:                     // 'attribute' 'node'
    case 42354:                     // 'element' 'node'
    case 44373:                     // 'attribute' 'ordered'
    case 44402:                     // 'element' 'ordered'
    case 44885:                     // 'attribute' 'parent'
    case 44914:                     // 'element' 'parent'
    case 46165:                     // 'attribute' 'preceding-sibling'
    case 46194:                     // 'element' 'preceding-sibling'
    case 46933:                     // 'attribute' 'processing-instruction'
    case 46962:                     // 'element' 'processing-instruction'
    case 47189:                     // 'attribute' 'rename'
    case 47218:                     // 'element' 'rename'
    case 47445:                     // 'attribute' 'replace'
    case 47474:                     // 'element' 'replace'
    case 48725:                     // 'attribute' 'schema-attribute'
    case 48754:                     // 'element' 'schema-attribute'
    case 48981:                     // 'attribute' 'schema-element'
    case 49010:                     // 'element' 'schema-element'
    case 49237:                     // 'attribute' 'self'
    case 49266:                     // 'element' 'self'
    case 50005:                     // 'attribute' 'some'
    case 50034:                     // 'element' 'some'
    case 51541:                     // 'attribute' 'switch'
    case 51570:                     // 'element' 'switch'
    case 51797:                     // 'attribute' 'text'
    case 51826:                     // 'element' 'text'
    case 53077:                     // 'attribute' 'try'
    case 53106:                     // 'element' 'try'
    case 53845:                     // 'attribute' 'typeswitch'
    case 53874:                     // 'element' 'typeswitch'
    case 54357:                     // 'attribute' 'unordered'
    case 54386:                     // 'element' 'unordered'
    case 54613:                     // 'attribute' 'update'
    case 54642:                     // 'element' 'update'
    case 55125:                     // 'attribute' 'validate'
    case 55154:                     // 'element' 'validate'
    case 57173:                     // 'attribute' 'xquery'
    case 57202:                     // 'element' 'xquery'
    case 57685:                     // 'attribute' '{'
    case 57696:                     // 'comment' '{'
    case 57712:                     // 'document' '{'
    case 57714:                     // 'element' '{'
    case 57754:                     // 'map' '{'
    case 57759:                     // 'namespace' '{'
    case 57773:                     // 'ordered' '{'
    case 57783:                     // 'processing-instruction' '{'
    case 57802:                     // 'text' '{'
    case 57812:                     // 'unordered' '{'
    case 14766165:                  // 'attribute' 'and' '{'
    case 14766194:                  // 'element' 'and' '{'
    case 14766239:                  // 'namespace' 'and' '{'
    case 14766263:                  // 'processing-instruction' 'and' '{'
    case 14766677:                  // 'attribute' 'as' '{'
    case 14766706:                  // 'element' 'as' '{'
    case 14766751:                  // 'namespace' 'as' '{'
    case 14766775:                  // 'processing-instruction' 'as' '{'
    case 14766933:                  // 'attribute' 'ascending' '{'
    case 14766962:                  // 'element' 'ascending' '{'
    case 14767007:                  // 'namespace' 'ascending' '{'
    case 14767031:                  // 'processing-instruction' 'ascending' '{'
    case 14768725:                  // 'attribute' 'case' '{'
    case 14768754:                  // 'element' 'case' '{'
    case 14768799:                  // 'namespace' 'case' '{'
    case 14768823:                  // 'processing-instruction' 'case' '{'
    case 14768981:                  // 'attribute' 'cast' '{'
    case 14769010:                  // 'element' 'cast' '{'
    case 14769055:                  // 'namespace' 'cast' '{'
    case 14769079:                  // 'processing-instruction' 'cast' '{'
    case 14769237:                  // 'attribute' 'castable' '{'
    case 14769266:                  // 'element' 'castable' '{'
    case 14769311:                  // 'namespace' 'castable' '{'
    case 14769335:                  // 'processing-instruction' 'castable' '{'
    case 14770005:                  // 'attribute' 'collation' '{'
    case 14770034:                  // 'element' 'collation' '{'
    case 14770079:                  // 'namespace' 'collation' '{'
    case 14770103:                  // 'processing-instruction' 'collation' '{'
    case 14771541:                  // 'attribute' 'count' '{'
    case 14771570:                  // 'element' 'count' '{'
    case 14771615:                  // 'namespace' 'count' '{'
    case 14771639:                  // 'processing-instruction' 'count' '{'
    case 14772565:                  // 'attribute' 'default' '{'
    case 14772594:                  // 'element' 'default' '{'
    case 14772639:                  // 'namespace' 'default' '{'
    case 14772663:                  // 'processing-instruction' 'default' '{'
    case 14773589:                  // 'attribute' 'descending' '{'
    case 14773618:                  // 'element' 'descending' '{'
    case 14773663:                  // 'namespace' 'descending' '{'
    case 14773687:                  // 'processing-instruction' 'descending' '{'
    case 14774101:                  // 'attribute' 'div' '{'
    case 14774130:                  // 'element' 'div' '{'
    case 14774175:                  // 'namespace' 'div' '{'
    case 14774199:                  // 'processing-instruction' 'div' '{'
    case 14775125:                  // 'attribute' 'else' '{'
    case 14775154:                  // 'element' 'else' '{'
    case 14775199:                  // 'namespace' 'else' '{'
    case 14775223:                  // 'processing-instruction' 'else' '{'
    case 14775381:                  // 'attribute' 'empty' '{'
    case 14775410:                  // 'element' 'empty' '{'
    case 14775455:                  // 'namespace' 'empty' '{'
    case 14775479:                  // 'processing-instruction' 'empty' '{'
    case 14776149:                  // 'attribute' 'end' '{'
    case 14776178:                  // 'element' 'end' '{'
    case 14776223:                  // 'namespace' 'end' '{'
    case 14776247:                  // 'processing-instruction' 'end' '{'
    case 14776405:                  // 'attribute' 'eq' '{'
    case 14776434:                  // 'element' 'eq' '{'
    case 14776479:                  // 'namespace' 'eq' '{'
    case 14776503:                  // 'processing-instruction' 'eq' '{'
    case 14776917:                  // 'attribute' 'except' '{'
    case 14776946:                  // 'element' 'except' '{'
    case 14776991:                  // 'namespace' 'except' '{'
    case 14777015:                  // 'processing-instruction' 'except' '{'
    case 14777685:                  // 'attribute' 'following' '{'
    case 14777714:                  // 'element' 'following' '{'
    case 14778197:                  // 'attribute' 'for' '{'
    case 14778226:                  // 'element' 'for' '{'
    case 14778271:                  // 'namespace' 'for' '{'
    case 14778295:                  // 'processing-instruction' 'for' '{'
    case 14778709:                  // 'attribute' 'ge' '{'
    case 14778738:                  // 'element' 'ge' '{'
    case 14778783:                  // 'namespace' 'ge' '{'
    case 14778807:                  // 'processing-instruction' 'ge' '{'
    case 14779221:                  // 'attribute' 'group' '{'
    case 14779250:                  // 'element' 'group' '{'
    case 14779295:                  // 'namespace' 'group' '{'
    case 14779319:                  // 'processing-instruction' 'group' '{'
    case 14779733:                  // 'attribute' 'gt' '{'
    case 14779762:                  // 'element' 'gt' '{'
    case 14779807:                  // 'namespace' 'gt' '{'
    case 14779831:                  // 'processing-instruction' 'gt' '{'
    case 14779989:                  // 'attribute' 'idiv' '{'
    case 14780018:                  // 'element' 'idiv' '{'
    case 14780063:                  // 'namespace' 'idiv' '{'
    case 14780087:                  // 'processing-instruction' 'idiv' '{'
    case 14781781:                  // 'attribute' 'instance' '{'
    case 14781810:                  // 'element' 'instance' '{'
    case 14781855:                  // 'namespace' 'instance' '{'
    case 14781879:                  // 'processing-instruction' 'instance' '{'
    case 14782037:                  // 'attribute' 'intersect' '{'
    case 14782066:                  // 'element' 'intersect' '{'
    case 14782111:                  // 'namespace' 'intersect' '{'
    case 14782135:                  // 'processing-instruction' 'intersect' '{'
    case 14782293:                  // 'attribute' 'into' '{'
    case 14782322:                  // 'element' 'into' '{'
    case 14782367:                  // 'namespace' 'into' '{'
    case 14782391:                  // 'processing-instruction' 'into' '{'
    case 14782805:                  // 'attribute' 'is' '{'
    case 14782834:                  // 'element' 'is' '{'
    case 14782879:                  // 'namespace' 'is' '{'
    case 14782903:                  // 'processing-instruction' 'is' '{'
    case 14784085:                  // 'attribute' 'le' '{'
    case 14784114:                  // 'element' 'le' '{'
    case 14784159:                  // 'namespace' 'le' '{'
    case 14784183:                  // 'processing-instruction' 'le' '{'
    case 14784597:                  // 'attribute' 'let' '{'
    case 14784626:                  // 'element' 'let' '{'
    case 14784671:                  // 'namespace' 'let' '{'
    case 14784695:                  // 'processing-instruction' 'let' '{'
    case 14784853:                  // 'attribute' 'lt' '{'
    case 14784882:                  // 'element' 'lt' '{'
    case 14784927:                  // 'namespace' 'lt' '{'
    case 14784951:                  // 'processing-instruction' 'lt' '{'
    case 14785621:                  // 'attribute' 'mod' '{'
    case 14785650:                  // 'element' 'mod' '{'
    case 14785695:                  // 'namespace' 'mod' '{'
    case 14785719:                  // 'processing-instruction' 'mod' '{'
    case 14785877:                  // 'attribute' 'modify' '{'
    case 14785906:                  // 'element' 'modify' '{'
    case 14785951:                  // 'namespace' 'modify' '{'
    case 14785975:                  // 'processing-instruction' 'modify' '{'
    case 14786901:                  // 'attribute' 'ne' '{'
    case 14786930:                  // 'element' 'ne' '{'
    case 14786975:                  // 'namespace' 'ne' '{'
    case 14786999:                  // 'processing-instruction' 'ne' '{'
    case 14788949:                  // 'attribute' 'only' '{'
    case 14788978:                  // 'element' 'only' '{'
    case 14789023:                  // 'namespace' 'only' '{'
    case 14789047:                  // 'processing-instruction' 'only' '{'
    case 14789461:                  // 'attribute' 'or' '{'
    case 14789490:                  // 'element' 'or' '{'
    case 14789535:                  // 'namespace' 'or' '{'
    case 14789559:                  // 'processing-instruction' 'or' '{'
    case 14789717:                  // 'attribute' 'order' '{'
    case 14789746:                  // 'element' 'order' '{'
    case 14789791:                  // 'namespace' 'order' '{'
    case 14789815:                  // 'processing-instruction' 'order' '{'
    case 14791509:                  // 'attribute' 'preceding' '{'
    case 14791538:                  // 'element' 'preceding' '{'
    case 14793301:                  // 'attribute' 'return' '{'
    case 14793330:                  // 'element' 'return' '{'
    case 14793375:                  // 'namespace' 'return' '{'
    case 14793399:                  // 'processing-instruction' 'return' '{'
    case 14793813:                  // 'attribute' 'satisfies' '{'
    case 14793842:                  // 'element' 'satisfies' '{'
    case 14793887:                  // 'namespace' 'satisfies' '{'
    case 14793911:                  // 'processing-instruction' 'satisfies' '{'
    case 14795861:                  // 'attribute' 'stable' '{'
    case 14795890:                  // 'element' 'stable' '{'
    case 14795935:                  // 'namespace' 'stable' '{'
    case 14795959:                  // 'processing-instruction' 'stable' '{'
    case 14796117:                  // 'attribute' 'start' '{'
    case 14796146:                  // 'element' 'start' '{'
    case 14796191:                  // 'namespace' 'start' '{'
    case 14796215:                  // 'processing-instruction' 'start' '{'
    case 14797909:                  // 'attribute' 'to' '{'
    case 14797938:                  // 'element' 'to' '{'
    case 14797983:                  // 'namespace' 'to' '{'
    case 14798007:                  // 'processing-instruction' 'to' '{'
    case 14798165:                  // 'attribute' 'transform' '{'
    case 14798194:                  // 'element' 'transform' '{'
    case 14798239:                  // 'namespace' 'transform' '{'
    case 14798263:                  // 'processing-instruction' 'transform' '{'
    case 14798421:                  // 'attribute' 'treat' '{'
    case 14798450:                  // 'element' 'treat' '{'
    case 14798495:                  // 'namespace' 'treat' '{'
    case 14798519:                  // 'processing-instruction' 'treat' '{'
    case 14799701:                  // 'attribute' 'union' '{'
    case 14799730:                  // 'element' 'union' '{'
    case 14799775:                  // 'namespace' 'union' '{'
    case 14799799:                  // 'processing-instruction' 'union' '{'
    case 14802005:                  // 'attribute' 'where' '{'
    case 14802034:                  // 'element' 'where' '{'
    case 14802079:                  // 'namespace' 'where' '{'
    case 14802103:                  // 'processing-instruction' 'where' '{'
    case 14802517:                  // 'attribute' 'with' '{'
    case 14802546:                  // 'element' 'with' '{'
    case 14802591:                  // 'namespace' 'with' '{'
    case 14802615:                  // 'processing-instruction' 'with' '{'
      try_PostfixExpr();
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 175:                       // 'parent'
    case 179:                       // 'preceding'
    case 180:                       // 'preceding-sibling'
      lookahead2W(187);             // END | S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 13134:                     // 'ancestor' '::'
    case 13135:                     // 'ancestor-or-self' '::'
    case 13231:                     // 'parent' '::'
    case 13235:                     // 'preceding' '::'
    case 13236:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(183);               // END | S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 175:                       // 'parent'
    case 179:                       // 'preceding'
    case 180:                       // 'preceding-sibling'
      lookahead2W(187);             // END | S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 13134:                     // 'ancestor' '::'
    case 13135:                     // 'ancestor-or-self' '::'
    case 13231:                     // 'parent' '::'
    case 13235:                     // 'preceding' '::'
    case 13236:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(183);               // END | S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 85:                        // 'attribute'
      lookahead2W(193);             // END | S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 94:                        // 'child'
    case 107:                       // 'descendant'
    case 108:                       // 'descendant-or-self'
    case 125:                       // 'following'
    case 126:                       // 'following-sibling'
    case 192:                       // 'self'
      lookahead2W(187);             // END | S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 13141:                     // 'attribute' '::'
    case 13150:                     // 'child' '::'
    case 13163:                     // 'descendant' '::'
    case 13164:                     // 'descendant-or-self' '::'
    case 13181:                     // 'following' '::'
    case 13182:                     // 'following-sibling' '::'
    case 13248:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(205);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 85:                        // 'attribute'
      lookahead2W(193);             // END | S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 94:                        // 'child'
    case 107:                       // 'descendant'
    case 108:                       // 'descendant-or-self'
    case 125:                       // 'following'
    case 126:                       // 'following-sibling'
    case 192:                       // 'self'
      lookahead2W(187);             // END | S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 13141:                     // 'attribute' '::'
    case 13150:                     // 'child' '::'
    case 13163:                     // 'descendant' '::'
    case 13164:                     // 'descendant-or-self' '::'
    case 13181:                     // 'following' '::'
    case 13182:                     // 'following-sibling' '::'
    case 13248:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(205);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 94:                        // 'child'
      consume(94);                  // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 107:                       // 'descendant'
      consume(107);                 // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 85:                        // 'attribute'
      consume(85);                  // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 192:                       // 'self'
      consume(192);                 // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 108:                       // 'descendant-or-self'
      consume(108);                 // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 126:                       // 'following-sibling'
      consume(126);                 // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    default:
      consume(125);                 // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 94:                        // 'child'
      consumeT(94);                 // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 107:                       // 'descendant'
      consumeT(107);                // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 85:                        // 'attribute'
      consumeT(85);                 // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 192:                       // 'self'
      consumeT(192);                // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 108:                       // 'descendant-or-self'
      consumeT(108);                // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 126:                       // 'following-sibling'
      consumeT(126);                // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    default:
      consumeT(125);                // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 68)                   // '@'
    {
      consume(68);                  // '@'
    }
    lookahead1W(205);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 68)                   // '@'
    {
      consumeT(68);                 // '@'
    }
    lookahead1W(205);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 45:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(205);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 45:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(205);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 175:                       // 'parent'
      consume(175);                 // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 180:                       // 'preceding-sibling'
      consume(180);                 // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 179:                       // 'preceding'
      consume(179);                 // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    default:
      consume(79);                  // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 175:                       // 'parent'
      consumeT(175);                // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 180:                       // 'preceding-sibling'
      consumeT(180);                // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 179:                       // 'preceding'
      consumeT(179);                // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    default:
      consumeT(79);                 // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(45);                    // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    consumeT(45);                   // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 85:                        // 'attribute'
    case 96:                        // 'comment'
    case 113:                       // 'document-node'
    case 114:                       // 'element'
    case 160:                       // 'namespace-node'
    case 165:                       // 'node'
    case 183:                       // 'processing-instruction'
    case 190:                       // 'schema-attribute'
    case 191:                       // 'schema-element'
    case 202:                       // 'text'
      lookahead2W(186);             // END | S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9045:                      // 'attribute' '('
    case 9056:                      // 'comment' '('
    case 9073:                      // 'document-node' '('
    case 9074:                      // 'element' '('
    case 9120:                      // 'namespace-node' '('
    case 9125:                      // 'node' '('
    case 9143:                      // 'processing-instruction' '('
    case 9150:                      // 'schema-attribute' '('
    case 9151:                      // 'schema-element' '('
    case 9162:                      // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 85:                        // 'attribute'
    case 96:                        // 'comment'
    case 113:                       // 'document-node'
    case 114:                       // 'element'
    case 160:                       // 'namespace-node'
    case 165:                       // 'node'
    case 183:                       // 'processing-instruction'
    case 190:                       // 'schema-attribute'
    case 191:                       // 'schema-element'
    case 202:                       // 'text'
      lookahead2W(186);             // END | S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9045:                      // 'attribute' '('
    case 9056:                      // 'comment' '('
    case 9073:                      // 'document-node' '('
    case 9074:                      // 'element' '('
    case 9120:                      // 'namespace-node' '('
    case 9125:                      // 'node' '('
    case 9143:                      // 'processing-instruction' '('
    case 9150:                      // 'schema-attribute' '('
    case 9151:                      // 'schema-element' '('
    case 9162:                      // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 25:                        // Wildcard
      consume(25);                  // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 25:                        // Wildcard
      consumeT(25);                 // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(186);             // END | S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      if (l1 != 35                  // '('
       && l1 != 70)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 70:                      // '['
        whitespace();
        parse_Predicate();
        break;
      default:
        whitespace();
        parse_ArgumentList();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(186);             // END | S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      if (l1 != 35                  // '('
       && l1 != 70)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 70:                      // '['
        try_Predicate();
        break;
      default:
        try_ArgumentList();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(35);                    // '('
    lookahead1W(220);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(84);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_Argument();
      }
    }
    consume(38);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    consumeT(35);                   // '('
    lookahead1W(220);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(84);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_Argument();
      }
    }
    consumeT(38);                   // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(183);             // END | S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      if (l1 != 70)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(183);             // END | S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      if (l1 != 70)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(70);                    // '['
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(71);                    // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    consumeT(70);                   // '['
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(71);                   // ']'
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 154:                       // 'map'
      lookahead2W(78);              // S^WS | '#' | '(:' | '{'
      switch (lk)
      {
      case 57754:                   // 'map' '{'
        lookahead3W(223);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
        break;
      }
      break;
    case 159:                       // 'namespace'
      lookahead2W(172);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'where' | 'with' | '{'
      break;
    case 183:                       // 'processing-instruction'
      lookahead2W(170);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'where' | 'with' | '{'
      break;
    case 85:                        // 'attribute'
    case 114:                       // 'element'
      lookahead2W(208);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
      break;
    case 96:                        // 'comment'
    case 202:                       // 'text'
      lookahead2W(78);              // S^WS | '#' | '(:' | '{'
      break;
    case 112:                       // 'document'
    case 173:                       // 'ordered'
    case 212:                       // 'unordered'
      lookahead2W(123);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 76:                        // 'after'
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 82:                        // 'as'
    case 83:                        // 'ascending'
    case 87:                        // 'before'
    case 90:                        // 'case'
    case 91:                        // 'cast'
    case 92:                        // 'castable'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 99:                        // 'copy'
    case 101:                       // 'count'
    case 104:                       // 'declare'
    case 105:                       // 'default'
    case 106:                       // 'delete'
    case 107:                       // 'descendant'
    case 108:                       // 'descendant-or-self'
    case 109:                       // 'descending'
    case 111:                       // 'div'
    case 115:                       // 'else'
    case 116:                       // 'empty'
    case 119:                       // 'end'
    case 120:                       // 'eq'
    case 121:                       // 'every'
    case 122:                       // 'except'
    case 124:                       // 'first'
    case 125:                       // 'following'
    case 126:                       // 'following-sibling'
    case 127:                       // 'for'
    case 129:                       // 'ge'
    case 131:                       // 'group'
    case 133:                       // 'gt'
    case 134:                       // 'idiv'
    case 136:                       // 'import'
    case 140:                       // 'insert'
    case 141:                       // 'instance'
    case 142:                       // 'intersect'
    case 143:                       // 'into'
    case 144:                       // 'invoke'
    case 145:                       // 'is'
    case 148:                       // 'last'
    case 150:                       // 'le'
    case 152:                       // 'let'
    case 153:                       // 'lt'
    case 156:                       // 'mod'
    case 157:                       // 'modify'
    case 158:                       // 'module'
    case 161:                       // 'ne'
    case 169:                       // 'only'
    case 171:                       // 'or'
    case 172:                       // 'order'
    case 175:                       // 'parent'
    case 179:                       // 'preceding'
    case 180:                       // 'preceding-sibling'
    case 184:                       // 'rename'
    case 185:                       // 'replace'
    case 186:                       // 'return'
    case 188:                       // 'satisfies'
    case 192:                       // 'self'
    case 195:                       // 'some'
    case 196:                       // 'stable'
    case 197:                       // 'start'
    case 204:                       // 'to'
    case 205:                       // 'transform'
    case 206:                       // 'treat'
    case 207:                       // 'try'
    case 211:                       // 'union'
    case 213:                       // 'update'
    case 215:                       // 'validate'
    case 220:                       // 'where'
    case 222:                       // 'with'
    case 223:                       // 'xquery'
      lookahead2W(77);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 188826                // 'map' '{' IntegerLiteral
     || lk == 254362                // 'map' '{' DecimalLiteral
     || lk == 319898                // 'map' '{' DoubleLiteral
     || lk == 385434                // 'map' '{' StringLiteral
     || lk == 450970                // 'map' '{' URIQualifiedName
     || lk == 1040794               // 'map' '{' QName^Token
     || lk == 1696154               // 'map' '{' Wildcard
     || lk == 2154906               // 'map' '{' '$'
     || lk == 2220442               // 'map' '{' '%'
     || lk == 2351514               // 'map' '{' '('
     || lk == 2417050               // 'map' '{' '(#'
     || lk == 2679194               // 'map' '{' '+'
     || lk == 2810266               // 'map' '{' '-'
     || lk == 2941338               // 'map' '{' '.'
     || lk == 3006874               // 'map' '{' '..'
     || lk == 3072410               // 'map' '{' '/'
     || lk == 3137946               // 'map' '{' '//'
     || lk == 3596698               // 'map' '{' '<'
     || lk == 3662234               // 'map' '{' '<!--'
     || lk == 3989914               // 'map' '{' '<?'
     || lk == 4383130               // 'map' '{' '?'
     || lk == 4514202               // 'map' '{' '@'
     || lk == 4645274               // 'map' '{' '['
     || lk == 4907418               // 'map' '{' '``['
     || lk == 5038490               // 'map' '{' 'after'
     || lk == 5169562               // 'map' '{' 'ancestor'
     || lk == 5235098               // 'map' '{' 'ancestor-or-self'
     || lk == 5300634               // 'map' '{' 'and'
     || lk == 5366170               // 'map' '{' 'array'
     || lk == 5431706               // 'map' '{' 'as'
     || lk == 5497242               // 'map' '{' 'ascending'
     || lk == 5628314               // 'map' '{' 'attribute'
     || lk == 5759386               // 'map' '{' 'before'
     || lk == 5955994               // 'map' '{' 'case'
     || lk == 6021530               // 'map' '{' 'cast'
     || lk == 6087066               // 'map' '{' 'castable'
     || lk == 6218138               // 'map' '{' 'child'
     || lk == 6283674               // 'map' '{' 'collation'
     || lk == 6349210               // 'map' '{' 'comment'
     || lk == 6545818               // 'map' '{' 'copy'
     || lk == 6676890               // 'map' '{' 'count'
     || lk == 6873498               // 'map' '{' 'declare'
     || lk == 6939034               // 'map' '{' 'default'
     || lk == 7004570               // 'map' '{' 'delete'
     || lk == 7070106               // 'map' '{' 'descendant'
     || lk == 7135642               // 'map' '{' 'descendant-or-self'
     || lk == 7201178               // 'map' '{' 'descending'
     || lk == 7332250               // 'map' '{' 'div'
     || lk == 7397786               // 'map' '{' 'document'
     || lk == 7463322               // 'map' '{' 'document-node'
     || lk == 7528858               // 'map' '{' 'element'
     || lk == 7594394               // 'map' '{' 'else'
     || lk == 7659930               // 'map' '{' 'empty'
     || lk == 7725466               // 'map' '{' 'empty-sequence'
     || lk == 7856538               // 'map' '{' 'end'
     || lk == 7922074               // 'map' '{' 'eq'
     || lk == 7987610               // 'map' '{' 'every'
     || lk == 8053146               // 'map' '{' 'except'
     || lk == 8184218               // 'map' '{' 'first'
     || lk == 8249754               // 'map' '{' 'following'
     || lk == 8315290               // 'map' '{' 'following-sibling'
     || lk == 8380826               // 'map' '{' 'for'
     || lk == 8446362               // 'map' '{' 'function'
     || lk == 8511898               // 'map' '{' 'ge'
     || lk == 8642970               // 'map' '{' 'group'
     || lk == 8774042               // 'map' '{' 'gt'
     || lk == 8839578               // 'map' '{' 'idiv'
     || lk == 8905114               // 'map' '{' 'if'
     || lk == 8970650               // 'map' '{' 'import'
     || lk == 9232794               // 'map' '{' 'insert'
     || lk == 9298330               // 'map' '{' 'instance'
     || lk == 9363866               // 'map' '{' 'intersect'
     || lk == 9429402               // 'map' '{' 'into'
     || lk == 9494938               // 'map' '{' 'invoke'
     || lk == 9560474               // 'map' '{' 'is'
     || lk == 9626010               // 'map' '{' 'item'
     || lk == 9757082               // 'map' '{' 'last'
     || lk == 9888154               // 'map' '{' 'le'
     || lk == 10019226              // 'map' '{' 'let'
     || lk == 10084762              // 'map' '{' 'lt'
     || lk == 10150298              // 'map' '{' 'map'
     || lk == 10281370              // 'map' '{' 'mod'
     || lk == 10346906              // 'map' '{' 'modify'
     || lk == 10412442              // 'map' '{' 'module'
     || lk == 10477978              // 'map' '{' 'namespace'
     || lk == 10543514              // 'map' '{' 'namespace-node'
     || lk == 10609050              // 'map' '{' 'ne'
     || lk == 10871194              // 'map' '{' 'node'
     || lk == 11133338              // 'map' '{' 'only'
     || lk == 11264410              // 'map' '{' 'or'
     || lk == 11329946              // 'map' '{' 'order'
     || lk == 11395482              // 'map' '{' 'ordered'
     || lk == 11526554              // 'map' '{' 'parent'
     || lk == 11788698              // 'map' '{' 'preceding'
     || lk == 11854234              // 'map' '{' 'preceding-sibling'
     || lk == 12050842              // 'map' '{' 'processing-instruction'
     || lk == 12116378              // 'map' '{' 'rename'
     || lk == 12181914              // 'map' '{' 'replace'
     || lk == 12247450              // 'map' '{' 'return'
     || lk == 12378522              // 'map' '{' 'satisfies'
     || lk == 12509594              // 'map' '{' 'schema-attribute'
     || lk == 12575130              // 'map' '{' 'schema-element'
     || lk == 12640666              // 'map' '{' 'self'
     || lk == 12837274              // 'map' '{' 'some'
     || lk == 12902810              // 'map' '{' 'stable'
     || lk == 12968346              // 'map' '{' 'start'
     || lk == 13230490              // 'map' '{' 'switch'
     || lk == 13296026              // 'map' '{' 'text'
     || lk == 13427098              // 'map' '{' 'to'
     || lk == 13492634              // 'map' '{' 'transform'
     || lk == 13558170              // 'map' '{' 'treat'
     || lk == 13623706              // 'map' '{' 'try'
     || lk == 13820314              // 'map' '{' 'typeswitch'
     || lk == 13885850              // 'map' '{' 'union'
     || lk == 13951386              // 'map' '{' 'unordered'
     || lk == 14016922              // 'map' '{' 'update'
     || lk == 14147994              // 'map' '{' 'validate'
     || lk == 14475674              // 'map' '{' 'where'
     || lk == 14606746              // 'map' '{' 'with'
     || lk == 14672282              // 'map' '{' 'xquery'
     || lk == 15065498)             // 'map' '{' '}'
    {
      lk = memoized(0, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Constructor();
          lk = -8;
        }
        catch (p8A)
        {
          lk = -10;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(0, e0, lk);
      }
    }
    switch (lk)
    {
    case 2:                         // IntegerLiteral
    case 3:                         // DecimalLiteral
    case 4:                         // DoubleLiteral
    case 5:                         // StringLiteral
      parse_Literal();
      break;
    case 32:                        // '$'
      parse_VarRef();
      break;
    case 35:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      parse_ContextItemExpr();
      break;
    case 8966:                      // URIQualifiedName '('
    case 8975:                      // QName^Token '('
    case 9036:                      // 'after' '('
    case 9038:                      // 'ancestor' '('
    case 9039:                      // 'ancestor-or-self' '('
    case 9040:                      // 'and' '('
    case 9042:                      // 'as' '('
    case 9043:                      // 'ascending' '('
    case 9047:                      // 'before' '('
    case 9050:                      // 'case' '('
    case 9051:                      // 'cast' '('
    case 9052:                      // 'castable' '('
    case 9054:                      // 'child' '('
    case 9055:                      // 'collation' '('
    case 9059:                      // 'copy' '('
    case 9061:                      // 'count' '('
    case 9064:                      // 'declare' '('
    case 9065:                      // 'default' '('
    case 9066:                      // 'delete' '('
    case 9067:                      // 'descendant' '('
    case 9068:                      // 'descendant-or-self' '('
    case 9069:                      // 'descending' '('
    case 9071:                      // 'div' '('
    case 9072:                      // 'document' '('
    case 9075:                      // 'else' '('
    case 9076:                      // 'empty' '('
    case 9079:                      // 'end' '('
    case 9080:                      // 'eq' '('
    case 9081:                      // 'every' '('
    case 9082:                      // 'except' '('
    case 9084:                      // 'first' '('
    case 9085:                      // 'following' '('
    case 9086:                      // 'following-sibling' '('
    case 9087:                      // 'for' '('
    case 9089:                      // 'ge' '('
    case 9091:                      // 'group' '('
    case 9093:                      // 'gt' '('
    case 9094:                      // 'idiv' '('
    case 9096:                      // 'import' '('
    case 9100:                      // 'insert' '('
    case 9101:                      // 'instance' '('
    case 9102:                      // 'intersect' '('
    case 9103:                      // 'into' '('
    case 9104:                      // 'invoke' '('
    case 9105:                      // 'is' '('
    case 9108:                      // 'last' '('
    case 9110:                      // 'le' '('
    case 9112:                      // 'let' '('
    case 9113:                      // 'lt' '('
    case 9116:                      // 'mod' '('
    case 9117:                      // 'modify' '('
    case 9118:                      // 'module' '('
    case 9119:                      // 'namespace' '('
    case 9121:                      // 'ne' '('
    case 9129:                      // 'only' '('
    case 9131:                      // 'or' '('
    case 9132:                      // 'order' '('
    case 9133:                      // 'ordered' '('
    case 9135:                      // 'parent' '('
    case 9139:                      // 'preceding' '('
    case 9140:                      // 'preceding-sibling' '('
    case 9144:                      // 'rename' '('
    case 9145:                      // 'replace' '('
    case 9146:                      // 'return' '('
    case 9148:                      // 'satisfies' '('
    case 9152:                      // 'self' '('
    case 9155:                      // 'some' '('
    case 9156:                      // 'stable' '('
    case 9157:                      // 'start' '('
    case 9164:                      // 'to' '('
    case 9165:                      // 'transform' '('
    case 9166:                      // 'treat' '('
    case 9167:                      // 'try' '('
    case 9171:                      // 'union' '('
    case 9172:                      // 'unordered' '('
    case 9173:                      // 'update' '('
    case 9175:                      // 'validate' '('
    case 9180:                      // 'where' '('
    case 9182:                      // 'with' '('
    case 9183:                      // 'xquery' '('
      parse_FunctionCall();
      break;
    case 57773:                     // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 57812:                     // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 33:                        // '%'
    case 113:                       // 'document-node'
    case 117:                       // 'empty-sequence'
    case 128:                       // 'function'
    case 135:                       // 'if'
    case 146:                       // 'item'
    case 160:                       // 'namespace-node'
    case 165:                       // 'node'
    case 190:                       // 'schema-attribute'
    case 191:                       // 'schema-element'
    case 201:                       // 'switch'
    case 210:                       // 'typeswitch'
    case 7686:                      // URIQualifiedName '#'
    case 7695:                      // QName^Token '#'
    case 7756:                      // 'after' '#'
    case 7758:                      // 'ancestor' '#'
    case 7759:                      // 'ancestor-or-self' '#'
    case 7760:                      // 'and' '#'
    case 7762:                      // 'as' '#'
    case 7763:                      // 'ascending' '#'
    case 7765:                      // 'attribute' '#'
    case 7767:                      // 'before' '#'
    case 7770:                      // 'case' '#'
    case 7771:                      // 'cast' '#'
    case 7772:                      // 'castable' '#'
    case 7774:                      // 'child' '#'
    case 7775:                      // 'collation' '#'
    case 7776:                      // 'comment' '#'
    case 7779:                      // 'copy' '#'
    case 7781:                      // 'count' '#'
    case 7784:                      // 'declare' '#'
    case 7785:                      // 'default' '#'
    case 7786:                      // 'delete' '#'
    case 7787:                      // 'descendant' '#'
    case 7788:                      // 'descendant-or-self' '#'
    case 7789:                      // 'descending' '#'
    case 7791:                      // 'div' '#'
    case 7792:                      // 'document' '#'
    case 7794:                      // 'element' '#'
    case 7795:                      // 'else' '#'
    case 7796:                      // 'empty' '#'
    case 7799:                      // 'end' '#'
    case 7800:                      // 'eq' '#'
    case 7801:                      // 'every' '#'
    case 7802:                      // 'except' '#'
    case 7804:                      // 'first' '#'
    case 7805:                      // 'following' '#'
    case 7806:                      // 'following-sibling' '#'
    case 7807:                      // 'for' '#'
    case 7809:                      // 'ge' '#'
    case 7811:                      // 'group' '#'
    case 7813:                      // 'gt' '#'
    case 7814:                      // 'idiv' '#'
    case 7816:                      // 'import' '#'
    case 7820:                      // 'insert' '#'
    case 7821:                      // 'instance' '#'
    case 7822:                      // 'intersect' '#'
    case 7823:                      // 'into' '#'
    case 7824:                      // 'invoke' '#'
    case 7825:                      // 'is' '#'
    case 7828:                      // 'last' '#'
    case 7830:                      // 'le' '#'
    case 7832:                      // 'let' '#'
    case 7833:                      // 'lt' '#'
    case 7834:                      // 'map' '#'
    case 7836:                      // 'mod' '#'
    case 7837:                      // 'modify' '#'
    case 7838:                      // 'module' '#'
    case 7839:                      // 'namespace' '#'
    case 7841:                      // 'ne' '#'
    case 7849:                      // 'only' '#'
    case 7851:                      // 'or' '#'
    case 7852:                      // 'order' '#'
    case 7853:                      // 'ordered' '#'
    case 7855:                      // 'parent' '#'
    case 7859:                      // 'preceding' '#'
    case 7860:                      // 'preceding-sibling' '#'
    case 7863:                      // 'processing-instruction' '#'
    case 7864:                      // 'rename' '#'
    case 7865:                      // 'replace' '#'
    case 7866:                      // 'return' '#'
    case 7868:                      // 'satisfies' '#'
    case 7872:                      // 'self' '#'
    case 7875:                      // 'some' '#'
    case 7876:                      // 'stable' '#'
    case 7877:                      // 'start' '#'
    case 7882:                      // 'text' '#'
    case 7884:                      // 'to' '#'
    case 7885:                      // 'transform' '#'
    case 7886:                      // 'treat' '#'
    case 7887:                      // 'try' '#'
    case 7891:                      // 'union' '#'
    case 7892:                      // 'unordered' '#'
    case 7893:                      // 'update' '#'
    case 7895:                      // 'validate' '#'
    case 7900:                      // 'where' '#'
    case 7902:                      // 'with' '#'
    case 7903:                      // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case -10:
      parse_MapConstructor();
      break;
    case 70:                        // '['
    case 81:                        // 'array'
      parse_ArrayConstructor();
      break;
    case 74:                        // '``['
      parse_StringConstructor();
      break;
    case 66:                        // '?'
      parse_UnaryLookup();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 154:                       // 'map'
      lookahead2W(78);              // S^WS | '#' | '(:' | '{'
      switch (lk)
      {
      case 57754:                   // 'map' '{'
        lookahead3W(223);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
        break;
      }
      break;
    case 159:                       // 'namespace'
      lookahead2W(172);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'where' | 'with' | '{'
      break;
    case 183:                       // 'processing-instruction'
      lookahead2W(170);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'where' | 'with' | '{'
      break;
    case 85:                        // 'attribute'
    case 114:                       // 'element'
      lookahead2W(208);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
      break;
    case 96:                        // 'comment'
    case 202:                       // 'text'
      lookahead2W(78);              // S^WS | '#' | '(:' | '{'
      break;
    case 112:                       // 'document'
    case 173:                       // 'ordered'
    case 212:                       // 'unordered'
      lookahead2W(123);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 76:                        // 'after'
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 82:                        // 'as'
    case 83:                        // 'ascending'
    case 87:                        // 'before'
    case 90:                        // 'case'
    case 91:                        // 'cast'
    case 92:                        // 'castable'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 99:                        // 'copy'
    case 101:                       // 'count'
    case 104:                       // 'declare'
    case 105:                       // 'default'
    case 106:                       // 'delete'
    case 107:                       // 'descendant'
    case 108:                       // 'descendant-or-self'
    case 109:                       // 'descending'
    case 111:                       // 'div'
    case 115:                       // 'else'
    case 116:                       // 'empty'
    case 119:                       // 'end'
    case 120:                       // 'eq'
    case 121:                       // 'every'
    case 122:                       // 'except'
    case 124:                       // 'first'
    case 125:                       // 'following'
    case 126:                       // 'following-sibling'
    case 127:                       // 'for'
    case 129:                       // 'ge'
    case 131:                       // 'group'
    case 133:                       // 'gt'
    case 134:                       // 'idiv'
    case 136:                       // 'import'
    case 140:                       // 'insert'
    case 141:                       // 'instance'
    case 142:                       // 'intersect'
    case 143:                       // 'into'
    case 144:                       // 'invoke'
    case 145:                       // 'is'
    case 148:                       // 'last'
    case 150:                       // 'le'
    case 152:                       // 'let'
    case 153:                       // 'lt'
    case 156:                       // 'mod'
    case 157:                       // 'modify'
    case 158:                       // 'module'
    case 161:                       // 'ne'
    case 169:                       // 'only'
    case 171:                       // 'or'
    case 172:                       // 'order'
    case 175:                       // 'parent'
    case 179:                       // 'preceding'
    case 180:                       // 'preceding-sibling'
    case 184:                       // 'rename'
    case 185:                       // 'replace'
    case 186:                       // 'return'
    case 188:                       // 'satisfies'
    case 192:                       // 'self'
    case 195:                       // 'some'
    case 196:                       // 'stable'
    case 197:                       // 'start'
    case 204:                       // 'to'
    case 205:                       // 'transform'
    case 206:                       // 'treat'
    case 207:                       // 'try'
    case 211:                       // 'union'
    case 213:                       // 'update'
    case 215:                       // 'validate'
    case 220:                       // 'where'
    case 222:                       // 'with'
    case 223:                       // 'xquery'
      lookahead2W(77);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 188826                // 'map' '{' IntegerLiteral
     || lk == 254362                // 'map' '{' DecimalLiteral
     || lk == 319898                // 'map' '{' DoubleLiteral
     || lk == 385434                // 'map' '{' StringLiteral
     || lk == 450970                // 'map' '{' URIQualifiedName
     || lk == 1040794               // 'map' '{' QName^Token
     || lk == 1696154               // 'map' '{' Wildcard
     || lk == 2154906               // 'map' '{' '$'
     || lk == 2220442               // 'map' '{' '%'
     || lk == 2351514               // 'map' '{' '('
     || lk == 2417050               // 'map' '{' '(#'
     || lk == 2679194               // 'map' '{' '+'
     || lk == 2810266               // 'map' '{' '-'
     || lk == 2941338               // 'map' '{' '.'
     || lk == 3006874               // 'map' '{' '..'
     || lk == 3072410               // 'map' '{' '/'
     || lk == 3137946               // 'map' '{' '//'
     || lk == 3596698               // 'map' '{' '<'
     || lk == 3662234               // 'map' '{' '<!--'
     || lk == 3989914               // 'map' '{' '<?'
     || lk == 4383130               // 'map' '{' '?'
     || lk == 4514202               // 'map' '{' '@'
     || lk == 4645274               // 'map' '{' '['
     || lk == 4907418               // 'map' '{' '``['
     || lk == 5038490               // 'map' '{' 'after'
     || lk == 5169562               // 'map' '{' 'ancestor'
     || lk == 5235098               // 'map' '{' 'ancestor-or-self'
     || lk == 5300634               // 'map' '{' 'and'
     || lk == 5366170               // 'map' '{' 'array'
     || lk == 5431706               // 'map' '{' 'as'
     || lk == 5497242               // 'map' '{' 'ascending'
     || lk == 5628314               // 'map' '{' 'attribute'
     || lk == 5759386               // 'map' '{' 'before'
     || lk == 5955994               // 'map' '{' 'case'
     || lk == 6021530               // 'map' '{' 'cast'
     || lk == 6087066               // 'map' '{' 'castable'
     || lk == 6218138               // 'map' '{' 'child'
     || lk == 6283674               // 'map' '{' 'collation'
     || lk == 6349210               // 'map' '{' 'comment'
     || lk == 6545818               // 'map' '{' 'copy'
     || lk == 6676890               // 'map' '{' 'count'
     || lk == 6873498               // 'map' '{' 'declare'
     || lk == 6939034               // 'map' '{' 'default'
     || lk == 7004570               // 'map' '{' 'delete'
     || lk == 7070106               // 'map' '{' 'descendant'
     || lk == 7135642               // 'map' '{' 'descendant-or-self'
     || lk == 7201178               // 'map' '{' 'descending'
     || lk == 7332250               // 'map' '{' 'div'
     || lk == 7397786               // 'map' '{' 'document'
     || lk == 7463322               // 'map' '{' 'document-node'
     || lk == 7528858               // 'map' '{' 'element'
     || lk == 7594394               // 'map' '{' 'else'
     || lk == 7659930               // 'map' '{' 'empty'
     || lk == 7725466               // 'map' '{' 'empty-sequence'
     || lk == 7856538               // 'map' '{' 'end'
     || lk == 7922074               // 'map' '{' 'eq'
     || lk == 7987610               // 'map' '{' 'every'
     || lk == 8053146               // 'map' '{' 'except'
     || lk == 8184218               // 'map' '{' 'first'
     || lk == 8249754               // 'map' '{' 'following'
     || lk == 8315290               // 'map' '{' 'following-sibling'
     || lk == 8380826               // 'map' '{' 'for'
     || lk == 8446362               // 'map' '{' 'function'
     || lk == 8511898               // 'map' '{' 'ge'
     || lk == 8642970               // 'map' '{' 'group'
     || lk == 8774042               // 'map' '{' 'gt'
     || lk == 8839578               // 'map' '{' 'idiv'
     || lk == 8905114               // 'map' '{' 'if'
     || lk == 8970650               // 'map' '{' 'import'
     || lk == 9232794               // 'map' '{' 'insert'
     || lk == 9298330               // 'map' '{' 'instance'
     || lk == 9363866               // 'map' '{' 'intersect'
     || lk == 9429402               // 'map' '{' 'into'
     || lk == 9494938               // 'map' '{' 'invoke'
     || lk == 9560474               // 'map' '{' 'is'
     || lk == 9626010               // 'map' '{' 'item'
     || lk == 9757082               // 'map' '{' 'last'
     || lk == 9888154               // 'map' '{' 'le'
     || lk == 10019226              // 'map' '{' 'let'
     || lk == 10084762              // 'map' '{' 'lt'
     || lk == 10150298              // 'map' '{' 'map'
     || lk == 10281370              // 'map' '{' 'mod'
     || lk == 10346906              // 'map' '{' 'modify'
     || lk == 10412442              // 'map' '{' 'module'
     || lk == 10477978              // 'map' '{' 'namespace'
     || lk == 10543514              // 'map' '{' 'namespace-node'
     || lk == 10609050              // 'map' '{' 'ne'
     || lk == 10871194              // 'map' '{' 'node'
     || lk == 11133338              // 'map' '{' 'only'
     || lk == 11264410              // 'map' '{' 'or'
     || lk == 11329946              // 'map' '{' 'order'
     || lk == 11395482              // 'map' '{' 'ordered'
     || lk == 11526554              // 'map' '{' 'parent'
     || lk == 11788698              // 'map' '{' 'preceding'
     || lk == 11854234              // 'map' '{' 'preceding-sibling'
     || lk == 12050842              // 'map' '{' 'processing-instruction'
     || lk == 12116378              // 'map' '{' 'rename'
     || lk == 12181914              // 'map' '{' 'replace'
     || lk == 12247450              // 'map' '{' 'return'
     || lk == 12378522              // 'map' '{' 'satisfies'
     || lk == 12509594              // 'map' '{' 'schema-attribute'
     || lk == 12575130              // 'map' '{' 'schema-element'
     || lk == 12640666              // 'map' '{' 'self'
     || lk == 12837274              // 'map' '{' 'some'
     || lk == 12902810              // 'map' '{' 'stable'
     || lk == 12968346              // 'map' '{' 'start'
     || lk == 13230490              // 'map' '{' 'switch'
     || lk == 13296026              // 'map' '{' 'text'
     || lk == 13427098              // 'map' '{' 'to'
     || lk == 13492634              // 'map' '{' 'transform'
     || lk == 13558170              // 'map' '{' 'treat'
     || lk == 13623706              // 'map' '{' 'try'
     || lk == 13820314              // 'map' '{' 'typeswitch'
     || lk == 13885850              // 'map' '{' 'union'
     || lk == 13951386              // 'map' '{' 'unordered'
     || lk == 14016922              // 'map' '{' 'update'
     || lk == 14147994              // 'map' '{' 'validate'
     || lk == 14475674              // 'map' '{' 'where'
     || lk == 14606746              // 'map' '{' 'with'
     || lk == 14672282              // 'map' '{' 'xquery'
     || lk == 15065498)             // 'map' '{' '}'
    {
      lk = memoized(0, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Constructor();
          memoize(0, e0A, -8);
          lk = -14;
        }
        catch (p8A)
        {
          lk = -10;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(0, e0A, -10);
        }
      }
    }
    switch (lk)
    {
    case 2:                         // IntegerLiteral
    case 3:                         // DecimalLiteral
    case 4:                         // DoubleLiteral
    case 5:                         // StringLiteral
      try_Literal();
      break;
    case 32:                        // '$'
      try_VarRef();
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      try_ContextItemExpr();
      break;
    case 8966:                      // URIQualifiedName '('
    case 8975:                      // QName^Token '('
    case 9036:                      // 'after' '('
    case 9038:                      // 'ancestor' '('
    case 9039:                      // 'ancestor-or-self' '('
    case 9040:                      // 'and' '('
    case 9042:                      // 'as' '('
    case 9043:                      // 'ascending' '('
    case 9047:                      // 'before' '('
    case 9050:                      // 'case' '('
    case 9051:                      // 'cast' '('
    case 9052:                      // 'castable' '('
    case 9054:                      // 'child' '('
    case 9055:                      // 'collation' '('
    case 9059:                      // 'copy' '('
    case 9061:                      // 'count' '('
    case 9064:                      // 'declare' '('
    case 9065:                      // 'default' '('
    case 9066:                      // 'delete' '('
    case 9067:                      // 'descendant' '('
    case 9068:                      // 'descendant-or-self' '('
    case 9069:                      // 'descending' '('
    case 9071:                      // 'div' '('
    case 9072:                      // 'document' '('
    case 9075:                      // 'else' '('
    case 9076:                      // 'empty' '('
    case 9079:                      // 'end' '('
    case 9080:                      // 'eq' '('
    case 9081:                      // 'every' '('
    case 9082:                      // 'except' '('
    case 9084:                      // 'first' '('
    case 9085:                      // 'following' '('
    case 9086:                      // 'following-sibling' '('
    case 9087:                      // 'for' '('
    case 9089:                      // 'ge' '('
    case 9091:                      // 'group' '('
    case 9093:                      // 'gt' '('
    case 9094:                      // 'idiv' '('
    case 9096:                      // 'import' '('
    case 9100:                      // 'insert' '('
    case 9101:                      // 'instance' '('
    case 9102:                      // 'intersect' '('
    case 9103:                      // 'into' '('
    case 9104:                      // 'invoke' '('
    case 9105:                      // 'is' '('
    case 9108:                      // 'last' '('
    case 9110:                      // 'le' '('
    case 9112:                      // 'let' '('
    case 9113:                      // 'lt' '('
    case 9116:                      // 'mod' '('
    case 9117:                      // 'modify' '('
    case 9118:                      // 'module' '('
    case 9119:                      // 'namespace' '('
    case 9121:                      // 'ne' '('
    case 9129:                      // 'only' '('
    case 9131:                      // 'or' '('
    case 9132:                      // 'order' '('
    case 9133:                      // 'ordered' '('
    case 9135:                      // 'parent' '('
    case 9139:                      // 'preceding' '('
    case 9140:                      // 'preceding-sibling' '('
    case 9144:                      // 'rename' '('
    case 9145:                      // 'replace' '('
    case 9146:                      // 'return' '('
    case 9148:                      // 'satisfies' '('
    case 9152:                      // 'self' '('
    case 9155:                      // 'some' '('
    case 9156:                      // 'stable' '('
    case 9157:                      // 'start' '('
    case 9164:                      // 'to' '('
    case 9165:                      // 'transform' '('
    case 9166:                      // 'treat' '('
    case 9167:                      // 'try' '('
    case 9171:                      // 'union' '('
    case 9172:                      // 'unordered' '('
    case 9173:                      // 'update' '('
    case 9175:                      // 'validate' '('
    case 9180:                      // 'where' '('
    case 9182:                      // 'with' '('
    case 9183:                      // 'xquery' '('
      try_FunctionCall();
      break;
    case 57773:                     // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 57812:                     // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 33:                        // '%'
    case 113:                       // 'document-node'
    case 117:                       // 'empty-sequence'
    case 128:                       // 'function'
    case 135:                       // 'if'
    case 146:                       // 'item'
    case 160:                       // 'namespace-node'
    case 165:                       // 'node'
    case 190:                       // 'schema-attribute'
    case 191:                       // 'schema-element'
    case 201:                       // 'switch'
    case 210:                       // 'typeswitch'
    case 7686:                      // URIQualifiedName '#'
    case 7695:                      // QName^Token '#'
    case 7756:                      // 'after' '#'
    case 7758:                      // 'ancestor' '#'
    case 7759:                      // 'ancestor-or-self' '#'
    case 7760:                      // 'and' '#'
    case 7762:                      // 'as' '#'
    case 7763:                      // 'ascending' '#'
    case 7765:                      // 'attribute' '#'
    case 7767:                      // 'before' '#'
    case 7770:                      // 'case' '#'
    case 7771:                      // 'cast' '#'
    case 7772:                      // 'castable' '#'
    case 7774:                      // 'child' '#'
    case 7775:                      // 'collation' '#'
    case 7776:                      // 'comment' '#'
    case 7779:                      // 'copy' '#'
    case 7781:                      // 'count' '#'
    case 7784:                      // 'declare' '#'
    case 7785:                      // 'default' '#'
    case 7786:                      // 'delete' '#'
    case 7787:                      // 'descendant' '#'
    case 7788:                      // 'descendant-or-self' '#'
    case 7789:                      // 'descending' '#'
    case 7791:                      // 'div' '#'
    case 7792:                      // 'document' '#'
    case 7794:                      // 'element' '#'
    case 7795:                      // 'else' '#'
    case 7796:                      // 'empty' '#'
    case 7799:                      // 'end' '#'
    case 7800:                      // 'eq' '#'
    case 7801:                      // 'every' '#'
    case 7802:                      // 'except' '#'
    case 7804:                      // 'first' '#'
    case 7805:                      // 'following' '#'
    case 7806:                      // 'following-sibling' '#'
    case 7807:                      // 'for' '#'
    case 7809:                      // 'ge' '#'
    case 7811:                      // 'group' '#'
    case 7813:                      // 'gt' '#'
    case 7814:                      // 'idiv' '#'
    case 7816:                      // 'import' '#'
    case 7820:                      // 'insert' '#'
    case 7821:                      // 'instance' '#'
    case 7822:                      // 'intersect' '#'
    case 7823:                      // 'into' '#'
    case 7824:                      // 'invoke' '#'
    case 7825:                      // 'is' '#'
    case 7828:                      // 'last' '#'
    case 7830:                      // 'le' '#'
    case 7832:                      // 'let' '#'
    case 7833:                      // 'lt' '#'
    case 7834:                      // 'map' '#'
    case 7836:                      // 'mod' '#'
    case 7837:                      // 'modify' '#'
    case 7838:                      // 'module' '#'
    case 7839:                      // 'namespace' '#'
    case 7841:                      // 'ne' '#'
    case 7849:                      // 'only' '#'
    case 7851:                      // 'or' '#'
    case 7852:                      // 'order' '#'
    case 7853:                      // 'ordered' '#'
    case 7855:                      // 'parent' '#'
    case 7859:                      // 'preceding' '#'
    case 7860:                      // 'preceding-sibling' '#'
    case 7863:                      // 'processing-instruction' '#'
    case 7864:                      // 'rename' '#'
    case 7865:                      // 'replace' '#'
    case 7866:                      // 'return' '#'
    case 7868:                      // 'satisfies' '#'
    case 7872:                      // 'self' '#'
    case 7875:                      // 'some' '#'
    case 7876:                      // 'stable' '#'
    case 7877:                      // 'start' '#'
    case 7882:                      // 'text' '#'
    case 7884:                      // 'to' '#'
    case 7885:                      // 'transform' '#'
    case 7886:                      // 'treat' '#'
    case 7887:                      // 'try' '#'
    case 7891:                      // 'union' '#'
    case 7892:                      // 'unordered' '#'
    case 7893:                      // 'update' '#'
    case 7895:                      // 'validate' '#'
    case 7900:                      // 'where' '#'
    case 7902:                      // 'with' '#'
    case 7903:                      // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case -10:
      try_MapConstructor();
      break;
    case 70:                        // '['
    case 81:                        // 'array'
      try_ArrayConstructor();
      break;
    case 74:                        // '``['
      try_StringConstructor();
      break;
    case 66:                        // '?'
      try_UnaryLookup();
      break;
    case -14:
      break;
    default:
      try_Constructor();
    }
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 5:                         // StringLiteral
      consume(5);                   // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 5:                         // StringLiteral
      consumeT(5);                  // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 2:                         // IntegerLiteral
      consume(2);                   // IntegerLiteral
      break;
    case 3:                         // DecimalLiteral
      consume(3);                   // DecimalLiteral
      break;
    default:
      consume(4);                   // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 2:                         // IntegerLiteral
      consumeT(2);                  // IntegerLiteral
      break;
    case 3:                         // DecimalLiteral
      consumeT(3);                  // DecimalLiteral
      break;
    default:
      consumeT(4);                  // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(35);                    // '('
    lookahead1W(220);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(38);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    consumeT(35);                   // '('
    lookahead1W(220);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_Expr();
    }
    consumeT(38);                   // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(44);                    // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    consumeT(44);                   // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(173);                   // 'ordered'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    consumeT(173);                  // 'ordered'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(229);                  // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(212);                   // 'unordered'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    consumeT(212);                  // 'unordered'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(229);                  // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 66:                        // '?'
      lookahead2W(173);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9794:                      // '?' ')'
    case 10562:                     // '?' ','
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 66:                        // '?'
      lookahead2W(173);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9794:                      // '?' ')'
    case 10562:                     // '?' ','
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(66);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    consumeT(66);                   // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 60:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 60:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 54:                        // '<'
      parse_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
      try_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(54);                    // '<'
    parse_QName();
    parse_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      consume(48);                  // '/>'
      break;
    default:
      consume(63);                  // '>'
      for (;;)
      {
        lookahead1(152);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 57)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(57);                  // '</'
      parse_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 18)                 // S
      {
        consume(18);                // S
      }
      lookahead1(9);                // '>'
      consume(63);                  // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    consumeT(54);                   // '<'
    try_QName();
    try_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      consumeT(48);                 // '/>'
      break;
    default:
      consumeT(63);                 // '>'
      for (;;)
      {
        lookahead1(152);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 57)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(57);                 // '</'
      try_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 18)                 // S
      {
        consumeT(18);               // S
      }
      lookahead1(9);                // '>'
      consumeT(63);                 // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 18)                 // S
      {
        break;
      }
      consume(18);                  // S
      lookahead1(204);              // QName^Token | S | '/>' | '>' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 18                  // S
       && l1 != 48                  // '/>'
       && l1 != 63)                 // '>'
      {
        parse_QName();
        lookahead1(13);             // S | '='
        if (l1 == 18)               // S
        {
          consume(18);              // S
        }
        lookahead1(8);              // '='
        consume(61);                // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 18)               // S
        {
          consume(18);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 18)                 // S
      {
        break;
      }
      consumeT(18);                 // S
      lookahead1(204);              // QName^Token | S | '/>' | '>' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 18                  // S
       && l1 != 48                  // '/>'
       && l1 != 63)                 // '>'
      {
        try_QName();
        lookahead1(13);             // S | '='
        if (l1 == 18)               // S
        {
          consumeT(18);             // S
        }
        lookahead1(8);              // '='
        consumeT(61);               // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 18)               // S
        {
          consumeT(18);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 29:                        // '"'
      consume(29);                  // '"'
      for (;;)
      {
        lookahead1(145);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 29)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeQuot
          consume(8);               // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(29);                  // '"'
      break;
    default:
      consume(34);                  // "'"
      for (;;)
      {
        lookahead1(146);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 9:                     // EscapeApos
          consume(9);               // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(34);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 29:                        // '"'
      consumeT(29);                 // '"'
      for (;;)
      {
        lookahead1(145);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 29)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeQuot
          consumeT(8);              // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(29);                 // '"'
      break;
    default:
      consumeT(34);                 // "'"
      for (;;)
      {
        lookahead1(146);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 9:                     // EscapeApos
          consumeT(9);              // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(34);                 // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 11:                        // QuotAttrContentChar
      consume(11);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 11:                        // QuotAttrContentChar
      consumeT(11);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 12:                        // AposAttrContentChar
      consume(12);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 12:                        // AposAttrContentChar
      consumeT(12);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 60:                        // '<?'
      parse_DirectConstructor();
      break;
    case 56:                        // '<![CDATA['
      parse_CDataSection();
      break;
    case 10:                        // ElementContentChar
      consume(10);                  // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 60:                        // '<?'
      try_DirectConstructor();
      break;
    case 56:                        // '<![CDATA['
      try_CDataSection();
      break;
    case 10:                        // ElementContentChar
      consumeT(10);                 // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 7:                         // PredefinedEntityRef
      consume(7);                   // PredefinedEntityRef
      break;
    case 14:                        // CharRef
      consume(14);                  // CharRef
      break;
    case 226:                       // '{{'
      consume(226);                 // '{{'
      break;
    case 231:                       // '}}'
      consume(231);                 // '}}'
      break;
    default:
      parse_EnclosedExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 7:                         // PredefinedEntityRef
      consumeT(7);                  // PredefinedEntityRef
      break;
    case 14:                        // CharRef
      consumeT(14);                 // CharRef
      break;
    case 226:                       // '{{'
      consumeT(226);                // '{{'
      break;
    case 231:                       // '}}'
      consumeT(231);                // '}}'
      break;
    default:
      try_EnclosedExpr();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(55);                    // '<!--'
    lookahead1(3);                  // DirCommentContents
    consume(22);                    // DirCommentContents
    lookahead1(7);                  // '-->'
    consume(43);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    consumeT(55);                   // '<!--'
    lookahead1(3);                  // DirCommentContents
    consumeT(22);                   // DirCommentContents
    lookahead1(7);                  // '-->'
    consumeT(43);                   // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(60);                    // '<?'
    lookahead1(0);                  // PITarget
    consume(13);                    // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 18)                   // S
    {
      consume(18);                  // S
      lookahead1(4);                // DirPIContents
      consume(23);                  // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consume(67);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    consumeT(60);                   // '<?'
    lookahead1(0);                  // PITarget
    consumeT(13);                   // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 18)                   // S
    {
      consumeT(18);                 // S
      lookahead1(4);                // DirPIContents
      consumeT(23);                 // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consumeT(67);                   // '?>'
  }

  function parse_CDataSection()
  {
    eventHandler.startNonterminal("CDataSection", e0);
    consume(56);                    // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consume(24);                    // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consume(72);                    // ']]>'
    eventHandler.endNonterminal("CDataSection", e0);
  }

  function try_CDataSection()
  {
    consumeT(56);                   // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consumeT(24);                   // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consumeT(72);                   // ']]>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 112:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 114:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 85:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 159:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 202:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 96:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    case 183:                       // 'processing-instruction'
      parse_CompPIConstructor();
      break;
    default:
      parse_MapConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 112:                       // 'document'
      try_CompDocConstructor();
      break;
    case 114:                       // 'element'
      try_CompElemConstructor();
      break;
    case 85:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 159:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 202:                       // 'text'
      try_CompTextConstructor();
      break;
    case 96:                        // 'comment'
      try_CompCommentConstructor();
      break;
    case 183:                       // 'processing-instruction'
      try_CompPIConstructor();
      break;
    default:
      try_MapConstructor();
    }
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(112);                   // 'document'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    consumeT(112);                  // 'document'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(229);                  // '}'
  }

  function parse_MapConstructor()
  {
    eventHandler.startNonterminal("MapConstructor", e0);
    consume(154);                   // 'map'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      whitespace();
      parse_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ',' | '}'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_MapConstructorEntry();
      }
    }
    consume(229);                   // '}'
    eventHandler.endNonterminal("MapConstructor", e0);
  }

  function try_MapConstructor()
  {
    consumeT(154);                  // 'map'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      try_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ',' | '}'
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_MapConstructorEntry();
      }
    }
    consumeT(229);                  // '}'
  }

  function parse_MapConstructorEntry()
  {
    eventHandler.startNonterminal("MapConstructorEntry", e0);
    parse_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consume(49);                    // ':'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_MapValueExpr();
    eventHandler.endNonterminal("MapConstructorEntry", e0);
  }

  function try_MapConstructorEntry()
  {
    try_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consumeT(49);                   // ':'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_MapValueExpr();
  }

  function parse_MapKeyExpr()
  {
    eventHandler.startNonterminal("MapKeyExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapKeyExpr", e0);
  }

  function try_MapKeyExpr()
  {
    try_ExprSingle();
  }

  function parse_MapValueExpr()
  {
    eventHandler.startNonterminal("MapValueExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapValueExpr", e0);
  }

  function try_MapValueExpr()
  {
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    switch (l1)
    {
    case 70:                        // '['
      parse_SquareArrayConstructor();
      break;
    default:
      parse_CurlyArrayConstructor();
    }
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    switch (l1)
    {
    case 70:                        // '['
      try_SquareArrayConstructor();
      break;
    default:
      try_CurlyArrayConstructor();
    }
  }

  function parse_SquareArrayConstructor()
  {
    eventHandler.startNonterminal("SquareArrayConstructor", e0);
    consume(70);                    // '['
    lookahead1W(221);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 71)                   // ']'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(87);            // S^WS | '(:' | ',' | ']'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(71);                    // ']'
    eventHandler.endNonterminal("SquareArrayConstructor", e0);
  }

  function try_SquareArrayConstructor()
  {
    consumeT(70);                   // '['
    lookahead1W(221);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 71)                   // ']'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(87);            // S^WS | '(:' | ',' | ']'
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(71);                   // ']'
  }

  function parse_CurlyArrayConstructor()
  {
    eventHandler.startNonterminal("CurlyArrayConstructor", e0);
    consume(81);                    // 'array'
    lookahead1W(72);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CurlyArrayConstructor", e0);
  }

  function try_CurlyArrayConstructor()
  {
    consumeT(81);                   // 'array'
    lookahead1W(72);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_StringConstructor()
  {
    eventHandler.startNonterminal("StringConstructor", e0);
    consume(74);                    // '``['
    parse_StringConstructorContent();
    consume(73);                    // ']``'
    eventHandler.endNonterminal("StringConstructor", e0);
  }

  function try_StringConstructor()
  {
    consumeT(74);                   // '``['
    try_StringConstructorContent();
    consumeT(73);                   // ']``'
  }

  function parse_StringConstructorContent()
  {
    eventHandler.startNonterminal("StringConstructorContent", e0);
    lookahead1(1);                  // StringConstructorChars
    consume(16);                    // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 75)                 // '`{'
      {
        break;
      }
      parse_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consume(16);                  // StringConstructorChars
    }
    eventHandler.endNonterminal("StringConstructorContent", e0);
  }

  function try_StringConstructorContent()
  {
    lookahead1(1);                  // StringConstructorChars
    consumeT(16);                   // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 75)                 // '`{'
      {
        break;
      }
      try_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consumeT(16);                 // StringConstructorChars
    }
  }

  function parse_StringConstructorInterpolation()
  {
    eventHandler.startNonterminal("StringConstructorInterpolation", e0);
    consume(75);                    // '`{'
    lookahead1W(224);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' |
                                    // '}`'
    if (l1 != 230)                  // '}`'
    {
      whitespace();
      parse_Expr();
    }
    consume(230);                   // '}`'
    eventHandler.endNonterminal("StringConstructorInterpolation", e0);
  }

  function try_StringConstructorInterpolation()
  {
    consumeT(75);                   // '`{'
    lookahead1W(224);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' |
                                    // '}`'
    if (l1 != 230)                  // '}`'
    {
      try_Expr();
    }
    consumeT(230);                  // '}`'
  }

  function parse_UnaryLookup()
  {
    eventHandler.startNonterminal("UnaryLookup", e0);
    consume(66);                    // '?'
    lookahead1W(171);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("UnaryLookup", e0);
  }

  function try_UnaryLookup()
  {
    consumeT(66);                   // '?'
    lookahead1W(171);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with'
    try_KeySpecifier();
  }

  function parse_KeySpecifier()
  {
    eventHandler.startNonterminal("KeySpecifier", e0);
    switch (l1)
    {
    case 2:                         // IntegerLiteral
      consume(2);                   // IntegerLiteral
      break;
    case 35:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      parse_NCName();
    }
    eventHandler.endNonterminal("KeySpecifier", e0);
  }

  function try_KeySpecifier()
  {
    switch (l1)
    {
    case 2:                         // IntegerLiteral
      consumeT(2);                  // IntegerLiteral
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      try_NCName();
    }
  }

  function parse_ArrowFunctionSpecifier()
  {
    eventHandler.startNonterminal("ArrowFunctionSpecifier", e0);
    switch (l1)
    {
    case 32:                        // '$'
      parse_VarRef();
      break;
    case 35:                        // '('
      parse_ParenthesizedExpr();
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("ArrowFunctionSpecifier", e0);
  }

  function try_ArrowFunctionSpecifier()
  {
    switch (l1)
    {
    case 32:                        // '$'
      try_VarRef();
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    default:
      try_EQName();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(114);                   // 'element'
    lookahead1W(207);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      consume(225);                 // '{'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(229);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    consume(229);                   // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    consumeT(114);                  // 'element'
    lookahead1W(207);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      consumeT(225);                // '{'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(229);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      try_ContentExpr();
    }
    consumeT(229);                  // '}'
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_Expr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(85);                    // 'attribute'
    lookahead1W(207);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      consume(225);                 // '{'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(229);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(229);                   // '}'
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    consumeT(85);                   // 'attribute'
    lookahead1W(207);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      consumeT(225);                // '{'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(229);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      try_Expr();
    }
    consumeT(229);                  // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(159);                   // 'namespace'
    lookahead1W(168);               // NCName^Token | S^WS | '(:' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      consume(225);                 // '{'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_PrefixExpr();
      consume(229);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_URIExpr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    consumeT(159);                  // 'namespace'
    lookahead1W(168);               // NCName^Token | S^WS | '(:' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      consumeT(225);                // '{'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_PrefixExpr();
      consumeT(229);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_URIExpr();
    consumeT(229);                  // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(202);                   // 'text'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    consumeT(202);                  // 'text'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(229);                  // '}'
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(96);                    // 'comment'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    consumeT(96);                   // 'comment'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(229);                  // '}'
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(183);                   // 'processing-instruction'
    lookahead1W(168);               // NCName^Token | S^WS | '(:' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      consume(225);                 // '{'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(229);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(229);                   // '}'
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    consumeT(183);                  // 'processing-instruction'
    lookahead1W(168);               // NCName^Token | S^WS | '(:' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      consumeT(225);                // '{'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(229);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      try_Expr();
    }
    consumeT(229);                  // '}'
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 128:                       // 'function'
      lookahead2W(77);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33:                        // '%'
    case 9088:                      // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 128:                       // 'function'
      lookahead2W(77);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33:                        // '%'
    case 9088:                      // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consume(30);                    // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consume(2);                     // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consumeT(30);                   // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consumeT(2);                    // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(82);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(128);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(79);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(38);                    // ')'
    lookahead1W(97);                // S^WS | '(:' | 'as' | '{'
    if (l1 == 82)                   // 'as'
    {
      consume(82);                  // 'as'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(82);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(128);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(79);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      try_ParamList();
    }
    consumeT(38);                   // ')'
    lookahead1W(97);                // S^WS | '(:' | 'as' | '{'
    if (l1 == 82)                   // 'as'
    {
      consumeT(82);                 // 'as'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(179);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
    if (l1 == 66)                   // '?'
    {
      consume(66);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(179);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
    if (l1 == 66)                   // '?'
    {
      consumeT(66);                 // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(82);                    // 'as'
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    consumeT(82);                   // 'as'
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 117:                       // 'empty-sequence'
      lookahead2W(182);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' |
                                    // 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'in' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9077:                      // 'empty-sequence' '('
      consume(117);                 // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(35);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(38);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(181);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' | 'following' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 66:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 117:                       // 'empty-sequence'
      lookahead2W(182);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' |
                                    // 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'in' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9077:                      // 'empty-sequence' '('
      consumeT(117);                // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(35);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(38);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(181);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' | 'following' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 66:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 66:                        // '?'
      consume(66);                  // '?'
      break;
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      consume(40);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 66:                        // '?'
      consumeT(66);                 // '?'
      break;
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      consumeT(40);                 // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 85:                        // 'attribute'
    case 96:                        // 'comment'
    case 113:                       // 'document-node'
    case 114:                       // 'element'
    case 128:                       // 'function'
    case 146:                       // 'item'
    case 154:                       // 'map'
    case 160:                       // 'namespace-node'
    case 165:                       // 'node'
    case 183:                       // 'processing-instruction'
    case 190:                       // 'schema-attribute'
    case 191:                       // 'schema-element'
    case 202:                       // 'text'
      lookahead2W(182);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' |
                                    // 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'in' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9045:                      // 'attribute' '('
    case 9056:                      // 'comment' '('
    case 9073:                      // 'document-node' '('
    case 9074:                      // 'element' '('
    case 9120:                      // 'namespace-node' '('
    case 9125:                      // 'node' '('
    case 9143:                      // 'processing-instruction' '('
    case 9150:                      // 'schema-attribute' '('
    case 9151:                      // 'schema-element' '('
    case 9162:                      // 'text' '('
      parse_KindTest();
      break;
    case 9106:                      // 'item' '('
      consume(146);                 // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(35);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(38);                  // ')'
      break;
    case 33:                        // '%'
    case 9088:                      // 'function' '('
      parse_FunctionTest();
      break;
    case 35:                        // '('
      parse_ParenthesizedItemType();
      break;
    case 9114:                      // 'map' '('
      parse_MapType();
      break;
    case 81:                        // 'array'
    case 147:                       // 'json-item'
    case 167:                       // 'object'
      parse_JSONTest();
      break;
    case 200:                       // 'structured-item'
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 85:                        // 'attribute'
    case 96:                        // 'comment'
    case 113:                       // 'document-node'
    case 114:                       // 'element'
    case 128:                       // 'function'
    case 146:                       // 'item'
    case 154:                       // 'map'
    case 160:                       // 'namespace-node'
    case 165:                       // 'node'
    case 183:                       // 'processing-instruction'
    case 190:                       // 'schema-attribute'
    case 191:                       // 'schema-element'
    case 202:                       // 'text'
      lookahead2W(182);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' |
                                    // 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'in' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9045:                      // 'attribute' '('
    case 9056:                      // 'comment' '('
    case 9073:                      // 'document-node' '('
    case 9074:                      // 'element' '('
    case 9120:                      // 'namespace-node' '('
    case 9125:                      // 'node' '('
    case 9143:                      // 'processing-instruction' '('
    case 9150:                      // 'schema-attribute' '('
    case 9151:                      // 'schema-element' '('
    case 9162:                      // 'text' '('
      try_KindTest();
      break;
    case 9106:                      // 'item' '('
      consumeT(146);                // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(35);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(38);                 // ')'
      break;
    case 33:                        // '%'
    case 9088:                      // 'function' '('
      try_FunctionTest();
      break;
    case 35:                        // '('
      try_ParenthesizedItemType();
      break;
    case 9114:                      // 'map' '('
      try_MapType();
      break;
    case 81:                        // 'array'
    case 147:                       // 'json-item'
    case 167:                       // 'object'
      try_JSONTest();
      break;
    case 200:                       // 'structured-item'
      try_StructuredItemTest();
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_JSONTest()
  {
    eventHandler.startNonterminal("JSONTest", e0);
    switch (l1)
    {
    case 147:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 167:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    eventHandler.endNonterminal("JSONTest", e0);
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 147:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 167:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_MapType()
  {
    eventHandler.startNonterminal("MapType", e0);
    consume(154);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(206);               // URIQualifiedName | QName^Token | S^WS | '(:' | '*' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      whitespace();
      parse_AtomicOrUnionType();
      lookahead1W(27);              // S^WS | '(:' | ','
      consume(41);                  // ','
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("MapType", e0);
  }

  function try_MapType()
  {
    consumeT(154);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(206);               // URIQualifiedName | QName^Token | S^WS | '(:' | '*' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      try_AtomicOrUnionType();
      lookahead1W(27);              // S^WS | '(:' | ','
      consumeT(41);                 // ','
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_StructuredItemTest()
  {
    eventHandler.startNonterminal("StructuredItemTest", e0);
    consume(200);                   // 'structured-item'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("StructuredItemTest", e0);
  }

  function try_StructuredItemTest()
  {
    consumeT(200);                  // 'structured-item'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_JSONItemTest()
  {
    eventHandler.startNonterminal("JSONItemTest", e0);
    consume(147);                   // 'json-item'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("JSONItemTest", e0);
  }

  function try_JSONItemTest()
  {
    consumeT(147);                  // 'json-item'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_JSONObjectTest()
  {
    eventHandler.startNonterminal("JSONObjectTest", e0);
    consume(167);                   // 'object'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("JSONObjectTest", e0);
  }

  function try_JSONObjectTest()
  {
    consumeT(167);                  // 'object'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_JSONArrayTest()
  {
    eventHandler.startNonterminal("JSONArrayTest", e0);
    consume(81);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("JSONArrayTest", e0);
  }

  function try_JSONArrayTest()
  {
    consumeT(81);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 113:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 114:                       // 'element'
      parse_ElementTest();
      break;
    case 85:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 191:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 190:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 183:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 96:                        // 'comment'
      parse_CommentTest();
      break;
    case 202:                       // 'text'
      parse_TextTest();
      break;
    case 160:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 113:                       // 'document-node'
      try_DocumentTest();
      break;
    case 114:                       // 'element'
      try_ElementTest();
      break;
    case 85:                        // 'attribute'
      try_AttributeTest();
      break;
    case 191:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 190:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 183:                       // 'processing-instruction'
      try_PITest();
      break;
    case 96:                        // 'comment'
      try_CommentTest();
      break;
    case 202:                       // 'text'
      try_TextTest();
      break;
    case 160:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(165);                   // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    consumeT(165);                  // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(113);                   // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(127);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 114:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    consumeT(113);                  // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(127);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 114:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(202);                   // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    consumeT(202);                  // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(96);                    // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    consumeT(96);                   // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(160);                   // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    consumeT(160);                  // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(183);                   // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(169);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'where' | 'with'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 5:                       // StringLiteral
        consume(5);                 // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    consumeT(183);                  // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(169);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'where' | 'with'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 5:                       // StringLiteral
        consumeT(5);                // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(85);                    // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(210);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(84);              // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consume(41);                // ','
        lookahead1W(203);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    consumeT(85);                   // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(210);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(84);              // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consumeT(41);               // ','
        lookahead1W(203);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(190);                   // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    consumeT(190);                  // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(114);                   // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(210);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(84);              // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consume(41);                // ','
        lookahead1W(203);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(85);            // S^WS | '(:' | ')' | '?'
        if (l1 == 66)               // '?'
        {
          consume(66);              // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    consumeT(114);                  // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(210);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(84);              // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consumeT(41);               // ','
        lookahead1W(203);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_TypeName();
        lookahead1W(85);            // S^WS | '(:' | ')' | '?'
        if (l1 == 66)               // '?'
        {
          consumeT(66);             // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(191);                   // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    consumeT(191);                  // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(82);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 128:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      switch (lk)
      {
      case 9088:                    // 'function' '('
        lookahead3W(214);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | '*' | 'after' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' |
                                    // 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
        break;
      }
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 2564992:                   // 'function' '(' '*'
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(82);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 128:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      switch (lk)
      {
      case 9088:                    // 'function' '('
        lookahead3W(214);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | '*' | 'after' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' |
                                    // 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
        break;
      }
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 2564992:                   // 'function' '(' '*'
      try_AnyFunctionTest();
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(128);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(39);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    consumeT(128);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(39);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(128);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(213);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' |
                                    // 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(84);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(211);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(38);                    // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(82);                    // 'as'
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    consumeT(128);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(213);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' |
                                    // 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(84);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(211);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
        try_SequenceType();
      }
    }
    consumeT(38);                   // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(82);                   // 'as'
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(35);                    // '('
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    consumeT(35);                   // '('
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_URILiteral()
  {
    eventHandler.startNonterminal("URILiteral", e0);
    consume(5);                     // StringLiteral
    eventHandler.endNonterminal("URILiteral", e0);
  }

  function try_URILiteral()
  {
    consumeT(5);                    // StringLiteral
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(63);                // S^WS | '(:' | 'revalidation'
    consume(187);                   // 'revalidation'
    lookahead1W(134);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 198:                       // 'strict'
      consume(198);                 // 'strict'
      break;
    case 149:                       // 'lax'
      consume(149);                 // 'lax'
      break;
    default:
      consume(193);                 // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 143:                       // 'into'
      consume(143);                 // 'into'
      break;
    case 125:                       // 'following'
      consume(125);                 // 'following'
      break;
    default:
      consume(179);                 // 'preceding'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 143:                       // 'into'
      consumeT(143);                // 'into'
      break;
    case 125:                       // 'following'
      consumeT(125);                // 'following'
      break;
    default:
      consumeT(179);                // 'preceding'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(213);                   // 'update'
    lookahead1W(51);                // S^WS | '(:' | 'insert'
    consume(140);                   // 'insert'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SourceExpr();
    lookahead1W(132);               // S^WS | '(:' | 'following' | 'into' | 'preceding'
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    consumeT(213);                  // 'update'
    lookahead1W(51);                // S^WS | '(:' | 'insert'
    consumeT(140);                  // 'insert'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SourceExpr();
    lookahead1W(132);               // S^WS | '(:' | 'following' | 'into' | 'preceding'
    try_InsertExprTargetChoice();
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(213);                   // 'update'
    lookahead1W(45);                // S^WS | '(:' | 'delete'
    consume(106);                   // 'delete'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    consumeT(213);                  // 'update'
    lookahead1W(45);                // S^WS | '(:' | 'delete'
    consumeT(106);                  // 'delete'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(213);                   // 'update'
    lookahead1W(61);                // S^WS | '(:' | 'replace'
    consume(185);                   // 'replace'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(71);                // S^WS | '(:' | 'with'
    consume(222);                   // 'with'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    consumeT(213);                  // 'update'
    lookahead1W(61);                // S^WS | '(:' | 'replace'
    consumeT(185);                  // 'replace'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(71);                // S^WS | '(:' | 'with'
    consumeT(222);                  // 'with'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_UpdateValueExpr()
  {
    eventHandler.startNonterminal("UpdateValueExpr", e0);
    consume(213);                   // 'update'
    lookahead1W(68);                // S^WS | '(:' | 'value'
    consume(216);                   // 'value'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(71);                // S^WS | '(:' | 'with'
    consume(222);                   // 'with'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("UpdateValueExpr", e0);
  }

  function try_UpdateValueExpr()
  {
    consumeT(213);                  // 'update'
    lookahead1W(68);                // S^WS | '(:' | 'value'
    consumeT(216);                  // 'value'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(71);                // S^WS | '(:' | 'with'
    consumeT(222);                  // 'with'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(213);                   // 'update'
    lookahead1W(60);                // S^WS | '(:' | 'rename'
    consume(184);                   // 'rename'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(82);                    // 'as'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    consumeT(213);                  // 'update'
    lookahead1W(60);                // S^WS | '(:' | 'rename'
    consumeT(184);                  // 'rename'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(82);                   // 'as'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_UpdatingFunctionCall()
  {
    eventHandler.startNonterminal("UpdatingFunctionCall", e0);
    consume(144);                   // 'invoke'
    lookahead1W(67);                // S^WS | '(:' | 'updating'
    consume(214);                   // 'updating'
    lookahead1W(215);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(220);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(84);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(38);                    // ')'
    eventHandler.endNonterminal("UpdatingFunctionCall", e0);
  }

  function try_UpdatingFunctionCall()
  {
    consumeT(144);                  // 'invoke'
    lookahead1W(67);                // S^WS | '(:' | 'updating'
    consumeT(214);                  // 'updating'
    lookahead1W(215);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(220);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(84);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(38);                   // ')'
  }

  function parse_CopyModifyExpr()
  {
    eventHandler.startNonterminal("CopyModifyExpr", e0);
    consume(99);                    // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(52);                    // ':='
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(88);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(32);                  // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | ':='
      consume(52);                  // ':='
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    consume(157);                   // 'modify'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consume(186);                   // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CopyModifyExpr", e0);
  }

  function try_CopyModifyExpr()
  {
    consumeT(99);                   // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(52);                   // ':='
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(88);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(32);                 // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | ':='
      consumeT(52);                 // ':='
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_ExprSingle();
    }
    consumeT(157);                  // 'modify'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consumeT(186);                  // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(201);                // URIQualifiedName | QName^Token | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 6:                         // URIQualifiedName
      consume(6);                   // URIQualifiedName
      break;
    default:
      parse_QName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(201);                // URIQualifiedName | QName^Token | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 6:                         // URIQualifiedName
      consumeT(6);                  // URIQualifiedName
      break;
    default:
      try_QName();
    }
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 19:                        // S^WS
      consumeT(19);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function try_Comment()
  {
    consumeT(37);                   // '(:'
    for (;;)
    {
      lookahead1(73);               // CommentContents | '(:' | ':)'
      if (l1 == 50)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 20:                      // CommentContents
        consumeT(20);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(50);                   // ':)'
  }

  function parse_FunctionEQName()
  {
    eventHandler.startNonterminal("FunctionEQName", e0);
    switch (l1)
    {
    case 6:                         // URIQualifiedName
      consume(6);                   // URIQualifiedName
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("FunctionEQName", e0);
  }

  function try_FunctionEQName()
  {
    switch (l1)
    {
    case 6:                         // URIQualifiedName
      consumeT(6);                  // URIQualifiedName
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_QName()
  {
    eventHandler.startNonterminal("QName", e0);
    lookahead1(200);                // QName^Token | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 85:                        // 'attribute'
      consume(85);                  // 'attribute'
      break;
    case 96:                        // 'comment'
      consume(96);                  // 'comment'
      break;
    case 113:                       // 'document-node'
      consume(113);                 // 'document-node'
      break;
    case 114:                       // 'element'
      consume(114);                 // 'element'
      break;
    case 117:                       // 'empty-sequence'
      consume(117);                 // 'empty-sequence'
      break;
    case 128:                       // 'function'
      consume(128);                 // 'function'
      break;
    case 135:                       // 'if'
      consume(135);                 // 'if'
      break;
    case 146:                       // 'item'
      consume(146);                 // 'item'
      break;
    case 154:                       // 'map'
      consume(154);                 // 'map'
      break;
    case 160:                       // 'namespace-node'
      consume(160);                 // 'namespace-node'
      break;
    case 165:                       // 'node'
      consume(165);                 // 'node'
      break;
    case 183:                       // 'processing-instruction'
      consume(183);                 // 'processing-instruction'
      break;
    case 190:                       // 'schema-attribute'
      consume(190);                 // 'schema-attribute'
      break;
    case 191:                       // 'schema-element'
      consume(191);                 // 'schema-element'
      break;
    case 201:                       // 'switch'
      consume(201);                 // 'switch'
      break;
    case 202:                       // 'text'
      consume(202);                 // 'text'
      break;
    case 210:                       // 'typeswitch'
      consume(210);                 // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("QName", e0);
  }

  function try_QName()
  {
    lookahead1(200);                // QName^Token | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 85:                        // 'attribute'
      consumeT(85);                 // 'attribute'
      break;
    case 96:                        // 'comment'
      consumeT(96);                 // 'comment'
      break;
    case 113:                       // 'document-node'
      consumeT(113);                // 'document-node'
      break;
    case 114:                       // 'element'
      consumeT(114);                // 'element'
      break;
    case 117:                       // 'empty-sequence'
      consumeT(117);                // 'empty-sequence'
      break;
    case 128:                       // 'function'
      consumeT(128);                // 'function'
      break;
    case 135:                       // 'if'
      consumeT(135);                // 'if'
      break;
    case 146:                       // 'item'
      consumeT(146);                // 'item'
      break;
    case 154:                       // 'map'
      consumeT(154);                // 'map'
      break;
    case 160:                       // 'namespace-node'
      consumeT(160);                // 'namespace-node'
      break;
    case 165:                       // 'node'
      consumeT(165);                // 'node'
      break;
    case 183:                       // 'processing-instruction'
      consumeT(183);                // 'processing-instruction'
      break;
    case 190:                       // 'schema-attribute'
      consumeT(190);                // 'schema-attribute'
      break;
    case 191:                       // 'schema-element'
      consumeT(191);                // 'schema-element'
      break;
    case 201:                       // 'switch'
      consumeT(201);                // 'switch'
      break;
    case 202:                       // 'text'
      consumeT(202);                // 'text'
      break;
    case 210:                       // 'typeswitch'
      consumeT(210);                // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 15:                        // QName^Token
      consume(15);                  // QName^Token
      break;
    case 76:                        // 'after'
      consume(76);                  // 'after'
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consume(79);                  // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 82:                        // 'as'
      consume(82);                  // 'as'
      break;
    case 83:                        // 'ascending'
      consume(83);                  // 'ascending'
      break;
    case 87:                        // 'before'
      consume(87);                  // 'before'
      break;
    case 90:                        // 'case'
      consume(90);                  // 'case'
      break;
    case 91:                        // 'cast'
      consume(91);                  // 'cast'
      break;
    case 92:                        // 'castable'
      consume(92);                  // 'castable'
      break;
    case 94:                        // 'child'
      consume(94);                  // 'child'
      break;
    case 95:                        // 'collation'
      consume(95);                  // 'collation'
      break;
    case 99:                        // 'copy'
      consume(99);                  // 'copy'
      break;
    case 101:                       // 'count'
      consume(101);                 // 'count'
      break;
    case 104:                       // 'declare'
      consume(104);                 // 'declare'
      break;
    case 105:                       // 'default'
      consume(105);                 // 'default'
      break;
    case 106:                       // 'delete'
      consume(106);                 // 'delete'
      break;
    case 107:                       // 'descendant'
      consume(107);                 // 'descendant'
      break;
    case 108:                       // 'descendant-or-self'
      consume(108);                 // 'descendant-or-self'
      break;
    case 109:                       // 'descending'
      consume(109);                 // 'descending'
      break;
    case 111:                       // 'div'
      consume(111);                 // 'div'
      break;
    case 112:                       // 'document'
      consume(112);                 // 'document'
      break;
    case 115:                       // 'else'
      consume(115);                 // 'else'
      break;
    case 116:                       // 'empty'
      consume(116);                 // 'empty'
      break;
    case 119:                       // 'end'
      consume(119);                 // 'end'
      break;
    case 120:                       // 'eq'
      consume(120);                 // 'eq'
      break;
    case 121:                       // 'every'
      consume(121);                 // 'every'
      break;
    case 122:                       // 'except'
      consume(122);                 // 'except'
      break;
    case 124:                       // 'first'
      consume(124);                 // 'first'
      break;
    case 125:                       // 'following'
      consume(125);                 // 'following'
      break;
    case 126:                       // 'following-sibling'
      consume(126);                 // 'following-sibling'
      break;
    case 127:                       // 'for'
      consume(127);                 // 'for'
      break;
    case 129:                       // 'ge'
      consume(129);                 // 'ge'
      break;
    case 131:                       // 'group'
      consume(131);                 // 'group'
      break;
    case 133:                       // 'gt'
      consume(133);                 // 'gt'
      break;
    case 134:                       // 'idiv'
      consume(134);                 // 'idiv'
      break;
    case 136:                       // 'import'
      consume(136);                 // 'import'
      break;
    case 140:                       // 'insert'
      consume(140);                 // 'insert'
      break;
    case 213:                       // 'update'
      consume(213);                 // 'update'
      break;
    case 141:                       // 'instance'
      consume(141);                 // 'instance'
      break;
    case 142:                       // 'intersect'
      consume(142);                 // 'intersect'
      break;
    case 143:                       // 'into'
      consume(143);                 // 'into'
      break;
    case 144:                       // 'invoke'
      consume(144);                 // 'invoke'
      break;
    case 145:                       // 'is'
      consume(145);                 // 'is'
      break;
    case 148:                       // 'last'
      consume(148);                 // 'last'
      break;
    case 150:                       // 'le'
      consume(150);                 // 'le'
      break;
    case 152:                       // 'let'
      consume(152);                 // 'let'
      break;
    case 153:                       // 'lt'
      consume(153);                 // 'lt'
      break;
    case 156:                       // 'mod'
      consume(156);                 // 'mod'
      break;
    case 157:                       // 'modify'
      consume(157);                 // 'modify'
      break;
    case 158:                       // 'module'
      consume(158);                 // 'module'
      break;
    case 159:                       // 'namespace'
      consume(159);                 // 'namespace'
      break;
    case 161:                       // 'ne'
      consume(161);                 // 'ne'
      break;
    case 169:                       // 'only'
      consume(169);                 // 'only'
      break;
    case 171:                       // 'or'
      consume(171);                 // 'or'
      break;
    case 172:                       // 'order'
      consume(172);                 // 'order'
      break;
    case 173:                       // 'ordered'
      consume(173);                 // 'ordered'
      break;
    case 175:                       // 'parent'
      consume(175);                 // 'parent'
      break;
    case 179:                       // 'preceding'
      consume(179);                 // 'preceding'
      break;
    case 180:                       // 'preceding-sibling'
      consume(180);                 // 'preceding-sibling'
      break;
    case 184:                       // 'rename'
      consume(184);                 // 'rename'
      break;
    case 185:                       // 'replace'
      consume(185);                 // 'replace'
      break;
    case 186:                       // 'return'
      consume(186);                 // 'return'
      break;
    case 188:                       // 'satisfies'
      consume(188);                 // 'satisfies'
      break;
    case 192:                       // 'self'
      consume(192);                 // 'self'
      break;
    case 195:                       // 'some'
      consume(195);                 // 'some'
      break;
    case 196:                       // 'stable'
      consume(196);                 // 'stable'
      break;
    case 197:                       // 'start'
      consume(197);                 // 'start'
      break;
    case 204:                       // 'to'
      consume(204);                 // 'to'
      break;
    case 205:                       // 'transform'
      consume(205);                 // 'transform'
      break;
    case 206:                       // 'treat'
      consume(206);                 // 'treat'
      break;
    case 207:                       // 'try'
      consume(207);                 // 'try'
      break;
    case 211:                       // 'union'
      consume(211);                 // 'union'
      break;
    case 212:                       // 'unordered'
      consume(212);                 // 'unordered'
      break;
    case 215:                       // 'validate'
      consume(215);                 // 'validate'
      break;
    case 220:                       // 'where'
      consume(220);                 // 'where'
      break;
    case 222:                       // 'with'
      consume(222);                 // 'with'
      break;
    default:
      consume(223);                 // 'xquery'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 15:                        // QName^Token
      consumeT(15);                 // QName^Token
      break;
    case 76:                        // 'after'
      consumeT(76);                 // 'after'
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consumeT(79);                 // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 82:                        // 'as'
      consumeT(82);                 // 'as'
      break;
    case 83:                        // 'ascending'
      consumeT(83);                 // 'ascending'
      break;
    case 87:                        // 'before'
      consumeT(87);                 // 'before'
      break;
    case 90:                        // 'case'
      consumeT(90);                 // 'case'
      break;
    case 91:                        // 'cast'
      consumeT(91);                 // 'cast'
      break;
    case 92:                        // 'castable'
      consumeT(92);                 // 'castable'
      break;
    case 94:                        // 'child'
      consumeT(94);                 // 'child'
      break;
    case 95:                        // 'collation'
      consumeT(95);                 // 'collation'
      break;
    case 99:                        // 'copy'
      consumeT(99);                 // 'copy'
      break;
    case 101:                       // 'count'
      consumeT(101);                // 'count'
      break;
    case 104:                       // 'declare'
      consumeT(104);                // 'declare'
      break;
    case 105:                       // 'default'
      consumeT(105);                // 'default'
      break;
    case 106:                       // 'delete'
      consumeT(106);                // 'delete'
      break;
    case 107:                       // 'descendant'
      consumeT(107);                // 'descendant'
      break;
    case 108:                       // 'descendant-or-self'
      consumeT(108);                // 'descendant-or-self'
      break;
    case 109:                       // 'descending'
      consumeT(109);                // 'descending'
      break;
    case 111:                       // 'div'
      consumeT(111);                // 'div'
      break;
    case 112:                       // 'document'
      consumeT(112);                // 'document'
      break;
    case 115:                       // 'else'
      consumeT(115);                // 'else'
      break;
    case 116:                       // 'empty'
      consumeT(116);                // 'empty'
      break;
    case 119:                       // 'end'
      consumeT(119);                // 'end'
      break;
    case 120:                       // 'eq'
      consumeT(120);                // 'eq'
      break;
    case 121:                       // 'every'
      consumeT(121);                // 'every'
      break;
    case 122:                       // 'except'
      consumeT(122);                // 'except'
      break;
    case 124:                       // 'first'
      consumeT(124);                // 'first'
      break;
    case 125:                       // 'following'
      consumeT(125);                // 'following'
      break;
    case 126:                       // 'following-sibling'
      consumeT(126);                // 'following-sibling'
      break;
    case 127:                       // 'for'
      consumeT(127);                // 'for'
      break;
    case 129:                       // 'ge'
      consumeT(129);                // 'ge'
      break;
    case 131:                       // 'group'
      consumeT(131);                // 'group'
      break;
    case 133:                       // 'gt'
      consumeT(133);                // 'gt'
      break;
    case 134:                       // 'idiv'
      consumeT(134);                // 'idiv'
      break;
    case 136:                       // 'import'
      consumeT(136);                // 'import'
      break;
    case 140:                       // 'insert'
      consumeT(140);                // 'insert'
      break;
    case 213:                       // 'update'
      consumeT(213);                // 'update'
      break;
    case 141:                       // 'instance'
      consumeT(141);                // 'instance'
      break;
    case 142:                       // 'intersect'
      consumeT(142);                // 'intersect'
      break;
    case 143:                       // 'into'
      consumeT(143);                // 'into'
      break;
    case 144:                       // 'invoke'
      consumeT(144);                // 'invoke'
      break;
    case 145:                       // 'is'
      consumeT(145);                // 'is'
      break;
    case 148:                       // 'last'
      consumeT(148);                // 'last'
      break;
    case 150:                       // 'le'
      consumeT(150);                // 'le'
      break;
    case 152:                       // 'let'
      consumeT(152);                // 'let'
      break;
    case 153:                       // 'lt'
      consumeT(153);                // 'lt'
      break;
    case 156:                       // 'mod'
      consumeT(156);                // 'mod'
      break;
    case 157:                       // 'modify'
      consumeT(157);                // 'modify'
      break;
    case 158:                       // 'module'
      consumeT(158);                // 'module'
      break;
    case 159:                       // 'namespace'
      consumeT(159);                // 'namespace'
      break;
    case 161:                       // 'ne'
      consumeT(161);                // 'ne'
      break;
    case 169:                       // 'only'
      consumeT(169);                // 'only'
      break;
    case 171:                       // 'or'
      consumeT(171);                // 'or'
      break;
    case 172:                       // 'order'
      consumeT(172);                // 'order'
      break;
    case 173:                       // 'ordered'
      consumeT(173);                // 'ordered'
      break;
    case 175:                       // 'parent'
      consumeT(175);                // 'parent'
      break;
    case 179:                       // 'preceding'
      consumeT(179);                // 'preceding'
      break;
    case 180:                       // 'preceding-sibling'
      consumeT(180);                // 'preceding-sibling'
      break;
    case 184:                       // 'rename'
      consumeT(184);                // 'rename'
      break;
    case 185:                       // 'replace'
      consumeT(185);                // 'replace'
      break;
    case 186:                       // 'return'
      consumeT(186);                // 'return'
      break;
    case 188:                       // 'satisfies'
      consumeT(188);                // 'satisfies'
      break;
    case 192:                       // 'self'
      consumeT(192);                // 'self'
      break;
    case 195:                       // 'some'
      consumeT(195);                // 'some'
      break;
    case 196:                       // 'stable'
      consumeT(196);                // 'stable'
      break;
    case 197:                       // 'start'
      consumeT(197);                // 'start'
      break;
    case 204:                       // 'to'
      consumeT(204);                // 'to'
      break;
    case 205:                       // 'transform'
      consumeT(205);                // 'transform'
      break;
    case 206:                       // 'treat'
      consumeT(206);                // 'treat'
      break;
    case 207:                       // 'try'
      consumeT(207);                // 'try'
      break;
    case 211:                       // 'union'
      consumeT(211);                // 'union'
      break;
    case 212:                       // 'unordered'
      consumeT(212);                // 'unordered'
      break;
    case 215:                       // 'validate'
      consumeT(215);                // 'validate'
      break;
    case 220:                       // 'where'
      consumeT(220);                // 'where'
      break;
    case 222:                       // 'with'
      consumeT(222);                // 'with'
      break;
    default:
      consumeT(223);                // 'xquery'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 17:                        // NCName^Token
      consume(17);                  // NCName^Token
      break;
    case 76:                        // 'after'
      consume(76);                  // 'after'
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 82:                        // 'as'
      consume(82);                  // 'as'
      break;
    case 83:                        // 'ascending'
      consume(83);                  // 'ascending'
      break;
    case 87:                        // 'before'
      consume(87);                  // 'before'
      break;
    case 90:                        // 'case'
      consume(90);                  // 'case'
      break;
    case 91:                        // 'cast'
      consume(91);                  // 'cast'
      break;
    case 92:                        // 'castable'
      consume(92);                  // 'castable'
      break;
    case 95:                        // 'collation'
      consume(95);                  // 'collation'
      break;
    case 101:                       // 'count'
      consume(101);                 // 'count'
      break;
    case 105:                       // 'default'
      consume(105);                 // 'default'
      break;
    case 109:                       // 'descending'
      consume(109);                 // 'descending'
      break;
    case 111:                       // 'div'
      consume(111);                 // 'div'
      break;
    case 115:                       // 'else'
      consume(115);                 // 'else'
      break;
    case 116:                       // 'empty'
      consume(116);                 // 'empty'
      break;
    case 119:                       // 'end'
      consume(119);                 // 'end'
      break;
    case 120:                       // 'eq'
      consume(120);                 // 'eq'
      break;
    case 122:                       // 'except'
      consume(122);                 // 'except'
      break;
    case 127:                       // 'for'
      consume(127);                 // 'for'
      break;
    case 129:                       // 'ge'
      consume(129);                 // 'ge'
      break;
    case 131:                       // 'group'
      consume(131);                 // 'group'
      break;
    case 133:                       // 'gt'
      consume(133);                 // 'gt'
      break;
    case 134:                       // 'idiv'
      consume(134);                 // 'idiv'
      break;
    case 141:                       // 'instance'
      consume(141);                 // 'instance'
      break;
    case 142:                       // 'intersect'
      consume(142);                 // 'intersect'
      break;
    case 143:                       // 'into'
      consume(143);                 // 'into'
      break;
    case 145:                       // 'is'
      consume(145);                 // 'is'
      break;
    case 150:                       // 'le'
      consume(150);                 // 'le'
      break;
    case 152:                       // 'let'
      consume(152);                 // 'let'
      break;
    case 153:                       // 'lt'
      consume(153);                 // 'lt'
      break;
    case 154:                       // 'map'
      consume(154);                 // 'map'
      break;
    case 156:                       // 'mod'
      consume(156);                 // 'mod'
      break;
    case 157:                       // 'modify'
      consume(157);                 // 'modify'
      break;
    case 161:                       // 'ne'
      consume(161);                 // 'ne'
      break;
    case 169:                       // 'only'
      consume(169);                 // 'only'
      break;
    case 171:                       // 'or'
      consume(171);                 // 'or'
      break;
    case 172:                       // 'order'
      consume(172);                 // 'order'
      break;
    case 186:                       // 'return'
      consume(186);                 // 'return'
      break;
    case 188:                       // 'satisfies'
      consume(188);                 // 'satisfies'
      break;
    case 196:                       // 'stable'
      consume(196);                 // 'stable'
      break;
    case 197:                       // 'start'
      consume(197);                 // 'start'
      break;
    case 204:                       // 'to'
      consume(204);                 // 'to'
      break;
    case 205:                       // 'transform'
      consume(205);                 // 'transform'
      break;
    case 206:                       // 'treat'
      consume(206);                 // 'treat'
      break;
    case 211:                       // 'union'
      consume(211);                 // 'union'
      break;
    case 220:                       // 'where'
      consume(220);                 // 'where'
      break;
    default:
      consume(222);                 // 'with'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 17:                        // NCName^Token
      consumeT(17);                 // NCName^Token
      break;
    case 76:                        // 'after'
      consumeT(76);                 // 'after'
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 82:                        // 'as'
      consumeT(82);                 // 'as'
      break;
    case 83:                        // 'ascending'
      consumeT(83);                 // 'ascending'
      break;
    case 87:                        // 'before'
      consumeT(87);                 // 'before'
      break;
    case 90:                        // 'case'
      consumeT(90);                 // 'case'
      break;
    case 91:                        // 'cast'
      consumeT(91);                 // 'cast'
      break;
    case 92:                        // 'castable'
      consumeT(92);                 // 'castable'
      break;
    case 95:                        // 'collation'
      consumeT(95);                 // 'collation'
      break;
    case 101:                       // 'count'
      consumeT(101);                // 'count'
      break;
    case 105:                       // 'default'
      consumeT(105);                // 'default'
      break;
    case 109:                       // 'descending'
      consumeT(109);                // 'descending'
      break;
    case 111:                       // 'div'
      consumeT(111);                // 'div'
      break;
    case 115:                       // 'else'
      consumeT(115);                // 'else'
      break;
    case 116:                       // 'empty'
      consumeT(116);                // 'empty'
      break;
    case 119:                       // 'end'
      consumeT(119);                // 'end'
      break;
    case 120:                       // 'eq'
      consumeT(120);                // 'eq'
      break;
    case 122:                       // 'except'
      consumeT(122);                // 'except'
      break;
    case 127:                       // 'for'
      consumeT(127);                // 'for'
      break;
    case 129:                       // 'ge'
      consumeT(129);                // 'ge'
      break;
    case 131:                       // 'group'
      consumeT(131);                // 'group'
      break;
    case 133:                       // 'gt'
      consumeT(133);                // 'gt'
      break;
    case 134:                       // 'idiv'
      consumeT(134);                // 'idiv'
      break;
    case 141:                       // 'instance'
      consumeT(141);                // 'instance'
      break;
    case 142:                       // 'intersect'
      consumeT(142);                // 'intersect'
      break;
    case 143:                       // 'into'
      consumeT(143);                // 'into'
      break;
    case 145:                       // 'is'
      consumeT(145);                // 'is'
      break;
    case 150:                       // 'le'
      consumeT(150);                // 'le'
      break;
    case 152:                       // 'let'
      consumeT(152);                // 'let'
      break;
    case 153:                       // 'lt'
      consumeT(153);                // 'lt'
      break;
    case 154:                       // 'map'
      consumeT(154);                // 'map'
      break;
    case 156:                       // 'mod'
      consumeT(156);                // 'mod'
      break;
    case 157:                       // 'modify'
      consumeT(157);                // 'modify'
      break;
    case 161:                       // 'ne'
      consumeT(161);                // 'ne'
      break;
    case 169:                       // 'only'
      consumeT(169);                // 'only'
      break;
    case 171:                       // 'or'
      consumeT(171);                // 'or'
      break;
    case 172:                       // 'order'
      consumeT(172);                // 'order'
      break;
    case 186:                       // 'return'
      consumeT(186);                // 'return'
      break;
    case 188:                       // 'satisfies'
      consumeT(188);                // 'satisfies'
      break;
    case 196:                       // 'stable'
      consumeT(196);                // 'stable'
      break;
    case 197:                       // 'start'
      consumeT(197);                // 'start'
      break;
    case 204:                       // 'to'
      consumeT(204);                // 'to'
      break;
    case 205:                       // 'transform'
      consumeT(205);                // 'transform'
      break;
    case 206:                       // 'treat'
      consumeT(206);                // 'treat'
      break;
    case 211:                       // 'union'
      consumeT(211);                // 'union'
      break;
    case 220:                       // 'where'
      consumeT(220);                // 'where'
      break;
    default:
      consumeT(222);                // 'with'
    }
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(ExistParser.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = l3; if (l2 != 0) {
      b2 = b3; e2 = e3; l3 = 0; }}
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = l3; if (l2 != 0) {
      b2 = b3; e2 = e3; l3 = 0; }}
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1; var l2W = l2;
    var b2W = b2; var e2W = e2;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;
    l3 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; l2 = l2W; if (l2 != 0) {
    b2 = b2W; e2 = e2W; }}
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(tokenSetId)
  {
    var code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 19)               // S^WS
      {
        if (code != 37)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = matchW(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 8) | l1;
  }

  function lookahead3W(tokenSetId)
  {
    if (l3 == 0)
    {
      l3 = matchW(tokenSetId);
      b3 = begin;
      e3 = end;
    }
    lk |= l3 << 16;
  }

  function lookahead1(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = match(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new thisParser.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var l3, b3, e3;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 0) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 0) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;

  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = ExistParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = ExistParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = ExistParser.MAP1[(c0 & 15) + ExistParser.MAP1[(c1 & 31) + ExistParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }

        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (ExistParser.MAP2[m] > c0) hi = m - 1;
          else if (ExistParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = ExistParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = ExistParser.TRANSITION[(i0 & 15) + ExistParser.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 8; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 8;
    }

    if (end > size) end = size;
    return (result & 255) - 1;
  }

}

ExistParser.XmlSerializer = function(log, indent)
{
  var input = null;
  var delayedTag = null;
  var hasChildElement = false;
  var depth = 0;

  this.reset = function(string)
  {
    log("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
    input = string;
    delayedTag = null;
    hasChildElement = false;
    depth = 0;
  };

  this.startNonterminal = function(tag, begin)
  {
    if (delayedTag != null)
    {
      log("<");
      log(delayedTag);
      log(">");
    }
    delayedTag = tag;
    if (indent)
    {
      log("\n");
      for (var i = 0; i < depth; ++i)
      {
        log("  ");
      }
    }
    hasChildElement = false;
    ++depth;
  };

  this.endNonterminal = function(tag, end)
  {
    --depth;
    if (delayedTag != null)
    {
      delayedTag = null;
      log("<");
      log(tag);
      log("/>");
    }
    else
    {
      if (indent)
      {
        if (hasChildElement)
        {
          log("\n");
          for (var i = 0; i < depth; ++i)
          {
            log("  ");
          }
        }
      }
      log("</");
      log(tag);
      log(">");
    }
    hasChildElement = true;
  };

  this.terminal = function(tag, begin, end)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    this.startNonterminal(tag, begin);
    characters(begin, end);
    this.endNonterminal(tag, end);
  };

  this.whitespace = function(begin, end)
  {
    characters(begin, end);
  };

  function characters(begin, end)
  {
    if (begin < end)
    {
      if (delayedTag != null)
      {
        log("<");
        log(delayedTag);
        log(">");
        delayedTag = null;
      }
      log(input.substring(begin, end)
               .replace(/&/g, "&amp;")
               .replace(/</g, "&lt;")
               .replace(/>/g, "&gt;"));
    }
  }
};

ExistParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : ExistParser.INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 232; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 2298 + s - 1;
    var i1 = i0 >> 1;
    var i2 = i1 >> 2;
    var f = ExistParser.EXPECTED[(i0 & 1) + ExistParser.EXPECTED[(i1 & 3) + ExistParser.EXPECTED[(i2 & 3) + ExistParser.EXPECTED[i2 >> 2]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(ExistParser.TOKEN[j]);
      }
    }
  }
  return set;
};

ExistParser.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new ExistParser.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new ExistParser.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
};

ExistParser.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  };
};

ExistParser.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  };
};

ExistParser.MAP0 =
[
  /*   0 */ 71, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 38, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
  /* 118 */ 62, 63, 64, 65, 66, 67, 68, 69, 38, 38
];

ExistParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 71, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,
  /* 371 */ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
  /* 398 */ 67, 68, 69, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 70, 38, 38,
  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
  /* 452 */ 70, 70, 70, 70
];

ExistParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
  /* 17 */ 38
];

ExistParser.INITIAL =
[
  /*   0 */ 1, 2, 3, 94212, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 8267, 76, 77, 78, 79, 80, 81,
  /*  81 */ 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
  /* 106 */ 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
  /* 127 */ 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
  /* 148 */ 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
  /* 169 */ 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 8376, 185, 8378, 8379, 8380, 189, 190,
  /* 190 */ 191, 8384, 8385, 8386, 8387, 8388, 197, 198, 8391, 8392, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
  /* 210 */ 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 8419, 8420, 8421
];

ExistParser.TRANSITION =
[
  /*     0 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*    15 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*    30 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*    45 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*    60 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*    75 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*    90 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   105 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   120 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   135 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   150 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   165 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   180 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   195 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   210 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   225 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   240 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   255 */ 18609, 18432, 18448, 18454, 18454, 18470, 18454, 18454, 18454, 18454, 18497, 18454, 18454, 18506, 18454,
  /*   270 */ 18481, 18522, 18609, 18609, 25115, 18609, 20656, 18609, 18609, 18609, 18547, 18558, 18609, 37726, 37732,
  /*   285 */ 20517, 19183, 18579, 38587, 18608, 18627, 18609, 18651, 20854, 30769, 18671, 18941, 18700, 38593, 18716,
  /*   300 */ 18734, 18752, 19987, 18718, 18736, 18754, 40271, 18609, 36203, 18609, 18609, 37367, 26470, 40589, 18770,
  /*   315 */ 18786, 18684, 40248, 40264, 18847, 18815, 19056, 40256, 18839, 21362, 20518, 21826, 19403, 28297, 18866,
  /*   330 */ 26914, 21746, 18891, 18927, 18957, 18979, 19001, 19023, 19045, 18963, 18985, 19007, 19029, 19929, 36922,
  /*   345 */ 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233, 19249, 19270, 19209, 19233, 19297, 19341, 19372,
  /*   360 */ 19392, 33832, 19435, 19479, 19498, 19517, 19482, 19501, 19193, 25174, 19544, 33361, 18906, 19560, 18911,
  /*   375 */ 19565, 19581, 19597, 19631, 19696, 19689, 19712, 19767, 19807, 19823, 19821, 19839, 19855, 19871, 19899,
  /*   390 */ 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696, 20026, 20040, 18609, 18609, 18609, 18609, 18609,
  /*   405 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   420 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   435 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   450 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   465 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   480 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   495 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   510 */ 18609, 18609, 20083, 18609, 18609, 18609, 24220, 18609, 18609, 18609, 18609, 20105, 20130, 20145, 20153,
  /*   525 */ 18609, 20184, 26970, 18609, 18609, 25115, 18609, 20656, 33409, 18609, 18609, 18547, 18558, 18609, 37726,
  /*   540 */ 37732, 20517, 19463, 18579, 38587, 18608, 18627, 18609, 18651, 20854, 30769, 18671, 18941, 18700, 38593,
  /*   555 */ 18716, 18734, 18752, 19987, 18718, 18736, 18754, 40271, 18609, 36203, 18609, 18609, 37367, 26470, 40589,
  /*   570 */ 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056, 40256, 18839, 21362, 20518, 21826, 19403, 28297,
  /*   585 */ 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001, 19023, 19045, 18963, 18985, 19007, 19029, 19929,
  /*   600 */ 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233, 19249, 19270, 19209, 19233, 19297, 19341,
  /*   615 */ 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482, 19501, 19193, 25174, 19544, 33361, 18906, 19560,
  /*   630 */ 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712, 19767, 19807, 19823, 19821, 19839, 19855, 19871,
  /*   645 */ 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696, 20026, 20040, 18609, 18609, 18609, 18609,
  /*   660 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   675 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   690 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   705 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   720 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   735 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   750 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   765 */ 18609, 18609, 18609, 20083, 20220, 18609, 18609, 27751, 18609, 18609, 38885, 38886, 20241, 38885, 18609,
  /*   780 */ 18609, 18875, 20266, 33324, 18609, 18609, 25115, 18609, 40366, 18609, 18609, 18609, 18547, 18558, 18609,
  /*   795 */ 37726, 37732, 20517, 19183, 20308, 38587, 18608, 18627, 18609, 18651, 20854, 30769, 18671, 18941, 18700,
  /*   810 */ 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754, 40271, 18609, 36203, 18609, 18609, 37367, 26470,
  /*   825 */ 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056, 40256, 18839, 21362, 20518, 21826, 19403,
  /*   840 */ 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001, 19023, 19045, 18963, 18985, 19007, 19029,
  /*   855 */ 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233, 19249, 19270, 19209, 19233, 19297,
  /*   870 */ 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482, 19501, 19193, 25174, 19544, 33361, 18906,
  /*   885 */ 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712, 19767, 19807, 19823, 19821, 19839, 19855,
  /*   900 */ 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696, 20026, 20040, 18609, 18609, 18609,
  /*   915 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   930 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   945 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   960 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   975 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   990 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1005 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1020 */ 18609, 18609, 18609, 18609, 20337, 19751, 18609, 18609, 26621, 18609, 18609, 19746, 18609, 20105, 20392,
  /*  1035 */ 30471, 20406, 20413, 20430, 26970, 18609, 18609, 30065, 18609, 39949, 18609, 18609, 18609, 18547, 18558,
  /*  1050 */ 18609, 37726, 37732, 20517, 19183, 20465, 38587, 18608, 18627, 18609, 18651, 20854, 30769, 18671, 18941,
  /*  1065 */ 18700, 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754, 40271, 18609, 36203, 18609, 18609, 37367,
  /*  1080 */ 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 20494, 20510, 40256, 18839, 21362, 20518, 21826,
  /*  1095 */ 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001, 19023, 19045, 18963, 18985, 19007,
  /*  1110 */ 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233, 19249, 19270, 19209, 19233,
  /*  1125 */ 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482, 19501, 19193, 25174, 19544, 33361,
  /*  1140 */ 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712, 19767, 19807, 19823, 19821, 19839,
  /*  1155 */ 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696, 20026, 20040, 18609, 18609,
  /*  1170 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1185 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1200 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1215 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1230 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1245 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1260 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1275 */ 18609, 18609, 18609, 18609, 18609, 20083, 36388, 18609, 18609, 23276, 20573, 18609, 34895, 34622, 20534,
  /*  1290 */ 18609, 34619, 36391, 20559, 20591, 26970, 18609, 18609, 25115, 18609, 20656, 18609, 18609, 18609, 18547,
  /*  1305 */ 18558, 18609, 37726, 37732, 20517, 19183, 18579, 38587, 18608, 18627, 18609, 18651, 20854, 30769, 18671,
  /*  1320 */ 18941, 18700, 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754, 40271, 18609, 36203, 18609, 18609,
  /*  1335 */ 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056, 40256, 18839, 21362, 20518,
  /*  1350 */ 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001, 19023, 19045, 18963, 18985,
  /*  1365 */ 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233, 19249, 19270, 19209,
  /*  1380 */ 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482, 19501, 19193, 25174, 19544,
  /*  1395 */ 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712, 19767, 19807, 19823, 19821,
  /*  1410 */ 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696, 20026, 20040, 18609,
  /*  1425 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1440 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1455 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1470 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1485 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1500 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1515 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1530 */ 18609, 18609, 18609, 18609, 18609, 18609, 20083, 18609, 18609, 18609, 24220, 20620, 18609, 18609, 35352,
  /*  1545 */ 20639, 37072, 18609, 18609, 20674, 20688, 26970, 18609, 18609, 25115, 18609, 20656, 18609, 18609, 18609,
  /*  1560 */ 18547, 18558, 18609, 37726, 37732, 20517, 19183, 18579, 38587, 18608, 18627, 18609, 18651, 20854, 30769,
  /*  1575 */ 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754, 40271, 18609, 36203, 18609,
  /*  1590 */ 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056, 40256, 18839, 21362,
  /*  1605 */ 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001, 19023, 19045, 18963,
  /*  1620 */ 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233, 19249, 19270,
  /*  1635 */ 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482, 19501, 19193, 25174,
  /*  1650 */ 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712, 19767, 19807, 19823,
  /*  1665 */ 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696, 20026, 20040,
  /*  1680 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1695 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1710 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1725 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1740 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1755 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1770 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1785 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20083, 18609, 18609, 18609, 24220, 18609, 18609, 18609,
  /*  1800 */ 18609, 20742, 18609, 18609, 18609, 18609, 18531, 23783, 18609, 18609, 25115, 18609, 20656, 18609, 18609,
  /*  1815 */ 18609, 18547, 18558, 18609, 37726, 37732, 20517, 19183, 18579, 38587, 18608, 18627, 18609, 18651, 20854,
  /*  1830 */ 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19645, 18718, 18736, 18754, 40271, 18609, 36203,
  /*  1845 */ 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056, 40256, 18839,
  /*  1860 */ 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001, 19023, 19045,
  /*  1875 */ 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233, 19249,
  /*  1890 */ 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482, 19501, 19193,
  /*  1905 */ 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712, 19767, 19807,
  /*  1920 */ 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696, 20026,
  /*  1935 */ 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1950 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1965 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1980 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1995 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2010 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2025 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2040 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20083, 20775, 18609, 18609, 28729, 18609, 18609,
  /*  2055 */ 22295, 22296, 20798, 22295, 18609, 18609, 33333, 20823, 31696, 18609, 18609, 25115, 18609, 20656, 20852,
  /*  2070 */ 18609, 18609, 18547, 18558, 18609, 37726, 37732, 20517, 19183, 20870, 38587, 18608, 18627, 18609, 18651,
  /*  2085 */ 20854, 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754, 40271, 18609,
  /*  2100 */ 36203, 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056, 40256,
  /*  2115 */ 18839, 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001, 19023,
  /*  2130 */ 19045, 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233,
  /*  2145 */ 19249, 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482, 19501,
  /*  2160 */ 19193, 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712, 19767,
  /*  2175 */ 19807, 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696,
  /*  2190 */ 20026, 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2205 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2220 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2235 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2250 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2265 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2280 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2295 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20083, 20919, 20988, 20988, 20953, 20984,
  /*  2310 */ 20988, 20928, 20989, 20944, 20969, 21018, 21005, 21027, 21043, 26970, 18609, 18609, 21092, 18609, 20656,
  /*  2325 */ 18609, 18609, 18609, 18547, 18558, 18609, 37726, 37732, 20517, 19183, 18579, 38587, 18608, 21114, 18609,
  /*  2340 */ 18651, 20854, 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754, 40271,
  /*  2355 */ 18609, 36203, 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056,
  /*  2370 */ 40256, 18839, 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001,
  /*  2385 */ 19023, 19045, 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209,
  /*  2400 */ 19233, 19249, 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482,
  /*  2415 */ 19501, 19193, 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712,
  /*  2430 */ 19767, 19807, 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003,
  /*  2445 */ 23696, 20026, 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2460 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2475 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2490 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2505 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2520 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2535 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2550 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20083, 20161, 18609, 18609, 25517,
  /*  2565 */ 35780, 18609, 20623, 18609, 21140, 20168, 21165, 21173, 21197, 21233, 26970, 18609, 18609, 31585, 18609,
  /*  2580 */ 20656, 18609, 18609, 18609, 18547, 18558, 18609, 37726, 37732, 20517, 19183, 18579, 38587, 18608, 36693,
  /*  2595 */ 18609, 18651, 20854, 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754,
  /*  2610 */ 40271, 18609, 36203, 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815,
  /*  2625 */ 19056, 40256, 18839, 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979,
  /*  2640 */ 19001, 19023, 19045, 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172,
  /*  2655 */ 19209, 19233, 19249, 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517,
  /*  2670 */ 19482, 19501, 19193, 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689,
  /*  2685 */ 19712, 19767, 19807, 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974,
  /*  2700 */ 20003, 23696, 20026, 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2715 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2730 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2745 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2760 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2775 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2790 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2805 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20083, 31150, 18609, 18609,
  /*  2820 */ 24220, 18609, 18609, 18609, 18609, 20105, 21269, 21282, 21290, 21306, 21320, 26970, 18609, 18609, 25115,
  /*  2835 */ 18609, 20656, 18609, 18609, 18609, 18547, 18558, 18609, 37726, 37732, 20517, 19183, 18579, 38587, 18608,
  /*  2850 */ 18627, 18609, 18651, 20854, 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19449, 18718, 18736,
  /*  2865 */ 18754, 40271, 18609, 36203, 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847,
  /*  2880 */ 18815, 21355, 40256, 18839, 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957,
  /*  2895 */ 18979, 19001, 19023, 19045, 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129,
  /*  2910 */ 19172, 19209, 19233, 19249, 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498,
  /*  2925 */ 19517, 19482, 19501, 19193, 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696,
  /*  2940 */ 19689, 19712, 19767, 19807, 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945,
  /*  2955 */ 19974, 20003, 23696, 20026, 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2970 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2985 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3000 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3015 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3030 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3045 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3060 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20083, 18609, 18609,
  /*  3075 */ 18609, 24220, 18609, 18609, 18609, 18609, 20105, 21378, 21429, 21437, 27258, 21392, 26970, 18609, 18609,
  /*  3090 */ 25115, 18609, 20656, 18609, 18609, 18609, 18547, 18558, 18609, 37726, 37732, 20517, 19183, 18579, 38587,
  /*  3105 */ 18608, 18627, 18609, 21461, 20854, 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19987, 18718,
  /*  3120 */ 18736, 18754, 40271, 18609, 36203, 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264,
  /*  3135 */ 18847, 18815, 19056, 40256, 18839, 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927,
  /*  3150 */ 18957, 18979, 19001, 19023, 19045, 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592,
  /*  3165 */ 19129, 19172, 19209, 19233, 19249, 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479,
  /*  3180 */ 19498, 19517, 19482, 19501, 19193, 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631,
  /*  3195 */ 19696, 19689, 19712, 19767, 19807, 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958,
  /*  3210 */ 19945, 19974, 20003, 23696, 20026, 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3225 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3240 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3255 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3270 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3285 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3300 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3315 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20083, 21686,
  /*  3330 */ 18609, 18609, 24220, 36911, 18609, 21683, 18609, 21482, 21497, 21524, 21532, 18609, 21508, 26970, 18609,
  /*  3345 */ 18609, 25115, 18609, 20656, 18609, 18609, 18609, 18547, 18558, 18609, 37726, 37732, 20517, 19183, 18579,
  /*  3360 */ 38587, 18608, 18627, 18609, 18651, 20854, 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19987,
  /*  3375 */ 18718, 18736, 18754, 40271, 18609, 36203, 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248,
  /*  3390 */ 40264, 18847, 18815, 19056, 40256, 18839, 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891,
  /*  3405 */ 18927, 18957, 18979, 19001, 19023, 19045, 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095,
  /*  3420 */ 18592, 19129, 19172, 19209, 19233, 19249, 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435,
  /*  3435 */ 19479, 19498, 19517, 19482, 19501, 19193, 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597,
  /*  3450 */ 19631, 19696, 19689, 19712, 19767, 19807, 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926,
  /*  3465 */ 19958, 19945, 19974, 20003, 23696, 20026, 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3480 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3495 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3510 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3525 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3540 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3555 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3570 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 21556,
  /*  3585 */ 18609, 18609, 18609, 24220, 18609, 18609, 18609, 18609, 20105, 21580, 21610, 21618, 38048, 21594, 26970,
  /*  3600 */ 18609, 18609, 25115, 18609, 20656, 18609, 18609, 18609, 36069, 31223, 18609, 30557, 26294, 21726, 28533,
  /*  3615 */ 21642, 18609, 18609, 30240, 21662, 21461, 21680, 18609, 26492, 35411, 31218, 31591, 25209, 25209, 25209,
  /*  3630 */ 37012, 21726, 21726, 21726, 28633, 18609, 18609, 18609, 18609, 38407, 21253, 21702, 36069, 35411, 35447,
  /*  3645 */ 25209, 25209, 25209, 25210, 21722, 21726, 21726, 21726, 29239, 26345, 21743, 18609, 18609, 18609, 30384,
  /*  3660 */ 26494, 35411, 25204, 25209, 25209, 25209, 33261, 21726, 21726, 21726, 21726, 21762, 18609, 18609, 18609,
  /*  3675 */ 27786, 26491, 35411, 25208, 21786, 25209, 33404, 21725, 21804, 21726, 30758, 18609, 18609, 21822, 26489,
  /*  3690 */ 37311, 25209, 37657, 22212, 21726, 30212, 33821, 18609, 18635, 26493, 25208, 22018, 21726, 33749, 18609,
  /*  3705 */ 31324, 39874, 21842, 21863, 38721, 18609, 19791, 21891, 31013, 32070, 21918, 36634, 37650, 21934, 29512,
  /*  3720 */ 21935, 21951, 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3735 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3750 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3765 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3780 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3795 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3810 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3825 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3840 */ 20083, 18609, 18609, 18609, 24220, 18609, 18609, 18609, 21540, 20105, 18609, 18609, 18609, 38825, 21981,
  /*  3855 */ 26970, 18609, 18609, 25115, 18609, 40446, 18609, 18609, 18609, 36069, 31223, 18609, 30557, 26294, 21726,
  /*  3870 */ 32847, 21642, 18609, 18609, 25119, 18609, 18651, 18609, 18609, 26492, 35411, 31218, 31591, 25209, 25209,
  /*  3885 */ 25209, 37012, 21726, 21726, 21726, 28155, 18609, 18609, 18609, 18609, 38407, 18609, 18609, 36069, 35411,
  /*  3900 */ 35447, 25209, 25209, 25209, 25210, 21722, 21726, 21726, 21726, 29239, 18609, 18609, 18609, 18609, 18609,
  /*  3915 */ 18609, 26494, 35411, 25204, 25209, 25209, 25209, 33261, 21726, 21726, 21726, 21726, 29246, 18609, 18609,
  /*  3930 */ 18609, 18609, 26491, 35411, 25208, 25209, 25209, 33404, 21725, 21726, 21726, 30758, 18609, 18609, 18609,
  /*  3945 */ 26489, 37311, 25209, 25209, 22212, 21726, 21726, 26082, 18609, 18609, 26493, 25208, 22018, 21726, 38725,
  /*  3960 */ 18609, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 28841, 21726, 32070, 22016, 31184, 29511, 31184,
  /*  3975 */ 29512, 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3990 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4005 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4020 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4035 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4050 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4065 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4080 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4095 */ 18609, 20083, 26483, 18609, 18609, 24220, 18609, 18609, 18609, 18609, 20105, 22062, 21124, 22097, 21122,
  /*  4110 */ 22132, 26970, 18609, 18609, 25115, 18609, 20656, 35012, 35718, 18609, 18547, 18558, 18609, 37726, 37732,
  /*  4125 */ 20517, 19183, 18579, 38587, 18608, 18627, 18609, 18651, 20854, 30769, 18671, 18941, 18700, 38593, 18716,
  /*  4140 */ 18734, 18752, 19987, 18718, 18736, 18754, 40271, 18609, 36203, 18609, 18609, 37367, 26470, 40589, 18770,
  /*  4155 */ 18786, 18684, 40248, 40264, 18847, 18815, 19056, 40256, 18839, 21362, 20518, 21826, 19403, 28297, 18866,
  /*  4170 */ 26914, 21746, 18891, 18927, 18957, 18979, 19001, 19023, 19045, 18963, 18985, 19007, 19029, 19929, 36922,
  /*  4185 */ 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233, 19249, 19270, 19209, 19233, 19297, 19341, 19372,
  /*  4200 */ 19392, 33832, 19435, 19479, 19498, 19517, 19482, 19501, 19193, 25174, 19544, 33361, 18906, 19560, 18911,
  /*  4215 */ 19565, 19581, 19597, 19631, 19696, 19689, 19712, 19767, 19807, 19823, 19821, 19839, 19855, 19871, 19899,
  /*  4230 */ 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696, 20026, 20040, 18609, 18609, 18609, 18609, 18609,
  /*  4245 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4260 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4275 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4290 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4305 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4320 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4335 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4350 */ 18609, 18609, 20083, 22167, 18609, 18609, 24220, 18609, 18609, 18609, 21564, 20105, 18563, 18609, 18609,
  /*  4365 */ 20807, 22186, 22977, 18609, 18609, 25115, 18609, 39366, 18609, 18609, 18609, 36069, 31223, 18609, 30557,
  /*  4380 */ 26294, 21726, 32033, 21642, 18609, 18609, 25119, 18609, 22234, 18609, 18609, 26492, 35411, 31218, 31591,
  /*  4395 */ 25209, 25209, 25209, 37012, 21726, 21726, 21726, 28155, 22267, 18609, 18609, 18609, 20449, 18609, 18609,
  /*  4410 */ 36069, 35411, 35447, 25209, 25209, 25209, 25210, 21722, 21726, 21726, 21726, 36156, 22288, 18609, 18609,
  /*  4425 */ 18609, 29675, 18609, 26494, 35411, 25204, 25209, 25209, 25209, 36987, 21726, 21726, 21726, 21726, 34682,
  /*  4440 */ 18609, 18609, 18609, 18609, 26491, 35411, 25208, 25209, 25209, 31131, 21725, 21726, 21726, 30758, 18609,
  /*  4455 */ 18609, 18609, 26489, 37311, 25209, 25209, 22312, 21726, 21726, 26082, 18609, 18609, 26493, 25208, 22018,
  /*  4470 */ 21726, 38725, 18609, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 28841, 21726, 32070, 22016, 31184,
  /*  4485 */ 29511, 31184, 29512, 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609,
  /*  4500 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4515 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4530 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4545 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4560 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4575 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4590 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4605 */ 18609, 18609, 18609, 20083, 22369, 18609, 18609, 29981, 19254, 18609, 18609, 22349, 22334, 22366, 22385,
  /*  4620 */ 22400, 18609, 22424, 25163, 18609, 18609, 22453, 18609, 20656, 18609, 18609, 18609, 18547, 18558, 18609,
  /*  4635 */ 37869, 22621, 22744, 23158, 18579, 38587, 18608, 22478, 18609, 18651, 20854, 30769, 18671, 18941, 18700,
  /*  4650 */ 19356, 23298, 22502, 22549, 22601, 22576, 22691, 23145, 23209, 18609, 36203, 18609, 18609, 37367, 26470,
  /*  4665 */ 40589, 18770, 18786, 18799, 37875, 22592, 22617, 22773, 22526, 23437, 23198, 22746, 22816, 21826, 19403,
  /*  4680 */ 28297, 18866, 26914, 21746, 18891, 18927, 22637, 23353, 19156, 23098, 22515, 23398, 22721, 22653, 22676,
  /*  4695 */ 22823, 36922, 19079, 38878, 19095, 18592, 19129, 22762, 23344, 22789, 23067, 22805, 22736, 22839, 22966,
  /*  4710 */ 19341, 19372, 19392, 33832, 22855, 22898, 22885, 22914, 22952, 23002, 22936, 25174, 19544, 33361, 19144,
  /*  4725 */ 22564, 22706, 23018, 19581, 19597, 23053, 23088, 22869, 22925, 19767, 23114, 23130, 23185, 23225, 23241,
  /*  4740 */ 23257, 23292, 22660, 23314, 22533, 23369, 23408, 23385, 23424, 23169, 23329, 23453, 18609, 18609, 18609,
  /*  4755 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4770 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4785 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4800 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4815 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4830 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4845 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4860 */ 18609, 18609, 18609, 18609, 20083, 36362, 18609, 18609, 24220, 23503, 18609, 18609, 18609, 23482, 23494,
  /*  4875 */ 23519, 23527, 18609, 23551, 26970, 18609, 18609, 25115, 18609, 20656, 18609, 18609, 18609, 18547, 18558,
  /*  4890 */ 18609, 37726, 37732, 20517, 19183, 18579, 38587, 18608, 18627, 18609, 18651, 20854, 30769, 18671, 18941,
  /*  4905 */ 18700, 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754, 40271, 18609, 36203, 18609, 18609, 28090,
  /*  4920 */ 23622, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056, 40256, 18839, 21362, 18850, 19727,
  /*  4935 */ 19403, 28297, 18866, 27239, 21746, 18891, 18927, 18957, 18979, 19001, 19023, 19045, 18963, 18985, 19007,
  /*  4950 */ 19029, 19217, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233, 23658, 19270, 19209, 19233,
  /*  4965 */ 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 23674, 19482, 19501, 19193, 25174, 19544, 33361,
  /*  4980 */ 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712, 19767, 19807, 19823, 19821, 19839,
  /*  4995 */ 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696, 20026, 20040, 18609, 18609,
  /*  5010 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5025 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5040 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5055 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5070 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5085 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5100 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5115 */ 18609, 18609, 18609, 18609, 18609, 20083, 18609, 18609, 18609, 24220, 18609, 18609, 18609, 18609, 38989,
  /*  5130 */ 23712, 23726, 23734, 24935, 23758, 26970, 18609, 18609, 25115, 18609, 20656, 18609, 18609, 23808, 18547,
  /*  5145 */ 18558, 18609, 37726, 37732, 20517, 19281, 18579, 38587, 18608, 18627, 18609, 18651, 20854, 30769, 18671,
  /*  5160 */ 18941, 18700, 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754, 40271, 18609, 36203, 18609, 18609,
  /*  5175 */ 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056, 40256, 18839, 21362, 20518,
  /*  5190 */ 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001, 19023, 19045, 18963, 18985,
  /*  5205 */ 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233, 19249, 19270, 19209,
  /*  5220 */ 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482, 19501, 19193, 25174, 19544,
  /*  5235 */ 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712, 19767, 19807, 19823, 19821,
  /*  5250 */ 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696, 20026, 20040, 18609,
  /*  5265 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5280 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5295 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5310 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5325 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5340 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5355 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5370 */ 18609, 18609, 18609, 18609, 18609, 18609, 23825, 18609, 23838, 18609, 24220, 18609, 18609, 18609, 18609,
  /*  5385 */ 20105, 23855, 23870, 23878, 18609, 23902, 30412, 18609, 18609, 25115, 18609, 20656, 18609, 39787, 23942,
  /*  5400 */ 18547, 18558, 18609, 37726, 37732, 20517, 19528, 18579, 38587, 18608, 18627, 18609, 18651, 20854, 30769,
  /*  5415 */ 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754, 40271, 18609, 36203, 18609,
  /*  5430 */ 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056, 40256, 18839, 21362,
  /*  5445 */ 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001, 19023, 19045, 18963,
  /*  5460 */ 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233, 19249, 19270,
  /*  5475 */ 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482, 19501, 19193, 25174,
  /*  5490 */ 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712, 19767, 19807, 19823,
  /*  5505 */ 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696, 20026, 20040,
  /*  5520 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5535 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5550 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5565 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5580 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5595 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5610 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5625 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 23961, 25239, 18609, 18609, 24220, 18609, 18609, 18609,
  /*  5640 */ 18609, 20105, 23996, 24024, 24032, 18609, 24008, 31306, 18609, 18609, 25115, 18609, 20656, 18609, 18609,
  /*  5655 */ 24048, 18547, 18558, 18609, 37726, 37732, 20517, 19183, 24067, 38587, 18608, 18627, 18609, 18651, 20854,
  /*  5670 */ 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754, 40271, 18609, 36203,
  /*  5685 */ 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056, 40256, 18839,
  /*  5700 */ 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001, 19023, 19045,
  /*  5715 */ 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233, 19249,
  /*  5730 */ 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482, 19501, 19193,
  /*  5745 */ 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712, 19767, 19807,
  /*  5760 */ 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696, 20026,
  /*  5775 */ 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5790 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5805 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5820 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5835 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5850 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5865 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5880 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 24096, 18609, 18609, 18609, 24220, 25765, 18609,
  /*  5895 */ 18609, 18609, 20105, 18609, 24112, 18609, 28035, 24135, 26970, 18609, 18609, 25115, 18609, 20656, 25441,
  /*  5910 */ 18609, 18609, 18547, 18558, 18609, 37726, 37732, 20517, 19673, 18579, 38587, 18608, 18627, 18609, 18651,
  /*  5925 */ 20854, 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754, 40271, 18609,
  /*  5940 */ 36203, 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056, 40256,
  /*  5955 */ 18839, 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001, 19023,
  /*  5970 */ 19045, 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233,
  /*  5985 */ 19249, 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482, 19501,
  /*  6000 */ 19193, 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712, 19767,
  /*  6015 */ 19807, 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696,
  /*  6030 */ 20026, 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6045 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6060 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6075 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6090 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6105 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6120 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6135 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20083, 18609, 18609, 18609, 24220, 18609,
  /*  6150 */ 18609, 18609, 18609, 20105, 18609, 18609, 18609, 39013, 24164, 26970, 18609, 18609, 25115, 18609, 20656,
  /*  6165 */ 18609, 18609, 18609, 18547, 18558, 18609, 37726, 37732, 20517, 19183, 18579, 38587, 18608, 18627, 18609,
  /*  6180 */ 18651, 20854, 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754, 40271,
  /*  6195 */ 18609, 36203, 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056,
  /*  6210 */ 40256, 18839, 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001,
  /*  6225 */ 19023, 19045, 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209,
  /*  6240 */ 19233, 19249, 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482,
  /*  6255 */ 19501, 19193, 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712,
  /*  6270 */ 19767, 19807, 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003,
  /*  6285 */ 23696, 20026, 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6300 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6315 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6330 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6345 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6360 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6375 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6390 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25376, 18609, 18609, 18609, 24220,
  /*  6405 */ 18609, 18609, 18609, 18609, 20105, 26214, 18609, 24670, 22038, 31354, 19104, 18609, 18609, 25115, 18609,
  /*  6420 */ 18609, 18609, 18609, 18609, 36069, 31223, 18609, 30557, 26294, 21726, 28533, 21642, 18609, 18609, 25119,
  /*  6435 */ 18609, 18609, 18609, 18609, 26492, 35411, 31218, 25245, 25209, 25209, 25209, 38274, 21726, 21726, 21726,
  /*  6450 */ 28155, 18609, 18609, 18609, 18609, 30690, 18609, 18609, 36069, 35411, 35447, 25209, 25209, 25209, 25210,
  /*  6465 */ 24193, 21726, 21726, 21726, 29239, 24213, 18609, 18609, 18609, 29675, 18609, 26494, 35411, 25204, 25209,
  /*  6480 */ 25209, 25209, 33261, 21726, 21726, 21726, 21726, 34682, 18609, 18609, 18609, 23269, 26491, 35411, 25208,
  /*  6495 */ 25209, 25209, 25345, 21725, 21726, 21726, 30758, 18609, 18609, 18609, 26489, 37311, 25209, 25209, 22312,
  /*  6510 */ 21726, 21726, 26082, 18609, 32989, 26493, 25208, 22018, 21726, 38725, 18609, 18609, 37308, 25209, 22042,
  /*  6525 */ 38721, 18609, 19791, 28841, 21726, 32070, 22016, 31184, 29511, 31184, 29512, 21935, 22034, 26798, 22038,
  /*  6540 */ 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6555 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6570 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6585 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6600 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6615 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6630 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6645 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25376, 18609, 18609, 18609,
  /*  6660 */ 24220, 18609, 18609, 18609, 18609, 20105, 26214, 18609, 24670, 22038, 31354, 19104, 18609, 18609, 25115,
  /*  6675 */ 18609, 18609, 18609, 18609, 18609, 36069, 31223, 18609, 30557, 26294, 21726, 28533, 21642, 18609, 18609,
  /*  6690 */ 25119, 18609, 18609, 18609, 18609, 26492, 35411, 31218, 25245, 25209, 25209, 25209, 38274, 21726, 21726,
  /*  6705 */ 21726, 28155, 18609, 18609, 18609, 18609, 30690, 18609, 18609, 36069, 35411, 35447, 25209, 25209, 25209,
  /*  6720 */ 25210, 24193, 21726, 21726, 21726, 29239, 24213, 18609, 18609, 18609, 29675, 18609, 26494, 35411, 25204,
  /*  6735 */ 25209, 25209, 25209, 33261, 21726, 21726, 21726, 21726, 34682, 18609, 18609, 18609, 18609, 26491, 35411,
  /*  6750 */ 25208, 25209, 25209, 25345, 21725, 21726, 21726, 30758, 18609, 18609, 18609, 26489, 37311, 25209, 25209,
  /*  6765 */ 22312, 21726, 21726, 26082, 18609, 18609, 26493, 25208, 22018, 21726, 38725, 18609, 18609, 37308, 25209,
  /*  6780 */ 22042, 38721, 18609, 19791, 28841, 21726, 32070, 22016, 31184, 29511, 31184, 29512, 21935, 22034, 26798,
  /*  6795 */ 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6810 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6825 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6840 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6855 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6870 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6885 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6900 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25376, 18609, 18609,
  /*  6915 */ 18609, 24220, 18609, 18609, 18609, 18609, 20105, 26214, 18609, 24670, 22038, 31354, 19104, 18609, 18609,
  /*  6930 */ 25115, 18609, 18609, 18609, 18609, 18609, 36069, 31223, 18609, 30557, 26294, 21726, 28533, 21642, 18609,
  /*  6945 */ 18609, 25119, 18609, 18609, 18609, 18609, 26492, 35411, 31218, 25245, 25209, 25209, 25209, 38274, 21726,
  /*  6960 */ 21726, 21726, 28155, 18609, 18609, 18609, 18609, 30690, 28764, 18609, 36069, 35411, 35447, 25209, 25209,
  /*  6975 */ 25209, 25210, 24193, 21726, 21726, 21726, 29239, 24213, 18609, 18609, 18609, 29675, 18609, 26494, 35411,
  /*  6990 */ 25204, 25209, 25209, 25209, 33261, 21726, 21726, 21726, 21726, 34682, 18609, 18609, 18609, 18609, 26491,
  /*  7005 */ 35411, 25208, 25209, 25209, 25345, 21725, 21726, 21726, 30758, 18609, 18609, 18609, 26489, 37311, 25209,
  /*  7020 */ 25209, 22312, 21726, 21726, 26082, 18609, 18609, 26493, 25208, 22018, 21726, 38725, 18609, 18609, 37308,
  /*  7035 */ 25209, 22042, 38721, 18609, 19791, 28841, 21726, 32070, 22016, 31184, 29511, 31184, 29512, 21935, 22034,
  /*  7050 */ 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7065 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7080 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7095 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7110 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7125 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7140 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7155 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25376, 18609,
  /*  7170 */ 18609, 18609, 24220, 18609, 18609, 18609, 18609, 20105, 26214, 18609, 24670, 22038, 31354, 19104, 18609,
  /*  7185 */ 18609, 25115, 18609, 18609, 18609, 18609, 18609, 36069, 31223, 18609, 30557, 26294, 21726, 28533, 21642,
  /*  7200 */ 18609, 18609, 25119, 18609, 18609, 18609, 18609, 26492, 35411, 31218, 25245, 25209, 25209, 25209, 38274,
  /*  7215 */ 21726, 21726, 21726, 28155, 18609, 18609, 18609, 18609, 30690, 18609, 18609, 36069, 35411, 35447, 25209,
  /*  7230 */ 25209, 25209, 25210, 24193, 21726, 21726, 21726, 29239, 24213, 18609, 18609, 18609, 29675, 24236, 26494,
  /*  7245 */ 35411, 25204, 25209, 25209, 25209, 33261, 21726, 21726, 21726, 21726, 34682, 18609, 18609, 18609, 18609,
  /*  7260 */ 26491, 35411, 25208, 25209, 25209, 25345, 21725, 21726, 21726, 30758, 18609, 18609, 18609, 26489, 37311,
  /*  7275 */ 25209, 25209, 22312, 21726, 21726, 26082, 18609, 18609, 26493, 25208, 22018, 21726, 38725, 18609, 18609,
  /*  7290 */ 37308, 25209, 22042, 38721, 18609, 19791, 28841, 21726, 32070, 22016, 31184, 29511, 31184, 29512, 21935,
  /*  7305 */ 22034, 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7320 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7335 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7350 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7365 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7380 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7395 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7410 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25376,
  /*  7425 */ 18609, 18609, 18609, 24220, 18609, 18609, 18609, 18609, 20105, 26214, 18609, 24670, 22038, 31354, 19104,
  /*  7440 */ 18609, 18609, 25115, 18609, 22242, 18609, 18609, 18609, 36069, 31223, 18609, 30557, 26294, 21726, 28533,
  /*  7455 */ 21642, 18609, 18609, 25119, 18609, 22247, 18609, 18609, 26492, 35411, 31218, 25245, 25209, 25209, 25209,
  /*  7470 */ 38274, 21726, 21726, 21726, 28155, 18609, 18609, 18609, 18609, 30690, 18609, 18609, 36069, 35411, 35447,
  /*  7485 */ 25209, 25209, 25209, 25210, 24193, 21726, 21726, 21726, 29239, 24213, 18609, 18609, 18609, 29675, 18609,
  /*  7500 */ 26494, 35411, 25204, 25209, 25209, 25209, 33261, 21726, 21726, 21726, 21726, 34682, 18609, 18609, 18609,
  /*  7515 */ 18609, 26491, 35411, 25208, 25209, 25209, 25345, 21725, 21726, 21726, 30758, 18609, 18609, 18609, 26489,
  /*  7530 */ 37311, 25209, 25209, 22312, 21726, 21726, 26082, 18609, 18609, 26493, 25208, 22018, 21726, 38725, 18609,
  /*  7545 */ 18609, 37308, 25209, 22042, 38721, 18609, 19791, 28841, 21726, 32070, 22016, 31184, 29511, 31184, 29512,
  /*  7560 */ 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7575 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7590 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7605 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7620 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7635 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7650 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7665 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7680 */ 25376, 18609, 18609, 18609, 24220, 18609, 18609, 18609, 18609, 20105, 26214, 18609, 24670, 22038, 31354,
  /*  7695 */ 19104, 18609, 18609, 25115, 18609, 18609, 18609, 18609, 18609, 36069, 31223, 18609, 30557, 26294, 21726,
  /*  7710 */ 28533, 21642, 18609, 18609, 25119, 18609, 18609, 18609, 18609, 26492, 35411, 31218, 25245, 25209, 25209,
  /*  7725 */ 25209, 38274, 21726, 21726, 21726, 28155, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 36069, 35411,
  /*  7740 */ 35447, 25209, 25209, 25209, 25210, 24193, 21726, 21726, 21726, 29239, 18609, 18609, 18609, 18609, 18609,
  /*  7755 */ 18609, 26494, 35411, 25204, 25209, 25209, 25209, 33261, 21726, 21726, 21726, 21726, 29246, 18609, 18609,
  /*  7770 */ 18609, 18609, 26491, 35411, 25208, 25209, 25209, 33404, 21725, 21726, 21726, 30758, 18609, 18609, 18609,
  /*  7785 */ 26489, 37311, 25209, 25209, 22212, 21726, 21726, 26082, 18609, 18609, 26493, 25208, 22018, 21726, 38725,
  /*  7800 */ 18609, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 28841, 21726, 32070, 22016, 31184, 29511, 31184,
  /*  7815 */ 29512, 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7830 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7845 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7860 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7875 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7890 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7905 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7920 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7935 */ 18609, 25376, 18609, 18609, 18609, 24220, 18609, 18609, 18609, 18609, 20105, 26214, 18609, 24670, 22038,
  /*  7950 */ 31354, 19104, 18609, 18609, 25115, 18609, 18609, 18609, 18609, 18609, 36069, 31223, 18609, 30557, 26294,
  /*  7965 */ 21726, 27145, 21642, 18609, 18609, 25119, 18609, 18609, 18609, 18609, 26492, 35411, 31218, 25245, 25209,
  /*  7980 */ 25209, 25209, 38274, 21726, 21726, 21726, 28155, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 36069,
  /*  7995 */ 35411, 35447, 25209, 25209, 25209, 25210, 24193, 21726, 21726, 21726, 29239, 18609, 18609, 18609, 18609,
  /*  8010 */ 18609, 18609, 26494, 35411, 25204, 25209, 25209, 25209, 33261, 21726, 21726, 21726, 21726, 29246, 18609,
  /*  8025 */ 18609, 18609, 18609, 26491, 35411, 25208, 25209, 25209, 33404, 21725, 21726, 21726, 30758, 18609, 18609,
  /*  8040 */ 18609, 26489, 37311, 25209, 25209, 22212, 21726, 21726, 26082, 18609, 18609, 26493, 25208, 22018, 21726,
  /*  8055 */ 38725, 18609, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 28841, 21726, 32070, 22016, 31184, 29511,
  /*  8070 */ 31184, 29512, 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609, 18609,
  /*  8085 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8100 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8115 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8130 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8145 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8160 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8175 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8190 */ 18609, 18609, 25376, 18609, 18609, 18609, 24220, 18609, 18609, 18609, 18609, 20105, 26214, 18609, 24670,
  /*  8205 */ 22038, 31844, 19104, 18609, 18609, 25115, 18609, 18609, 18609, 18609, 18609, 36069, 31223, 18609, 30557,
  /*  8220 */ 26294, 21726, 28533, 21642, 18609, 18609, 25119, 18609, 18609, 18609, 18609, 26492, 35411, 31218, 25245,
  /*  8235 */ 25209, 25209, 25209, 38274, 21726, 21726, 21726, 28155, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8250 */ 36069, 35411, 35447, 25209, 25209, 25209, 25210, 24193, 21726, 21726, 21726, 29239, 18609, 18609, 18609,
  /*  8265 */ 18609, 18609, 18609, 26494, 35411, 25204, 25209, 25209, 25209, 33261, 21726, 21726, 21726, 21726, 29246,
  /*  8280 */ 18609, 18609, 18609, 18609, 26491, 35411, 25208, 25209, 25209, 33404, 21725, 21726, 21726, 30758, 18609,
  /*  8295 */ 18609, 18609, 26489, 37311, 25209, 25209, 22212, 21726, 21726, 26082, 18609, 18609, 26493, 25208, 22018,
  /*  8310 */ 21726, 38725, 18609, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 28841, 21726, 32070, 22016, 31184,
  /*  8325 */ 29511, 31184, 29512, 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609,
  /*  8340 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8355 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8370 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8385 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8400 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8415 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8430 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8445 */ 18609, 18609, 18609, 25376, 18609, 18609, 18609, 24220, 18609, 18609, 18609, 18609, 24256, 26214, 18609,
  /*  8460 */ 24670, 22038, 31354, 19104, 18609, 18609, 25115, 18609, 18609, 18609, 18609, 18609, 36069, 31223, 18609,
  /*  8475 */ 30557, 26294, 21726, 28533, 21642, 18609, 18609, 25119, 18609, 18609, 39584, 18609, 26492, 35411, 31218,
  /*  8490 */ 25245, 25209, 25209, 25209, 38274, 21726, 21726, 21726, 28155, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8505 */ 18609, 36069, 35411, 35447, 25209, 25209, 25209, 25210, 24193, 21726, 21726, 21726, 29239, 18609, 18609,
  /*  8520 */ 18609, 18609, 18609, 18609, 26494, 35411, 25204, 25209, 25209, 25209, 33261, 21726, 21726, 21726, 21726,
  /*  8535 */ 29246, 18609, 18609, 18609, 18609, 26491, 35411, 25208, 25209, 25209, 33404, 21725, 21726, 21726, 30758,
  /*  8550 */ 18609, 18609, 18609, 26489, 37311, 25209, 25209, 22212, 21726, 21726, 26082, 18609, 18609, 26493, 25208,
  /*  8565 */ 22018, 21726, 38725, 18609, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 28841, 21726, 32070, 22016,
  /*  8580 */ 31184, 29511, 31184, 29512, 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609,
  /*  8595 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8610 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8625 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8640 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8655 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8670 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8685 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8700 */ 18609, 18609, 18609, 18609, 25376, 18609, 18609, 18609, 24220, 18609, 18609, 18609, 18609, 20105, 26214,
  /*  8715 */ 18609, 24799, 24291, 24305, 19104, 18609, 18609, 25115, 18609, 18609, 18609, 18609, 18609, 36069, 31223,
  /*  8730 */ 18609, 30557, 26294, 21726, 28533, 21642, 18609, 18609, 25119, 18609, 18609, 18609, 18609, 26492, 35411,
  /*  8745 */ 31218, 25245, 25209, 25209, 25209, 38274, 21726, 21726, 21726, 28155, 18609, 18609, 18609, 18609, 18609,
  /*  8760 */ 18609, 18609, 36069, 35411, 35447, 25209, 25209, 25209, 25210, 24193, 21726, 21726, 21726, 29239, 18609,
  /*  8775 */ 18609, 18609, 18609, 18609, 18609, 26494, 35411, 25204, 25209, 25209, 25209, 33261, 21726, 21726, 21726,
  /*  8790 */ 21726, 29246, 18609, 18609, 18609, 18609, 26491, 35411, 25208, 25209, 25209, 33404, 21725, 21726, 21726,
  /*  8805 */ 30758, 18609, 18609, 18609, 26489, 37311, 25209, 25209, 22212, 21726, 21726, 26082, 18609, 18609, 26493,
  /*  8820 */ 25208, 22018, 21726, 38725, 18609, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 28841, 21726, 32070,
  /*  8835 */ 22016, 31184, 29511, 31184, 29512, 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609,
  /*  8850 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8865 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8880 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8895 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8910 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8925 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8940 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8955 */ 18609, 18609, 18609, 18609, 18609, 25376, 18609, 18609, 18609, 24220, 18609, 18609, 18609, 18609, 20105,
  /*  8970 */ 26214, 18609, 24670, 22038, 31354, 19104, 18609, 18609, 25115, 18609, 18609, 18609, 18609, 18609, 36069,
  /*  8985 */ 31223, 18609, 30557, 26294, 21726, 28533, 21642, 18609, 18609, 25119, 18609, 18609, 18609, 18609, 26492,
  /*  9000 */ 35411, 31218, 25245, 25209, 25209, 25209, 38274, 21726, 21726, 21726, 28155, 18609, 18609, 18609, 18609,
  /*  9015 */ 18609, 18609, 18609, 36069, 35411, 35447, 25209, 25209, 25209, 25210, 24193, 21726, 21726, 21726, 29239,
  /*  9030 */ 18609, 18609, 18609, 18609, 18609, 18609, 26494, 35411, 25204, 25209, 25209, 25209, 33261, 21726, 21726,
  /*  9045 */ 21726, 21726, 29246, 18609, 18609, 18609, 18609, 26491, 35411, 25208, 25209, 25209, 33404, 21725, 21726,
  /*  9060 */ 21726, 30758, 18609, 18609, 40192, 26489, 37311, 25209, 25209, 22212, 21726, 21726, 26082, 18609, 18609,
  /*  9075 */ 26493, 25208, 22018, 21726, 38725, 18609, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 28841, 21726,
  /*  9090 */ 32070, 22016, 31184, 29511, 31184, 29512, 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063, 18609,
  /*  9105 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9120 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9135 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9150 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9165 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9180 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9195 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9210 */ 18609, 18609, 18609, 18609, 18609, 18609, 24367, 18609, 18609, 18609, 24220, 18609, 18609, 18609, 18609,
  /*  9225 */ 20105, 26214, 18609, 24670, 22038, 31354, 19104, 18609, 18609, 25115, 18609, 18609, 18609, 18609, 18609,
  /*  9240 */ 36069, 31223, 18609, 30557, 26294, 21726, 28533, 21642, 18609, 18609, 25119, 18609, 18609, 18609, 18609,
  /*  9255 */ 26492, 35411, 31218, 25245, 25209, 25209, 25209, 38274, 21726, 21726, 21726, 28155, 18609, 18609, 18609,
  /*  9270 */ 18609, 18609, 18609, 18609, 36069, 35411, 35447, 25209, 25209, 25209, 25210, 24193, 21726, 21726, 21726,
  /*  9285 */ 29239, 18609, 18609, 18609, 18609, 18609, 18609, 26494, 35411, 25204, 25209, 25209, 25209, 33261, 21726,
  /*  9300 */ 21726, 21726, 21726, 29246, 18609, 18609, 18609, 18609, 26491, 35411, 25208, 25209, 25209, 33404, 21725,
  /*  9315 */ 21726, 21726, 30758, 18609, 18609, 18609, 26489, 37311, 25209, 25209, 22212, 21726, 21726, 26082, 18609,
  /*  9330 */ 18609, 26493, 25208, 22018, 21726, 38725, 18609, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 28841,
  /*  9345 */ 21726, 32070, 22016, 31184, 29511, 31184, 29512, 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063,
  /*  9360 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9375 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9390 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9405 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9420 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9435 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9450 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9465 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20083, 18609, 18609, 18609, 24220, 18609, 18609, 18609,
  /*  9480 */ 18609, 20105, 24389, 20360, 20368, 20360, 24424, 26970, 18609, 18609, 25115, 18609, 20656, 18609, 18609,
  /*  9495 */ 18609, 18547, 18558, 18609, 37726, 37732, 20517, 19183, 18579, 38587, 18608, 18627, 18609, 18651, 24459,
  /*  9510 */ 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754, 20010, 18609, 36203,
  /*  9525 */ 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056, 40256, 18839,
  /*  9540 */ 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001, 19023, 19045,
  /*  9555 */ 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233, 19249,
  /*  9570 */ 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482, 19501, 19193,
  /*  9585 */ 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 24481, 19631, 19696, 19689, 19712, 19767, 19807,
  /*  9600 */ 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696, 20026,
  /*  9615 */ 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9630 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9645 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9660 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9675 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9690 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9705 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9720 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20083, 18609, 18609, 18609, 24220, 18609, 18609,
  /*  9735 */ 18609, 18609, 20105, 18609, 18609, 18609, 18609, 18531, 26970, 18609, 18609, 25115, 18609, 20656, 18609,
  /*  9750 */ 18609, 18609, 18547, 18558, 18609, 37726, 37732, 20517, 19183, 18579, 38587, 18608, 18627, 18609, 18651,
  /*  9765 */ 20854, 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754, 40271, 18609,
  /*  9780 */ 36203, 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056, 40256,
  /*  9795 */ 18839, 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001, 19023,
  /*  9810 */ 19045, 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233,
  /*  9825 */ 19249, 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482, 19501,
  /*  9840 */ 19193, 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712, 19767,
  /*  9855 */ 19807, 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696,
  /*  9870 */ 20026, 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9885 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9900 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9915 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9930 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9945 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9960 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9975 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 24515, 24550, 18609, 18609, 24220, 19414,
  /*  9990 */ 18609, 18609, 18609, 24568, 19419, 24593, 24601, 21706, 24625, 24661, 18609, 18609, 25115, 18609, 20656,
  /* 10005 */ 18609, 18609, 18609, 18547, 18558, 18609, 37726, 37732, 20517, 19183, 24686, 38587, 18608, 18627, 18609,
  /* 10020 */ 18651, 20854, 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754, 40271,
  /* 10035 */ 18609, 36203, 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056,
  /* 10050 */ 40256, 18839, 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001,
  /* 10065 */ 19023, 19045, 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209,
  /* 10080 */ 19233, 19249, 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482,
  /* 10095 */ 19501, 19193, 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712,
  /* 10110 */ 19767, 19807, 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003,
  /* 10125 */ 23696, 20026, 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10140 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10155 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10170 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10185 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10200 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10215 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10230 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 24715, 24737, 18609, 18609, 24220,
  /* 10245 */ 18609, 18609, 18609, 18609, 20105, 18609, 18609, 18609, 35678, 24755, 24790, 18609, 18609, 25115, 18609,
  /* 10260 */ 20656, 24815, 18609, 18609, 18547, 18558, 18609, 37726, 37732, 20517, 23685, 24837, 38587, 18608, 18627,
  /* 10275 */ 18609, 18651, 20854, 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754,
  /* 10290 */ 40271, 18609, 36203, 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815,
  /* 10305 */ 19056, 40256, 18839, 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979,
  /* 10320 */ 19001, 19023, 19045, 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172,
  /* 10335 */ 19209, 19233, 19249, 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517,
  /* 10350 */ 19482, 19501, 19193, 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689,
  /* 10365 */ 19712, 19767, 19807, 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974,
  /* 10380 */ 20003, 23696, 20026, 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10395 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10410 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10425 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10440 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10455 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10470 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10485 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25376, 18609, 24965, 18609,
  /* 10500 */ 24220, 21646, 24891, 21644, 24910, 24951, 24983, 24998, 25007, 25023, 25037, 26979, 25066, 25084, 28595,
  /* 10515 */ 18609, 34042, 25100, 25137, 37638, 25190, 25226, 32892, 25261, 25277, 25305, 25361, 25398, 18609, 35701,
  /* 10530 */ 25422, 18609, 18609, 25457, 25474, 26492, 35411, 35440, 22199, 25209, 25209, 37130, 38274, 21726, 21726,
  /* 10545 */ 27958, 34528, 18609, 25494, 25510, 25533, 30690, 18609, 18609, 25553, 35412, 35447, 39134, 25209, 35553,
  /* 10560 */ 28564, 25588, 25608, 21726, 25626, 25682, 25718, 18609, 25734, 18609, 25752, 29738, 25787, 27843, 25829,
  /* 10575 */ 25859, 25877, 25896, 33261, 28661, 27505, 29780, 21726, 26166, 25915, 25935, 26142, 34933, 26491, 35411,
  /* 10590 */ 25208, 25209, 28448, 25954, 21725, 21726, 32482, 25989, 26016, 24437, 18609, 26489, 37311, 25209, 26040,
  /* 10605 */ 22312, 27163, 21726, 26082, 26058, 18609, 26493, 29086, 34674, 38716, 26075, 18609, 18609, 37308, 25209,
  /* 10620 */ 22042, 38721, 18609, 19791, 28841, 21726, 32070, 22016, 36668, 26102, 26598, 26124, 31185, 26158, 36584,
  /* 10635 */ 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10650 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10665 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10680 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10695 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10710 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10725 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10740 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25376, 18609, 26182,
  /* 10755 */ 18609, 24220, 18609, 22077, 18609, 18609, 26203, 23926, 18609, 32569, 26239, 26253, 19104, 18609, 18609,
  /* 10770 */ 25115, 18609, 18609, 18609, 18609, 18609, 36069, 31223, 18609, 30557, 26294, 21726, 28226, 21642, 18609,
  /* 10785 */ 18609, 25119, 18609, 18609, 18609, 18609, 26492, 35411, 31218, 25245, 25209, 25209, 25209, 38274, 21726,
  /* 10800 */ 21726, 21726, 28155, 18609, 18609, 18609, 27605, 30690, 32703, 32704, 36069, 27847, 35447, 25209, 25209,
  /* 10815 */ 25209, 26291, 24193, 21726, 21726, 29016, 29239, 24213, 18609, 18609, 18609, 29675, 18609, 26494, 35411,
  /* 10830 */ 25204, 25209, 25209, 25209, 33261, 21726, 21726, 21726, 21726, 34682, 18609, 18609, 18609, 26310, 26328,
  /* 10845 */ 35411, 33682, 25209, 25209, 25345, 27951, 21726, 21726, 30758, 18609, 18609, 18609, 26489, 37311, 25209,
  /* 10860 */ 25209, 22312, 21726, 21726, 26082, 18609, 18609, 26493, 25208, 22018, 21726, 38725, 18609, 18609, 37308,
  /* 10875 */ 25209, 22042, 38721, 18609, 19791, 28841, 21726, 32070, 22016, 31184, 29511, 31184, 20836, 26361, 22034,
  /* 10890 */ 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10905 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10920 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10935 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10950 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10965 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10980 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10995 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25376, 18609,
  /* 11010 */ 19780, 18609, 24220, 18609, 27287, 18609, 23976, 26388, 26403, 26418, 26427, 26443, 26457, 19104, 18609,
  /* 11025 */ 21466, 25115, 23809, 18609, 18609, 18609, 18609, 36069, 31223, 18609, 30557, 25654, 27429, 34446, 21642,
  /* 11040 */ 26510, 18609, 26530, 25406, 18609, 22437, 29191, 24577, 38077, 31218, 26564, 28199, 25209, 25209, 31787,
  /* 11055 */ 26580, 21726, 21726, 28155, 27000, 18609, 28110, 18609, 24080, 18609, 26614, 26637, 35411, 20714, 29760,
  /* 11070 */ 30302, 31062, 25210, 24193, 26665, 21726, 26681, 29239, 24213, 18609, 18609, 18609, 30164, 18609, 26494,
  /* 11085 */ 35411, 25204, 25209, 25209, 39809, 33261, 21726, 21726, 21726, 34477, 26699, 32131, 18609, 18609, 18609,
  /* 11100 */ 26491, 35411, 25208, 25209, 37124, 25345, 21725, 21726, 31178, 30758, 18609, 18609, 18609, 21413, 26726,
  /* 11115 */ 21847, 25209, 22312, 36565, 21726, 37339, 18609, 18609, 24850, 25208, 26751, 32781, 38725, 18609, 18609,
  /* 11130 */ 37308, 25209, 26775, 38360, 18609, 19791, 28841, 21726, 32070, 22016, 31184, 29511, 33534, 20883, 26795,
  /* 11145 */ 22034, 26798, 22038, 27549, 25694, 25319, 32063, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11160 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11175 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11190 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11205 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11220 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11235 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11250 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25376,
  /* 11265 */ 18609, 20225, 18609, 24220, 18609, 27744, 24119, 24271, 26814, 26845, 26860, 26871, 26887, 26901, 19104,
  /* 11280 */ 18609, 18609, 25115, 18609, 18609, 18609, 18609, 23535, 40003, 31223, 26942, 30835, 26294, 29009, 28533,
  /* 11295 */ 21642, 30943, 26958, 26995, 27016, 18609, 18609, 39655, 27036, 27061, 27096, 25771, 35822, 27469, 27112,
  /* 11310 */ 27132, 30220, 24197, 27161, 27179, 18609, 18609, 40482, 20759, 30690, 18609, 18609, 36069, 35411, 35447,
  /* 11325 */ 25209, 25209, 25209, 25210, 24193, 21726, 21726, 21726, 29239, 27226, 18609, 18609, 27274, 29675, 18609,
  /* 11340 */ 26494, 35411, 28371, 25209, 25209, 25209, 27309, 23599, 21726, 21726, 37189, 34682, 18609, 18609, 32189,
  /* 11355 */ 32235, 27343, 35411, 27387, 25209, 27407, 25345, 27323, 21726, 27426, 30758, 39828, 18655, 18609, 24699,
  /* 11370 */ 37311, 27445, 27466, 22312, 27485, 21726, 26082, 18609, 18609, 26493, 25208, 22018, 21726, 38725, 39031,
  /* 11385 */ 18609, 37308, 25209, 27501, 29557, 18609, 19791, 28841, 21726, 27521, 22016, 31184, 28439, 27540, 37433,
  /* 11400 */ 27565, 22034, 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11415 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11430 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11445 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11460 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11475 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11490 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11505 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11520 */ 25376, 18609, 18611, 27603, 24220, 32073, 30074, 18610, 27621, 27640, 27677, 27692, 27701, 27717, 27731,
  /* 11535 */ 19104, 30008, 38850, 26829, 27767, 22242, 22408, 27802, 40217, 27828, 27863, 27879, 27923, 27939, 27974,
  /* 11550 */ 33793, 21642, 35894, 27293, 28012, 28051, 28106, 28126, 18609, 40090, 35411, 27353, 23564, 24351, 39098,
  /* 11565 */ 30882, 28144, 39730, 35322, 28171, 28242, 29938, 28270, 28325, 23915, 28341, 18609, 24148, 28357, 28417,
  /* 11580 */ 32218, 28491, 28507, 28549, 28580, 28622, 28649, 28706, 38386, 38516, 24213, 28722, 19615, 32544, 26926,
  /* 11595 */ 28745, 20604, 35411, 28780, 28817, 26042, 28840, 28857, 31414, 28905, 29400, 32522, 34682, 31857, 30328,
  /* 11610 */ 28922, 28759, 21626, 20067, 33874, 26108, 28944, 28970, 25666, 31636, 28999, 29032, 32650, 34233, 29059,
  /* 11625 */ 40557, 29077, 29102, 24343, 29139, 32152, 38148, 26082, 30612, 29183, 29207, 37261, 39888, 38965, 29262,
  /* 11640 */ 29278, 24408, 37839, 33689, 29393, 29296, 22151, 29345, 38930, 30787, 32818, 29383, 29416, 29441, 28690,
  /* 11655 */ 21056, 29457, 29486, 29502, 22038, 34966, 29528, 37808, 32063, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11670 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11685 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11700 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11715 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11730 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11745 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11760 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11775 */ 18609, 25376, 18609, 18609, 18609, 24220, 20756, 20751, 18609, 29655, 29573, 29588, 29603, 29612, 29628,
  /* 11790 */ 29642, 19104, 18609, 29671, 25115, 18609, 18609, 18609, 18609, 18609, 29691, 31223, 18609, 38451, 27116,
  /* 11805 */ 34726, 29712, 21642, 29733, 18609, 29728, 18609, 18609, 26024, 29736, 22462, 35411, 31218, 33035, 29754,
  /* 11820 */ 25209, 25209, 29367, 29776, 21726, 21726, 28155, 18609, 18609, 18609, 18609, 30690, 18609, 18609, 36069,
  /* 11835 */ 35411, 35447, 25209, 25209, 37779, 25210, 24193, 21726, 21726, 33646, 29239, 24213, 18609, 29061, 18609,
  /* 11850 */ 29675, 18609, 26494, 31972, 25204, 25209, 28457, 25209, 33261, 21726, 21726, 29796, 21726, 34682, 18609,
  /* 11865 */ 27812, 18609, 18609, 26491, 34646, 25208, 25209, 24875, 25345, 21725, 21726, 37468, 30758, 18609, 18609,
  /* 11880 */ 18609, 26489, 37311, 25209, 25209, 22312, 21726, 21726, 26082, 18609, 18609, 26493, 25208, 22018, 21726,
  /* 11895 */ 38725, 29815, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 28841, 21726, 32070, 22016, 31184, 29511,
  /* 11910 */ 31184, 29512, 21935, 22034, 26798, 22038, 34991, 25694, 25640, 32063, 18609, 18609, 18609, 18609, 18609,
  /* 11925 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11940 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11955 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11970 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11985 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12000 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12015 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12030 */ 18609, 18609, 25376, 18609, 18609, 18609, 24220, 18609, 22251, 18609, 20443, 29832, 29847, 29862, 29871,
  /* 12045 */ 29887, 29901, 19104, 18609, 18609, 25115, 18609, 24739, 18609, 18609, 18609, 36069, 31223, 18609, 30557,
  /* 12060 */ 26294, 21726, 28533, 29930, 18609, 18609, 25119, 18609, 18609, 37495, 18609, 26492, 35411, 31218, 25245,
  /* 12075 */ 25209, 25209, 25209, 38274, 21726, 21726, 21726, 28155, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12090 */ 36069, 35411, 35447, 25209, 25209, 25209, 21788, 29954, 21726, 21726, 21726, 29239, 18609, 18609, 18609,
  /* 12105 */ 18609, 18609, 18609, 26494, 35411, 25204, 25209, 25209, 25209, 33261, 21726, 21726, 21726, 21726, 29246,
  /* 12120 */ 18609, 18609, 18609, 18609, 26491, 35411, 25208, 25209, 25209, 33404, 21725, 21726, 21726, 30758, 18609,
  /* 12135 */ 34578, 18609, 26489, 37311, 25209, 25209, 22212, 21726, 21726, 38649, 29974, 29997, 30033, 25208, 22018,
  /* 12150 */ 21726, 38725, 18609, 30050, 30090, 25333, 21902, 30121, 18609, 33862, 30141, 30180, 32070, 22016, 31184,
  /* 12165 */ 29511, 31184, 29512, 21935, 22034, 26798, 22038, 27549, 28254, 37808, 32063, 18609, 18609, 18609, 18609,
  /* 12180 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12195 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12210 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12225 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12240 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12255 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12270 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12285 */ 18609, 18609, 18609, 25376, 18609, 18609, 18609, 24220, 18609, 18609, 18609, 18609, 20105, 26214, 18609,
  /* 12300 */ 24670, 22038, 31354, 19104, 18609, 23945, 30236, 18609, 18609, 24821, 24818, 18609, 36069, 26340, 18609,
  /* 12315 */ 34298, 28824, 30256, 30274, 21642, 18609, 24609, 30582, 28928, 18609, 18609, 18609, 26492, 35411, 31218,
  /* 12330 */ 25245, 25209, 25209, 38308, 38274, 21726, 21726, 29550, 28155, 18609, 18609, 22116, 18609, 18609, 18609,
  /* 12345 */ 18609, 36069, 35411, 30290, 25209, 25209, 25209, 36323, 24193, 21726, 21726, 21726, 27203, 28128, 18609,
  /* 12360 */ 18609, 18609, 18609, 18609, 26494, 35411, 25204, 25209, 25209, 25209, 33261, 21726, 21726, 21726, 21726,
  /* 12375 */ 29246, 18609, 18609, 30326, 18609, 26491, 35411, 25208, 25209, 32726, 33404, 21725, 21726, 32094, 30758,
  /* 12390 */ 18609, 18609, 18609, 26489, 37311, 25209, 25209, 22212, 21726, 21726, 26082, 18609, 18609, 26493, 25208,
  /* 12405 */ 22018, 21726, 38725, 18609, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 32503, 37147, 32070, 22016,
  /* 12420 */ 31184, 29511, 31184, 29512, 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609,
  /* 12435 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12450 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12465 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12480 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12495 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12510 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12525 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12540 */ 18609, 18609, 18609, 18609, 25376, 18609, 18609, 30344, 24220, 18609, 30365, 21098, 30400, 30448, 30487,
  /* 12555 */ 30503, 30514, 30530, 30544, 19104, 18609, 18609, 30578, 18609, 18609, 23839, 30598, 21994, 30628, 26649,
  /* 12570 */ 25068, 34189, 38685, 30652, 30673, 21642, 18609, 18609, 25119, 36418, 30689, 18609, 26187, 23635, 30636,
  /* 12585 */ 27045, 25245, 30706, 30726, 35945, 30747, 30785, 30803, 32269, 28155, 18609, 30822, 27624, 37379, 26548,
  /* 12600 */ 31724, 30851, 36069, 37914, 24863, 25209, 25209, 30868, 38117, 24193, 21726, 35469, 26592, 30898, 18609,
  /* 12615 */ 18609, 18609, 30921, 23037, 18609, 26494, 35411, 29221, 25209, 25209, 25209, 33261, 30959, 21726, 21726,
  /* 12630 */ 21726, 29246, 34858, 30978, 31029, 39769, 26491, 35411, 25208, 38678, 25209, 33404, 21725, 28683, 21726,
  /* 12645 */ 31256, 18609, 30379, 24638, 31078, 33236, 36002, 31116, 28520, 28394, 31166, 26137, 18609, 33554, 31201,
  /* 12660 */ 29357, 31244, 39234, 38725, 34599, 19376, 37308, 25209, 22042, 38721, 31272, 19791, 28841, 21726, 32070,
  /* 12675 */ 22016, 31184, 39305, 31294, 29512, 21935, 22034, 26798, 31340, 27549, 25694, 37808, 31383, 18609, 18609,
  /* 12690 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12705 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12720 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12735 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12750 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12765 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12780 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12795 */ 18609, 18609, 18609, 18609, 18609, 25376, 18609, 18609, 18609, 24220, 18609, 18609, 18609, 18609, 20105,
  /* 12810 */ 26214, 18609, 24670, 31406, 31430, 19104, 18609, 18609, 25115, 18609, 18609, 18609, 18609, 18609, 36069,
  /* 12825 */ 31223, 18609, 30557, 26294, 21726, 28533, 21642, 18609, 18609, 25119, 18609, 18609, 18609, 18609, 26492,
  /* 12840 */ 35411, 31218, 25245, 25209, 25209, 25209, 38274, 21726, 21726, 21726, 35297, 18609, 18609, 18609, 18609,
  /* 12855 */ 18609, 18609, 18609, 36069, 35411, 35447, 25209, 25209, 25209, 25210, 24193, 21726, 21726, 21726, 29239,
  /* 12870 */ 18609, 18609, 18609, 18609, 18609, 18609, 26494, 35411, 25204, 25209, 25209, 25209, 33261, 21726, 21726,
  /* 12885 */ 21726, 21726, 29246, 18609, 18609, 18609, 18609, 26491, 35411, 25208, 25209, 25209, 33404, 21725, 21726,
  /* 12900 */ 21726, 30758, 18609, 18609, 18609, 26489, 37311, 25209, 25209, 22212, 21726, 21726, 26082, 18609, 18609,
  /* 12915 */ 26493, 25208, 22018, 21726, 38725, 18609, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 28841, 21726,
  /* 12930 */ 32070, 22016, 31184, 29511, 31184, 29512, 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063, 18609,
  /* 12945 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12960 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12975 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12990 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13005 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13020 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13035 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13050 */ 18609, 18609, 18609, 18609, 18609, 18609, 25376, 18609, 18609, 18609, 24220, 18609, 18609, 18609, 18609,
  /* 13065 */ 20105, 26214, 18609, 24670, 22038, 31354, 19104, 18609, 18609, 25115, 18609, 21333, 18609, 18609, 18609,
  /* 13080 */ 36069, 31223, 18609, 30557, 26294, 21726, 28533, 21642, 18609, 18609, 25119, 18609, 18609, 18609, 18609,
  /* 13095 */ 26492, 35411, 31218, 25245, 25209, 25209, 25209, 38274, 21726, 21726, 21726, 28155, 18609, 18609, 18609,
  /* 13110 */ 18609, 18609, 18609, 18609, 36069, 35411, 35447, 25209, 25209, 25209, 25210, 24193, 21726, 21726, 21726,
  /* 13125 */ 29239, 18609, 18609, 18609, 18609, 18609, 18609, 26494, 35411, 25204, 25209, 29117, 25209, 33261, 21726,
  /* 13140 */ 34545, 21726, 21726, 29246, 18609, 18609, 18609, 18609, 26491, 35411, 25208, 25209, 25209, 33404, 21725,
  /* 13155 */ 21726, 21726, 30758, 18609, 18609, 18609, 26489, 37311, 25209, 25209, 22212, 21726, 21726, 26082, 18609,
  /* 13170 */ 18609, 26493, 25208, 22018, 21726, 38725, 18609, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 28841,
  /* 13185 */ 21726, 32070, 22016, 31184, 29511, 31184, 29512, 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063,
  /* 13200 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13215 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13230 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13245 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13260 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13275 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13290 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13305 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25376, 18609, 18609, 18609, 24220, 18609, 25478, 18609,
  /* 13320 */ 20478, 31459, 31474, 31489, 31499, 31515, 31529, 19104, 36958, 18609, 25115, 31228, 31570, 18609, 24373,
  /* 13335 */ 18609, 31607, 31745, 21770, 31042, 26294, 31632, 27145, 31652, 22110, 24275, 31684, 23072, 18609, 31664,
  /* 13350 */ 31721, 21149, 35411, 31740, 34805, 31761, 25209, 31777, 31803, 31830, 21726, 31873, 31897, 27020, 18609,
  /* 13365 */ 31925, 29816, 31942, 18609, 18609, 31962, 35411, 24331, 31995, 38111, 29123, 21788, 32020, 32049, 21726,
  /* 13380 */ 32089, 29239, 18609, 30349, 32110, 30852, 18609, 32130, 26494, 29696, 25204, 25209, 34345, 28466, 33261,
  /* 13395 */ 21726, 21726, 32147, 32168, 29246, 27781, 18609, 18609, 18609, 33490, 35411, 27080, 25209, 25209, 33404,
  /* 13410 */ 22218, 21726, 21726, 30758, 32187, 18609, 40522, 32205, 40021, 25209, 25209, 23577, 21726, 21726, 26082,
  /* 13425 */ 24768, 36239, 26493, 25208, 22018, 21726, 38725, 18609, 32234, 37308, 25880, 22042, 39459, 18609, 19791,
  /* 13440 */ 28841, 21726, 32070, 22016, 31184, 29511, 31184, 29512, 21935, 32251, 32285, 29230, 27549, 31909, 37808,
  /* 13455 */ 32063, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13470 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13485 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13500 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13515 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13530 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13545 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13560 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25376, 18609, 18609, 20197, 24220, 36701, 21664,
  /* 13575 */ 18609, 18609, 32301, 32339, 32354, 32363, 32379, 32393, 19104, 20780, 18609, 25115, 24552, 18609, 18609,
  /* 13590 */ 20781, 18609, 32441, 26223, 20782, 31443, 26294, 32474, 28533, 21642, 25458, 18609, 25119, 19317, 34941,
  /* 13605 */ 18609, 18609, 26492, 35411, 31218, 25245, 32498, 33209, 32760, 38274, 32519, 30806, 35330, 28155, 32538,
  /* 13620 */ 32560, 18609, 18609, 18609, 18609, 18609, 36069, 35411, 35447, 37762, 34501, 25209, 25210, 32585, 28881,
  /* 13635 */ 38352, 21726, 29239, 18609, 32625, 32645, 18609, 32666, 32685, 26494, 35411, 25204, 28795, 25209, 32720,
  /* 13650 */ 28954, 28906, 21726, 38153, 21726, 29246, 18609, 18609, 18609, 18609, 26491, 35411, 25208, 25209, 25209,
  /* 13665 */ 33404, 21725, 21726, 21726, 30758, 18609, 18609, 18609, 26489, 37311, 25209, 25209, 22212, 21726, 21726,
  /* 13680 */ 34923, 18609, 18609, 26493, 25208, 22018, 21726, 38725, 25967, 18609, 32742, 25209, 32776, 38026, 18609,
  /* 13695 */ 19791, 28841, 21726, 31390, 32797, 39280, 29511, 31184, 29512, 21935, 22034, 26798, 22038, 32834, 25694,
  /* 13710 */ 37808, 32063, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13725 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13740 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13755 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13770 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13785 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13800 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13815 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25376, 18609, 18609, 32865, 37502, 18609,
  /* 13830 */ 22170, 32863, 23792, 32881, 33066, 33081, 33090, 32908, 32922, 19104, 25537, 18609, 27894, 32971, 33005,
  /* 13845 */ 24051, 33024, 33051, 27907, 37531, 33106, 35196, 33122, 33138, 33154, 21642, 33170, 35113, 33188, 18609,
  /* 13860 */ 22272, 32323, 18609, 26492, 35411, 32458, 23886, 25209, 33208, 39091, 38274, 25610, 21726, 36662, 28155,
  /* 13875 */ 38909, 18609, 23771, 18609, 18609, 40187, 18609, 33225, 39050, 35447, 38300, 25209, 25209, 33252, 33277,
  /* 13890 */ 21726, 21726, 26779, 37046, 18609, 18609, 18609, 26540, 18609, 19883, 27654, 38249, 31092, 25209, 36038,
  /* 13905 */ 34700, 33261, 33293, 21726, 31881, 34733, 29246, 33312, 33349, 32695, 33172, 33377, 37906, 26735, 33393,
  /* 13920 */ 39127, 33404, 25289, 33425, 39272, 30758, 39972, 30424, 33452, 33488, 37311, 33506, 25209, 22212, 33528,
  /* 13935 */ 21726, 26082, 33550, 33466, 33570, 33586, 33623, 28889, 30125, 18609, 35369, 33670, 33705, 26759, 33745,
  /* 13950 */ 20292, 19791, 33765, 32263, 32070, 33809, 33848, 33890, 33916, 33941, 39925, 22034, 26798, 22038, 33925,
  /* 13965 */ 34058, 37808, 32599, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13980 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13995 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14010 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14025 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14040 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14055 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14070 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25376, 18609, 18609, 21181, 24220,
  /* 14085 */ 18609, 24645, 34086, 24404, 34106, 34121, 34136, 34145, 34161, 34176, 20114, 34227, 34249, 29311, 36951,
  /* 14100 */ 34267, 34285, 22486, 24443, 34324, 38438, 34361, 34397, 34433, 34462, 35851, 21642, 18609, 18609, 25119,
  /* 14115 */ 39418, 25736, 19607, 18609, 26492, 20060, 31218, 25245, 25209, 34498, 35816, 34517, 21726, 34544, 34561,
  /* 14130 */ 38001, 18609, 18609, 18609, 34577, 34594, 34615, 40300, 34638, 31212, 34662, 34698, 34381, 25209, 32955,
  /* 14145 */ 34716, 21726, 34749, 21726, 34771, 34794, 32669, 24774, 18609, 19741, 18609, 26494, 35411, 27076, 37093,
  /* 14160 */ 25209, 25209, 33261, 21726, 36147, 21726, 21726, 29246, 18609, 35924, 18609, 34821, 26491, 35411, 25208,
  /* 14175 */ 25209, 25209, 38565, 34838, 21726, 21726, 30758, 18609, 34855, 18609, 26489, 31616, 39341, 27450, 34202,
  /* 14190 */ 37037, 37233, 20896, 18609, 18609, 27576, 32754, 22018, 34874, 38725, 18609, 18609, 37308, 25209, 22042,
  /* 14205 */ 38721, 34891, 26710, 25899, 21726, 30156, 34911, 34957, 29043, 34982, 29512, 21935, 22034, 26798, 22038,
  /* 14220 */ 33780, 36125, 37808, 32811, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14235 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14250 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14265 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14280 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14295 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14310 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14325 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25376, 18609, 18609, 18609,
  /* 14340 */ 24220, 18609, 18609, 35007, 29914, 35028, 35129, 35144, 35153, 35169, 35183, 19104, 18609, 36803, 25115,
  /* 14355 */ 18609, 18609, 18609, 18609, 18609, 36069, 28428, 18609, 30557, 32004, 21727, 28533, 21642, 36479, 22145,
  /* 14370 */ 25119, 27996, 36470, 18609, 18609, 26492, 35212, 36273, 20376, 35260, 38231, 32418, 35286, 35313, 36612,
  /* 14385 */ 37407, 28155, 35346, 18609, 18609, 19325, 24491, 35368, 18609, 36069, 35411, 35447, 25209, 25209, 25209,
  /* 14400 */ 25210, 24193, 21726, 21726, 21726, 29239, 35385, 18609, 18609, 33008, 31926, 31367, 26494, 35409, 25204,
  /* 14415 */ 37211, 25209, 25209, 34308, 21726, 33637, 21726, 21726, 29246, 25973, 18609, 18609, 18609, 26491, 35411,
  /* 14430 */ 25208, 36443, 25209, 20726, 21725, 34875, 21726, 30758, 18609, 18609, 18609, 26489, 37311, 25209, 25209,
  /* 14445 */ 22212, 21726, 21726, 26082, 18609, 18609, 26493, 25208, 22018, 21726, 38725, 18609, 18609, 37308, 25209,
  /* 14460 */ 22042, 38721, 18609, 19791, 28841, 21726, 33956, 22016, 31184, 34375, 31184, 29512, 21935, 22034, 26798,
  /* 14475 */ 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14490 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14505 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14520 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14535 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14550 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14565 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14580 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25376, 18609, 18609,
  /* 14595 */ 18609, 24220, 18609, 18609, 18609, 18609, 20105, 26214, 18609, 24670, 22038, 31354, 19104, 18609, 18609,
  /* 14610 */ 25115, 18609, 24967, 18609, 18609, 25572, 35428, 25564, 25569, 31542, 33512, 35463, 35485, 35501, 18609,
  /* 14625 */ 18609, 25119, 18609, 18609, 18609, 18609, 26492, 35411, 31218, 25245, 25209, 25209, 25209, 38274, 21726,
  /* 14640 */ 21726, 21726, 28155, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 36069, 35411, 35447, 25209, 25209,
  /* 14655 */ 25209, 25861, 35525, 21726, 21726, 21726, 29239, 18609, 18609, 18609, 18609, 18609, 18609, 26494, 35411,
  /* 14670 */ 25204, 25209, 25209, 25209, 33261, 21726, 21726, 21726, 21726, 29246, 18609, 18609, 18609, 18609, 26491,
  /* 14685 */ 35411, 25208, 25209, 25209, 33404, 21725, 21726, 21726, 30758, 18609, 18609, 18609, 26489, 37311, 25209,
  /* 14700 */ 25209, 22212, 21726, 21726, 26082, 18609, 18609, 26493, 25208, 22018, 21726, 38725, 18609, 18609, 37308,
  /* 14715 */ 35547, 25702, 38721, 18609, 19791, 28841, 21726, 32070, 22016, 31184, 29511, 31184, 29512, 21935, 22034,
  /* 14730 */ 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14745 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14760 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14775 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14790 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14805 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14820 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14835 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25376, 18609,
  /* 14850 */ 18609, 26086, 24220, 20291, 20286, 20279, 18609, 35569, 35584, 35599, 35610, 35626, 35640, 19104, 18609,
  /* 14865 */ 21210, 30936, 35669, 35694, 40158, 35717, 26514, 35734, 35750, 35766, 35802, 35838, 39161, 35867, 21642,
  /* 14880 */ 18609, 18609, 35883, 31144, 35910, 39589, 35921, 26492, 40015, 31218, 24534, 27410, 25209, 35940, 38274,
  /* 14895 */ 22046, 21726, 35961, 21875, 18609, 18609, 23466, 39660, 18609, 36528, 23463, 36069, 38081, 35983, 36018,
  /* 14910 */ 36035, 25209, 36054, 36088, 34755, 21726, 23606, 36113, 18609, 39612, 36172, 36191, 36237, 18609, 36255,
  /* 14925 */ 36831, 35226, 25209, 36289, 36319, 30105, 36339, 36345, 36097, 34839, 29246, 36361, 18609, 36378, 32629,
  /* 14940 */ 26491, 35411, 30562, 25209, 25209, 33404, 22318, 21726, 21726, 33436, 18609, 34251, 18609, 26489, 37311,
  /* 14955 */ 25209, 38326, 22212, 21726, 29958, 26082, 36407, 18609, 26372, 36441, 28475, 21726, 36459, 34090, 18609,
  /* 14970 */ 37308, 25209, 22042, 38721, 18609, 19791, 28841, 21726, 27989, 36495, 38190, 29511, 31184, 36544, 36581,
  /* 14985 */ 36600, 26798, 22038, 29425, 36650, 28185, 32063, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15000 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15015 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15030 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15045 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15060 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15075 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15090 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25376,
  /* 15105 */ 18609, 18609, 18609, 36684, 36425, 25121, 29470, 26000, 36717, 36732, 36747, 36759, 36775, 36790, 20250,
  /* 15120 */ 18609, 18609, 25115, 18609, 25382, 18609, 21405, 23742, 36819, 27587, 36865, 35653, 27391, 37459, 36881,
  /* 15135 */ 36897, 26275, 18609, 25119, 18609, 18609, 26312, 36938, 39375, 31979, 31218, 36974, 37003, 33900, 25209,
  /* 15150 */ 38274, 37028, 30203, 21726, 28155, 27524, 18609, 18609, 37062, 18609, 18609, 18609, 36069, 35411, 38219,
  /* 15165 */ 25209, 37088, 25209, 25210, 24193, 25592, 21726, 21726, 29239, 18609, 31946, 32114, 18609, 25938, 27363,
  /* 15180 */ 26494, 40097, 34338, 25209, 33607, 37109, 33261, 37146, 21726, 38755, 38956, 34778, 18609, 18609, 18609,
  /* 15195 */ 18609, 24318, 36843, 25208, 28801, 37163, 33404, 21725, 30657, 37183, 30758, 18609, 35393, 34822, 26489,
  /* 15210 */ 37311, 31054, 37205, 31004, 36559, 37227, 26082, 18609, 24527, 26493, 25208, 22018, 21726, 38725, 32981,
  /* 15225 */ 32609, 37249, 30731, 22042, 37277, 37293, 19791, 28841, 21726, 32070, 37327, 37355, 29511, 31184, 25050,
  /* 15240 */ 21935, 37395, 37423, 37449, 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15255 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15270 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15285 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15300 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15315 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15330 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15345 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15360 */ 25376, 18609, 18609, 18609, 37484, 18609, 18609, 28606, 20204, 20105, 33971, 33986, 34001, 34015, 34029,
  /* 15375 */ 19104, 22350, 25919, 28066, 24721, 28078, 20903, 23980, 37555, 37518, 37547, 37563, 37579, 25843, 39486,
  /* 15390 */ 37595, 37611, 18609, 37673, 37689, 24894, 37696, 31278, 37625, 20050, 23642, 37712, 37748, 37778, 35270,
  /* 15405 */ 32947, 36303, 21726, 39720, 38181, 37795, 37824, 27252, 18609, 31316, 18609, 18609, 37855, 37891, 36267,
  /* 15420 */ 39079, 37930, 37949, 25209, 37965, 37990, 33654, 38017, 35531, 29239, 18609, 38042, 24177, 21247, 29280,
  /* 15435 */ 25436, 38064, 39693, 25204, 38097, 25209, 38474, 38133, 35967, 29540, 21726, 38169, 27210, 24499, 18609,
  /* 15450 */ 33472, 18609, 38206, 38247, 38265, 38290, 38324, 33404, 28871, 38342, 38376, 33729, 38402, 21076, 34269,
  /* 15465 */ 38423, 37311, 38467, 25209, 38490, 38506, 30258, 38532, 27371, 18609, 26493, 38554, 34417, 23589, 39859,
  /* 15480 */ 38581, 18609, 38609, 30310, 22042, 38638, 29321, 38665, 38701, 38741, 32070, 22016, 31184, 29511, 31184,
  /* 15495 */ 29512, 28401, 38771, 34070, 38799, 29154, 25694, 21965, 38815, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15510 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15525 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15540 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15555 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15570 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15585 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15600 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15615 */ 18609, 25376, 18609, 18609, 18609, 24925, 18609, 18609, 32316, 20089, 38841, 35043, 35058, 35072, 35086,
  /* 15630 */ 35100, 19104, 18609, 18609, 30463, 24240, 18609, 18609, 18609, 18609, 36069, 31223, 24239, 30991, 26294,
  /* 15645 */ 36137, 28533, 38866, 18609, 18609, 25119, 18609, 22000, 38902, 18609, 22986, 35411, 31218, 25245, 38925,
  /* 15660 */ 25209, 25209, 33718, 38946, 21726, 21726, 38783, 38981, 21339, 39005, 18609, 18609, 28309, 39029, 39047,
  /* 15675 */ 39066, 35447, 30710, 31100, 39114, 25210, 24193, 28673, 39150, 39262, 34211, 18609, 40475, 18609, 18609,
  /* 15690 */ 18609, 18609, 20701, 35411, 25204, 39177, 25209, 25209, 37974, 27327, 21726, 21726, 21726, 30905, 18609,
  /* 15705 */ 18609, 18609, 18609, 26491, 35411, 25208, 25209, 25209, 33404, 21725, 21726, 21726, 31814, 18609, 18609,
  /* 15720 */ 35509, 26489, 36849, 25209, 25209, 28384, 21726, 21726, 39196, 18609, 18609, 26493, 25208, 22018, 21726,
  /* 15735 */ 38725, 18609, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 39219, 39449, 32070, 22016, 31184, 29511,
  /* 15750 */ 31184, 29512, 21935, 39250, 39296, 22038, 27549, 27191, 39321, 32063, 18609, 18609, 18609, 18609, 18609,
  /* 15765 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15780 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15795 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15810 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15825 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15840 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15855 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15870 */ 18609, 18609, 25376, 18609, 18609, 18609, 28025, 18609, 21445, 18609, 35786, 39357, 28983, 18609, 20321,
  /* 15885 */ 39391, 39405, 19104, 18609, 18609, 25115, 18609, 18609, 18609, 18609, 18609, 36069, 31223, 18609, 32406,
  /* 15900 */ 26294, 39439, 28533, 21642, 18609, 40391, 25119, 18609, 18609, 18609, 36521, 31705, 35411, 31218, 25245,
  /* 15915 */ 35995, 35236, 25209, 38274, 36624, 39915, 21726, 28155, 18609, 18609, 18609, 18609, 39203, 18609, 31668,
  /* 15930 */ 36069, 39689, 35447, 25209, 32425, 25209, 25210, 24193, 21726, 39475, 21726, 29239, 18609, 18609, 18609,
  /* 15945 */ 18609, 18609, 18609, 26494, 35411, 25204, 25209, 25209, 25209, 33261, 21726, 21726, 21726, 21726, 29246,
  /* 15960 */ 18609, 18609, 18609, 18609, 26491, 35411, 25208, 25209, 25209, 33404, 21725, 21726, 21726, 30758, 18609,
  /* 15975 */ 33192, 18609, 26489, 37311, 25209, 25209, 22212, 21726, 21726, 26082, 18609, 18609, 26493, 25208, 22018,
  /* 15990 */ 21726, 38725, 18609, 18609, 37308, 25209, 22042, 38721, 29329, 19791, 28841, 21726, 32070, 22016, 31184,
  /* 16005 */ 29511, 31184, 29512, 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609,
  /* 16020 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16035 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16050 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16065 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16080 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16095 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16110 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16125 */ 18609, 18609, 18609, 25376, 18609, 18609, 18609, 20350, 18609, 20414, 20648, 20543, 39502, 39517, 39532,
  /* 16140 */ 39541, 39557, 39571, 19104, 18609, 18609, 25115, 18609, 18609, 18609, 18609, 18609, 36069, 31223, 18609,
  /* 16155 */ 30557, 28213, 29799, 29167, 21642, 18609, 18609, 25119, 18609, 18609, 18609, 18609, 26492, 35411, 31218,
  /* 16170 */ 25245, 25209, 25209, 25209, 38274, 21726, 21726, 21726, 28155, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16185 */ 18609, 36069, 35411, 35447, 25209, 25209, 25209, 25210, 24193, 21726, 21726, 21726, 29239, 18609, 18609,
  /* 16200 */ 18609, 18609, 39605, 18609, 26494, 35411, 25204, 25209, 25209, 25209, 33261, 21726, 21726, 21726, 21726,
  /* 16215 */ 29246, 18609, 23030, 36175, 18609, 26491, 36072, 25208, 33601, 37933, 33404, 21725, 30192, 26683, 30758,
  /* 16230 */ 18609, 18609, 18609, 26489, 37311, 25209, 25209, 22212, 21726, 21726, 26082, 18609, 18609, 26493, 25208,
  /* 16245 */ 22018, 21726, 38725, 18609, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 28841, 21726, 32070, 22016,
  /* 16260 */ 31184, 29511, 31184, 29512, 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609, 18609,
  /* 16275 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16290 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16305 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16320 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16335 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16350 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16365 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16380 */ 18609, 18609, 18609, 18609, 24367, 18609, 18609, 18609, 24220, 18609, 18609, 18609, 18609, 20105, 26214,
  /* 16395 */ 18609, 30017, 39628, 39642, 19104, 18609, 18609, 28285, 18609, 18609, 18609, 18609, 25806, 39676, 25798,
  /* 16410 */ 21217, 32935, 26294, 39709, 28533, 21642, 18609, 18609, 25119, 39746, 36213, 18609, 18609, 26492, 35411,
  /* 16425 */ 31218, 25245, 25209, 25209, 39180, 38274, 21726, 21726, 34482, 28155, 39762, 18609, 18609, 18609, 18609,
  /* 16440 */ 18609, 18609, 36069, 35411, 35447, 25209, 25209, 25209, 25210, 24193, 21726, 21726, 21726, 29239, 18609,
  /* 16455 */ 18609, 18609, 18609, 18609, 18609, 26494, 35411, 25204, 25209, 25209, 25209, 38622, 21726, 21726, 21726,
  /* 16470 */ 21726, 29246, 39785, 18609, 18609, 18609, 26491, 35411, 25208, 25209, 25209, 33404, 21725, 21726, 21726,
  /* 16485 */ 30758, 18609, 18609, 18609, 26489, 37311, 25209, 25209, 22212, 21726, 21726, 26082, 18609, 18609, 26493,
  /* 16500 */ 25208, 22018, 21726, 38725, 18609, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 28841, 21726, 32070,
  /* 16515 */ 22016, 31184, 29511, 31184, 29512, 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063, 18609, 18609,
  /* 16530 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16545 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16560 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16575 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16590 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16605 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16620 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16635 */ 18609, 18609, 18609, 18609, 18609, 25376, 18609, 18609, 18609, 24220, 18609, 18609, 18609, 18609, 20105,
  /* 16650 */ 26214, 18609, 24670, 22038, 31354, 19113, 18609, 18609, 25115, 18609, 22081, 18609, 18609, 18609, 36069,
  /* 16665 */ 31223, 18609, 39803, 31554, 21806, 28533, 21642, 18609, 18609, 25119, 18609, 18609, 18609, 18609, 26492,
  /* 16680 */ 35411, 31218, 25245, 25209, 25209, 36019, 38274, 21726, 21726, 30962, 28155, 26059, 18609, 18609, 39825,
  /* 16695 */ 18609, 18609, 18609, 36069, 27661, 35447, 34410, 25209, 39335, 25210, 39844, 21726, 32171, 21726, 29239,
  /* 16710 */ 18609, 30432, 18609, 18609, 18609, 18609, 30034, 35411, 25204, 35244, 25209, 25209, 33261, 21726, 39904,
  /* 16725 */ 21726, 21726, 39941, 18609, 25813, 18609, 18609, 26491, 32452, 25208, 37167, 25209, 39965, 21725, 33296,
  /* 16740 */ 21726, 36510, 18609, 18609, 18609, 26489, 37311, 25209, 25209, 22212, 21726, 21726, 21069, 18609, 39423,
  /* 16755 */ 26493, 25208, 22018, 21726, 38725, 18609, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 28841, 21726,
  /* 16770 */ 32070, 22016, 31184, 29511, 31184, 29512, 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063, 18609,
  /* 16785 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16800 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16815 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16830 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16845 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16860 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16875 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16890 */ 18609, 18609, 18609, 18609, 18609, 18609, 25376, 18609, 18609, 18609, 24220, 18609, 18609, 18609, 18609,
  /* 16905 */ 39988, 26214, 18609, 24670, 22038, 31354, 19104, 18609, 18609, 25115, 18609, 18609, 18609, 18609, 18609,
  /* 16920 */ 36069, 31223, 18609, 30557, 26294, 21726, 28533, 21642, 18609, 18609, 25119, 18609, 18609, 18609, 18609,
  /* 16935 */ 26492, 35411, 31218, 25245, 25209, 25209, 25209, 38274, 21726, 21726, 21726, 28155, 18609, 18609, 18609,
  /* 16950 */ 18609, 18609, 18609, 18609, 36069, 35411, 35447, 25209, 25209, 25209, 25210, 24193, 21726, 21726, 21726,
  /* 16965 */ 29239, 18609, 18609, 18609, 18609, 18609, 18609, 26494, 35411, 25204, 25209, 25209, 25209, 33261, 21726,
  /* 16980 */ 21726, 21726, 21726, 29246, 18609, 18609, 18609, 18609, 26491, 35411, 25208, 25209, 25209, 33404, 21725,
  /* 16995 */ 21726, 21726, 30758, 18609, 18609, 18609, 26489, 37311, 25209, 25209, 22212, 21726, 21726, 26082, 18609,
  /* 17010 */ 18609, 26493, 25208, 22018, 21726, 38725, 18609, 18609, 37308, 25209, 22042, 38721, 18609, 19791, 28841,
  /* 17025 */ 21726, 32070, 22016, 31184, 29511, 31184, 29512, 21935, 22034, 26798, 22038, 27549, 25694, 37808, 32063,
  /* 17040 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17055 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17070 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17085 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17100 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17115 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17130 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17145 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20083, 18609, 18609, 18609, 40399, 40037, 40056, 40077,
  /* 17160 */ 40113, 40149, 40133, 40061, 40126, 40040, 40174, 40208, 18609, 18609, 25115, 18609, 36221, 18609, 18609,
  /* 17175 */ 18609, 18547, 18558, 18609, 37726, 40233, 20517, 19183, 40287, 38587, 18608, 18627, 18609, 18651, 20854,
  /* 17190 */ 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 18823, 18718, 18736, 18754, 19063, 18609, 36203,
  /* 17205 */ 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056, 40256, 18839,
  /* 17220 */ 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001, 19023, 19045,
  /* 17235 */ 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233, 19249,
  /* 17250 */ 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482, 19501, 19193,
  /* 17265 */ 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712, 19767, 19807,
  /* 17280 */ 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696, 20026,
  /* 17295 */ 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17310 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17325 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17340 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17355 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17370 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17385 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17400 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20083, 18609, 18609, 18609, 24220, 18609, 18609,
  /* 17415 */ 26266, 18609, 20105, 40322, 40350, 40358, 18609, 40334, 26970, 18609, 18609, 25115, 18609, 20656, 18609,
  /* 17430 */ 18609, 40499, 18547, 18558, 18609, 37726, 37732, 20517, 19183, 18579, 38587, 18608, 18627, 18609, 18651,
  /* 17445 */ 20854, 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19987, 18718, 18736, 18754, 40271, 18609,
  /* 17460 */ 36203, 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056, 40256,
  /* 17475 */ 18839, 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001, 19023,
  /* 17490 */ 19045, 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209, 19233,
  /* 17505 */ 19249, 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482, 19501,
  /* 17520 */ 19193, 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712, 19767,
  /* 17535 */ 19807, 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003, 23696,
  /* 17550 */ 20026, 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17565 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17580 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17595 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17610 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17625 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17640 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17655 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20083, 18609, 18609, 18609, 24220, 38538,
  /* 17670 */ 18609, 18609, 18609, 40382, 40415, 40430, 40438, 20575, 40462, 26970, 18609, 18609, 25115, 18609, 20656,
  /* 17685 */ 40498, 18609, 18609, 18547, 18558, 18609, 37726, 37732, 20517, 19183, 18579, 38587, 18608, 18627, 18609,
  /* 17700 */ 18651, 20854, 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 19659, 18718, 18736, 18754, 40271,
  /* 17715 */ 18609, 36203, 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847, 18815, 19056,
  /* 17730 */ 40256, 18839, 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957, 18979, 19001,
  /* 17745 */ 19023, 19045, 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129, 19172, 19209,
  /* 17760 */ 19233, 19249, 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498, 19517, 19482,
  /* 17775 */ 19501, 19193, 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696, 19689, 19712,
  /* 17790 */ 19767, 19807, 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945, 19974, 20003,
  /* 17805 */ 23696, 20026, 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17820 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17835 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17850 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17865 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17880 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17895 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17910 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20083, 18609, 18609, 18609, 24220,
  /* 17925 */ 18609, 18609, 18609, 18609, 20105, 18609, 18609, 18609, 18609, 25150, 19104, 18609, 18609, 25115, 18609,
  /* 17940 */ 18609, 18609, 18609, 18609, 36069, 31223, 18609, 30557, 26294, 21726, 28533, 21642, 18609, 18609, 25119,
  /* 17955 */ 18609, 18609, 18609, 18609, 26492, 35411, 31218, 31591, 25209, 25209, 25209, 37012, 21726, 21726, 21726,
  /* 17970 */ 28155, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 36069, 35411, 35447, 25209, 25209, 25209, 25210,
  /* 17985 */ 21722, 21726, 21726, 21726, 29239, 18609, 18609, 18609, 18609, 18609, 18609, 26494, 35411, 25204, 25209,
  /* 18000 */ 25209, 25209, 33261, 21726, 21726, 21726, 21726, 29246, 18609, 18609, 18609, 18609, 26491, 35411, 25208,
  /* 18015 */ 25209, 25209, 33404, 21725, 21726, 21726, 30758, 18609, 18609, 18609, 26489, 37311, 25209, 25209, 22212,
  /* 18030 */ 21726, 21726, 26082, 18609, 18609, 26493, 25208, 22018, 21726, 38725, 18609, 18609, 37308, 25209, 22042,
  /* 18045 */ 38721, 18609, 19791, 28841, 21726, 32070, 22016, 31184, 29511, 31184, 29512, 21935, 22034, 26798, 22038,
  /* 18060 */ 27549, 25694, 37808, 32063, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18075 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18090 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18105 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18120 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18135 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18150 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18165 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18180 */ 18609, 18609, 18609, 40306, 18609, 40515, 40538, 40573, 40581, 40305, 40550, 20658, 18609, 18609, 18609,
  /* 18195 */ 18609, 20656, 18609, 18609, 18609, 18547, 18558, 18609, 37726, 37732, 20517, 19183, 24465, 38587, 18608,
  /* 18210 */ 19308, 18609, 18651, 20854, 30769, 18671, 18941, 18700, 38593, 18716, 18734, 18752, 18823, 18718, 18736,
  /* 18225 */ 18754, 40271, 18609, 36203, 18609, 18609, 37367, 26470, 40589, 18770, 18786, 18684, 40248, 40264, 18847,
  /* 18240 */ 18815, 19056, 40256, 18839, 21362, 20518, 21826, 19403, 28297, 18866, 26914, 21746, 18891, 18927, 18957,
  /* 18255 */ 18979, 19001, 19023, 19045, 18963, 18985, 19007, 19029, 19929, 36922, 19079, 38878, 19095, 18592, 19129,
  /* 18270 */ 19172, 19209, 19233, 19249, 19270, 19209, 19233, 19297, 19341, 19372, 19392, 33832, 19435, 19479, 19498,
  /* 18285 */ 19517, 19482, 19501, 19193, 25174, 19544, 33361, 18906, 19560, 18911, 19565, 19581, 19597, 19631, 19696,
  /* 18300 */ 19689, 19712, 19767, 19807, 19823, 19821, 19839, 19855, 19871, 19899, 19905, 19921, 19926, 19958, 19945,
  /* 18315 */ 19974, 20003, 23696, 20026, 20040, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18330 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18345 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18360 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18375 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18390 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18405 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18420 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 0, 2, 3, 94212, 5, 6,
  /* 18438 */ 0, 0, 0, 0, 0, 0, 78066, 78066, 78066, 78066, 0, 0, 82165, 82165, 78066, 78066, 82165, 82165, 82165,
  /* 18457 */ 82165, 82165, 82165, 82165, 82165, 82165, 82165, 82165, 82165, 82165, 82165, 82165, 82165, 82165, 82165,
  /* 18472 */ 82165, 82165, 82165, 82165, 82165, 82165, 82165, 292, 82165, 82165, 82165, 82165, 82165, 82165, 0, 0, 2,
  /* 18489 */ 2, 3, 94212, 5, 6, 0, 0, 0, 82165, 49152, 53248, 82165, 82165, 82165, 82165, 82165, 45056, 82165, 82165,
  /* 18508 */ 82165, 82165, 82165, 82165, 82165, 82165, 0, 0, 78066, 82165, 78066, 82165, 82165, 82165, 0, 78066, 0, 0,
  /* 18526 */ 82165, 0, 1060864, 248, 249, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 1122304,
  /* 18551 */ 1122304, 1122304, 1122304, 1122304, 1122304, 1122304, 1122304, 1122304, 1122304, 1122304, 1122304,
  /* 18562 */ 1122304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 247, 0, 247, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 1388544, 0, 0,
  /* 18591 */ 1417216, 0, 0, 0, 0, 0, 0, 1896448, 1916928, 1363968, 1122304, 1122304, 1122304, 1122304, 1466368,
  /* 18606 */ 1122304, 1122304, 1740800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266, 267, 292, 292, 0, 0, 0, 0,
  /* 18633 */ 0, 1396736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1944, 0, 0, 0, 1948, 0, 0, 0, 0, 0, 1064960, 0, 0, 0, 0, 0, 0, 0,
  /* 18662 */ 0, 0, 0, 0, 0, 0, 1822, 0, 0, 0, 1712128, 1753088, 1888256, 0, 0, 0, 1122304, 1122304, 1388544, 1122304,
  /* 18682 */ 1122304, 1122304, 1122304, 1122304, 1122304, 0, 0, 1691648, 0, 0, 0, 1122304, 1122304, 1114112, 1114112,
  /* 18697 */ 1114112, 1380352, 1114112, 1122304, 1753088, 1122304, 1122304, 1122304, 1888256, 1122304, 1122304,
  /* 18708 */ 1122304, 1122304, 0, 1753088, 0, 1667072, 0, 1753088, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 18721 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1544192, 1114112, 1114112, 1114112, 1114112,
  /* 18732 */ 1114112, 1581056, 1114112, 1581056, 1114112, 1597440, 1114112, 1605632, 1114112, 1114112, 1646592,
  /* 18743 */ 1114112, 1114112, 1667072, 1679360, 1114112, 1114112, 1114112, 1712128, 1114112, 1712128, 1114112,
  /* 18754 */ 1114112, 1753088, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 18765 */ 1114112, 1888256, 1114112, 1114112, 1114112, 0, 0, 1691648, 1122304, 1380352, 1122304, 1122304, 1122304,
  /* 18778 */ 1122304, 1122304, 1122304, 1122304, 1507328, 1122304, 1122304, 1540096, 1122304, 1572864, 1122304,
  /* 18789 */ 1122304, 1122304, 1122304, 1675264, 1683456, 1691648, 1122304, 1122304, 1122304, 1122304, 1122304,
  /* 18800 */ 1122304, 1122304, 0, 0, 1691648, 0, 0, 0, 1122304, 1122304, 1114112, 1114797, 1114797, 1381037, 1114797,
  /* 18815 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1900544, 1114112, 1114112, 1114112, 1114112,
  /* 18826 */ 1114112, 1114112, 1114112, 1114112, 0, 0, 0, 0, 1114112, 1114112, 1388544, 1114112, 1114112, 1114112,
  /* 18840 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1675264, 1683456, 1691648, 1114112,
  /* 18851 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 18862 */ 1114112, 1114112, 1114112, 248, 0, 0, 0, 1744896, 0, 0, 0, 0, 1716224, 0, 0, 0, 0, 0, 0, 0, 248, 248, 248,
  /* 18885 */ 248, 248, 248, 248, 248, 248, 1601536, 0, 0, 0, 0, 1122304, 1122304, 1122304, 1421312, 1425408, 1122304,
  /* 18902 */ 1122304, 1122304, 1122304, 1523712, 1122304, 1114112, 1114112, 1114112, 1114112, 1114112, 1445888,
  /* 18913 */ 1478656, 1482752, 1114112, 1114112, 1519616, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 18924 */ 1761280, 1114112, 1114112, 1122304, 1122304, 1601536, 1122304, 1122304, 1638400, 1122304, 1744896,
  /* 18935 */ 1122304, 1122304, 1122304, 1122304, 1122304, 1122304, 1122304, 1122304, 1544192, 1122304, 1122304,
  /* 18946 */ 1581056, 1122304, 1597440, 1122304, 1122304, 1646592, 1667072, 1679360, 1122304, 1122304, 1712128,
  /* 18957 */ 1122304, 1961984, 0, 1122304, 1122304, 1114112, 1114112, 1114112, 1114112, 1114112, 1421312, 1425408,
  /* 18969 */ 1114112, 1114112, 1114112, 1458176, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 18980 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1523712, 1114112, 1114112, 1114112, 1114112,
  /* 18991 */ 1114112, 1114112, 1114112, 1601536, 1114112, 1114112, 1114112, 1114112, 1638400, 1114112, 1114112,
  /* 19002 */ 1114112, 1114112, 1114112, 1638400, 1114112, 1650688, 1658880, 1114112, 1114112, 1114112, 1728512,
  /* 19013 */ 1744896, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19024 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1839104, 1851392, 1114112, 1114112, 1114112, 1880064,
  /* 19035 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1961984, 1114112, 1114112,
  /* 19046 */ 1114112, 1114112, 1114112, 1961984, 1114112, 0, 0, 0, 0, 1077248, 0, 0, 0, 0, 1114112, 1114112, 1380352,
  /* 19063 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 0, 1114112, 1114112,
  /* 19076 */ 1114112, 1114112, 2166784, 0, 0, 0, 1859584, 0, 1937408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1671168, 0, 0,
  /* 19097 */ 1466368, 1589248, 0, 1953792, 0, 0, 1503232, 0, 0, 0, 0, 0, 0, 0, 248, 249, 0, 0, 0, 0, 0, 0, 0, 248, 249,
  /* 19122 */ 0, 0, 0, 0, 0, 0, 509, 1527808, 1122304, 1589248, 1122304, 1122304, 1122304, 1757184, 1122304, 1122304,
  /* 19138 */ 1122304, 1859584, 1122304, 1896448, 1916928, 1953792, 1122304, 1114797, 1114797, 1114797, 1114797,
  /* 19149 */ 1114797, 1446573, 1479341, 1483437, 1114797, 1114797, 1520301, 1114797, 1114797, 1114797, 1114797,
  /* 19160 */ 1639085, 1114797, 1651373, 1659565, 1114797, 1114797, 1114797, 1729197, 1745581, 1114797, 1114797,
  /* 19171 */ 1114797, 1122304, 1363968, 1114112, 1114112, 1114112, 1114112, 1114112, 1437696, 1114112, 1114112,
  /* 19182 */ 1466368, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 0, 0, 1114112, 1114112,
  /* 19195 */ 1114112, 1114112, 0, 0, 0, 0, 1454080, 0, 0, 1482752, 1519616, 0, 0, 1810432, 1114112, 1527808, 1548288,
  /* 19212 */ 1114112, 1560576, 1114112, 1114112, 1589248, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19223 */ 1114112, 1114112, 248, 0, 249, 0, 0, 0, 1433600, 0, 1757184, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19239 */ 1114112, 1114112, 1114112, 1114112, 1859584, 1114112, 1114112, 1896448, 1114112, 1916928, 1114112,
  /* 19250 */ 1114112, 1114112, 1953792, 1114112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 252, 252, 0, 0, 0, 1363968,
  /* 19272 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1437696, 1114112, 1114112, 1466368, 1114112, 1114112,
  /* 19283 */ 1114112, 1114112, 1114112, 1114112, 1114112, 0, 0, 0, 1114112, 1114112, 1114112, 1114112, 241664, 0,
  /* 19297 */ 1114112, 1114112, 1114112, 1953792, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 0,
  /* 19310 */ 0, 0, 0, 0, 0, 1396736, 0, 0, 0, 0, 0, 0, 0, 0, 879, 0, 0, 0, 0, 0, 0, 0, 0, 1178, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19342 */ 0, 0, 1486848, 0, 1626112, 1699840, 0, 1748992, 0, 1806336, 0, 1814528, 0, 1826816, 0, 0, 0, 0, 1613824,
  /* 19361 */ 0, 0, 0, 0, 0, 1122304, 1122304, 0, 1114797, 1114797, 1389229, 1957888, 0, 0, 1695744, 0, 0, 0, 0, 0, 0,
  /* 19382 */ 0, 0, 0, 0, 0, 0, 0, 2035, 0, 0, 0, 0, 1609728, 0, 0, 0, 0, 1863680, 0, 0, 1855488, 0, 0, 0, 0, 0, 0, 0,
  /* 19410 */ 1523712, 0, 0, 1650688, 0, 0, 0, 0, 0, 0, 0, 294912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 294912, 1552384,
  /* 19436 */ 1122304, 1122304, 1695744, 1814528, 1122304, 1855488, 1122304, 1122304, 1122304, 1114112, 1114112,
  /* 19447 */ 1114112, 1409024, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 744, 0, 106496, 747,
  /* 19460 */ 1114112, 1114112, 1388544, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 810, 0, 0,
  /* 19473 */ 1114112, 1114112, 1114112, 1114112, 810, 0, 1114112, 1114112, 1114112, 1486848, 1114112, 1114112, 1114112,
  /* 19486 */ 1114112, 1552384, 1114112, 1114112, 1609728, 1626112, 1114112, 1114112, 1695744, 1699840, 1114112,
  /* 19497 */ 1114112, 1699840, 1114112, 1114112, 1769472, 1114112, 1114112, 1806336, 1114112, 1814528, 1114112,
  /* 19508 */ 1114112, 1855488, 1875968, 1114112, 1114112, 1114112, 1925120, 1114112, 1966080, 1925120, 1114112,
  /* 19519 */ 1966080, 0, 0, 0, 0, 1114112, 1114112, 1114112, 1409024, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19533 */ 1114112, 1114112, 0, 0, 0, 1114112, 1114112, 1114112, 1114112, 245760, 0, 0, 1478656, 0, 0, 0, 0, 0, 0, 0,
  /* 19553 */ 0, 0, 0, 0, 0, 0, 1781760, 1114112, 1114112, 1761280, 1114112, 1114112, 1810432, 1114112, 1114112,
  /* 19568 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1404928, 0, 0, 0, 0, 0, 0,
  /* 19583 */ 1765376, 0, 1929216, 0, 1576960, 0, 1556480, 1536000, 1585152, 0, 0, 1794048, 0, 1904640, 0, 1368064, 0,
  /* 19600 */ 0, 1798144, 1941504, 0, 0, 0, 1617920, 0, 0, 0, 0, 0, 0, 0, 912, 0, 0, 0, 0, 0, 0, 0, 0, 1430, 0, 0, 0, 0,
  /* 19628 */ 0, 0, 0, 1429504, 1630208, 0, 1122304, 1429504, 1122304, 1122304, 1630208, 1122304, 1122304, 1122304,
  /* 19642 */ 1122304, 1122304, 1372160, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1040, 0, 0,
  /* 19655 */ 1043, 1114112, 1114112, 1388544, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1041, 0,
  /* 19668 */ 0, 1044, 1114112, 1114112, 1388544, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 249856,
  /* 19681 */ 0, 0, 1114112, 1114112, 1114112, 1114112, 249856, 0, 1114112, 1114112, 1114112, 1933312, 1372160, 1114112,
  /* 19695 */ 1114112, 1429504, 1114112, 1114112, 1114112, 1511424, 1114112, 1114112, 1576960, 1630208, 1114112,
  /* 19706 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19717 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1933312, 1114112, 1114112, 1114112, 1114112, 0, 0, 0, 248, 0,
  /* 19732 */ 249, 0, 0, 0, 249, 0, 0, 0, 1421312, 0, 0, 0, 0, 1454, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126976, 0, 0, 0,
  /* 19761 */ 0, 0, 0, 0, 0, 0, 1441792, 0, 0, 0, 1703936, 0, 1822720, 0, 0, 1921024, 0, 1564672, 1785856, 0, 0, 0, 0,
  /* 19784 */ 0, 257, 258, 259, 260, 261, 262, 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 439, 439, 439, 0,
  /* 19808 */ 1777664, 0, 1392640, 0, 1634304, 1392640, 1441792, 1122304, 1634304, 1822720, 1564672, 1785856, 1114112,
  /* 19821 */ 1392640, 1400832, 1441792, 1114112, 1114112, 1114112, 1114112, 1564672, 1634304, 1703936, 1785856,
  /* 19832 */ 1114112, 1822720, 1114112, 1114112, 1114112, 1921024, 1114112, 1921024, 1114112, 1114112, 0, 0, 0, 0, 0,
  /* 19847 */ 1720320, 0, 0, 0, 0, 1687552, 0, 1970176, 1499136, 1499136, 1114112, 1490944, 1499136, 1114112, 1114112,
  /* 19862 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1912832, 1114112, 1490944, 1499136, 1114112,
  /* 19873 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1912832, 1114112, 1114112, 0, 0, 0, 0, 0,
  /* 19888 */ 0, 1467, 0, 0, 0, 0, 0, 1473, 0, 0, 0, 0, 1724416, 0, 0, 0, 0, 1114112, 1114112, 1114112, 1114112,
  /* 19909 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 1449984, 0, 0, 1818624, 0, 0,
  /* 19924 */ 0, 0, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19937 */ 0, 0, 0, 0, 0, 0, 1433600, 0, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19953 */ 1413120, 0, 1470464, 1835008, 0, 0, 0, 1114112, 1114112, 1515520, 1114112, 1114112, 1114112, 1114112,
  /* 19967 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1515520, 1114112, 1114112, 1531904, 1114112, 1708032,
  /* 19978 */ 1114112, 1114112, 1114112, 1835008, 1114112, 1114112, 1531904, 1114112, 1708032, 1114112, 1114112,
  /* 19989 */ 1114112, 1114112, 1114112, 1114112, 1114112, 744, 0, 0, 747, 1114112, 1114112, 1388544, 1114112, 1114112,
  /* 20003 */ 1835008, 1114112, 1114112, 1462272, 0, 0, 0, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 20016 */ 1114112, 1114112, 1114112, 0, 307200, 1114112, 1114112, 1114112, 1114112, 0, 1114112, 1830912, 1474560, 0,
  /* 20030 */ 1773568, 1114112, 1568768, 1789952, 1114112, 1114112, 1568768, 1789952, 1114112, 1593344, 1495040,
  /* 20041 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1802240, 1802240, 0, 0, 0, 0, 0, 0, 0, 932,
  /* 20058 */ 388, 388, 388, 388, 388, 388, 388, 388, 947, 388, 388, 388, 388, 388, 388, 388, 388, 388, 1703, 388, 388,
  /* 20079 */ 388, 388, 388, 388, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 287, 0, 0, 0, 0, 287, 0, 49152,
  /* 20107 */ 53248, 0, 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 0, 0, 248, 249, 0, 0, 0, 0, 0, 508, 0, 0, 0, 0, 115055,
  /* 20134 */ 115055, 115055, 0, 115055, 0, 0, 0, 0, 0, 0, 115055, 367, 367, 367, 367, 367, 367, 367, 115055, 115055,
  /* 20154 */ 115055, 115055, 115055, 115055, 115055, 115055, 115055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0,
  /* 20176 */ 0, 159744, 0, 0, 0, 159744, 0, 159744, 0, 0, 115055, 115055, 115055, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0,
  /* 20200 */ 0, 0, 273, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 317, 0, 0, 0, 333, 0, 0, 122880, 0, 0, 248, 122880, 0, 0, 0, 0,
  /* 20229 */ 0, 0, 0, 0, 0, 0, 0, 263, 264, 265, 0, 0, 0, 123214, 53248, 0, 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 0, 0,
  /* 20257 */ 248, 249, 0, 0, 0, 506, 0, 0, 0, 248, 248, 0, 0, 248, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 282, 0,
  /* 20286 */ 0, 0, 0, 0, 0, 282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2094, 2, 6, 0, 0, 0, 248, 0, 0, 0,
  /* 20317 */ 1388544, 0, 0, 1417216, 0, 0, 0, 0, 0, 288, 0, 388, 457, 457, 457, 457, 457, 481, 457, 457, 0, 2, 1138922,
  /* 20340 */ 94212, 5, 6, 238, 0, 0, 0, 0, 0, 238, 0, 0, 0, 0, 0, 289, 290, 291, 0, 292, 0, 0, 0, 0, 0, 0, 0, 290816,
  /* 20368 */ 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 0, 0, 0, 0, 0, 0, 0, 0, 849, 0, 388, 388,
  /* 20388 */ 972, 439, 439, 439, 0, 0, 0, 126976, 126976, 126976, 0, 126976, 0, 0, 126976, 0, 126976, 0, 126976, 0,
  /* 20408 */ 126976, 126976, 126976, 126976, 126976, 126976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
  /* 20432 */ 126976, 126976, 0, 0, 0, 2, 2, 1138922, 94212, 5, 6, 0, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20459 */ 892, 892, 0, 0, 895, 1197, 2, 6, 0, 0, 0, 0, 817, 821, 0, 1388544, 0, 0, 1417216, 0, 0, 0, 0, 0, 307, 325,
  /* 20485 */ 0, 0, 0, 0, 0, 0, 325, 0, 0, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1900544, 1114112,
  /* 20502 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1319, 0, 0, 1324, 0, 1114112, 1114112,
  /* 20516 */ 1380352, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 20527 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 0, 49152, 53248, 0, 135168, 0, 0, 0, 45056, 0, 0,
  /* 20545 */ 0, 0, 0, 0, 0, 289, 0, 0, 0, 0, 289, 0, 289, 0, 0, 135168, 0, 0, 135168, 0, 0, 135168, 135168, 135168,
  /* 20569 */ 135168, 135168, 135168, 135168, 135168, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 942080,
  /* 20591 */ 135168, 135168, 0, 0, 135168, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388,
  /* 20615 */ 388, 388, 1488, 388, 388, 0, 0, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 159744, 0,
  /* 20640 */ 49152, 53248, 0, 0, 139264, 0, 0, 45056, 0, 0, 0, 0, 0, 0, 0, 291, 0, 0, 0, 0, 0, 0, 0, 0, 1060864, 0, 0,
  /* 20667 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 139264, 139264, 139264, 139264, 139264, 139264, 139264, 139264,
  /* 20686 */ 139264, 139264, 139264, 139264, 0, 0, 139264, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 388, 388, 388,
  /* 20709 */ 388, 388, 388, 388, 1487, 388, 388, 388, 0, 0, 0, 0, 0, 0, 388, 1253, 972, 439, 439, 439, 439, 439, 0, 0,
  /* 20733 */ 1562, 0, 0, 0, 0, 0, 1568, 0, 0, 0, 335, 335, 0, 0, 0, 0, 0, 335, 0, 0, 0, 0, 0, 0, 0, 296, 0, 0, 0, 0, 0,
  /* 20764 */ 0, 0, 0, 0, 0, 0, 0, 0, 1183, 0, 0, 143360, 0, 0, 249, 143360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 0, 0,
  /* 20794 */ 0, 0, 0, 0, 0, 49152, 143698, 0, 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 0, 0, 329, 329, 329, 329, 329, 329,
  /* 20820 */ 329, 329, 329, 249, 249, 0, 0, 249, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 439, 439, 439, 439, 2199,
  /* 20846 */ 439, 2201, 439, 2203, 439, 462, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1388544, 2, 6, 0,
  /* 20873 */ 0, 0, 0, 0, 0, 249, 1388544, 0, 0, 1417216, 0, 0, 0, 0, 0, 439, 439, 439, 2198, 439, 439, 439, 439, 439,
  /* 20897 */ 439, 462, 462, 0, 0, 1918, 0, 0, 0, 0, 0, 0, 0, 0, 0, 593, 0, 0, 0, 0, 0, 0, 0, 0, 246, 246, 0, 0, 246,
  /* 20926 */ 246, 147702, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 147702, 246, 246, 246, 246, 246,
  /* 20945 */ 49152, 53248, 246, 246, 246, 246, 246, 45056, 246, 246, 246, 246, 246, 246, 246, 246, 246, 293, 246, 246,
  /* 20965 */ 246, 147702, 246, 246, 246, 246, 246, 147702, 147702, 147702, 246, 147702, 246, 246, 246, 147702, 147702,
  /* 20982 */ 147702, 147702, 246, 246, 246, 297, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
  /* 21002 */ 246, 246, 147702, 246, 147702, 147702, 147702, 147702, 147702, 147702, 147702, 0, 0, 0, 246, 0, 246, 246,
  /* 21020 */ 246, 246, 246, 246, 147702, 246, 147702, 246, 147702, 246, 147702, 147702, 147702, 147702, 147702, 147702,
  /* 21036 */ 147702, 147753, 147753, 147753, 147753, 147753, 147753, 147753, 147753, 147702, 147702, 147702, 0, 0, 2,
  /* 21051 */ 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 439, 439, 2197, 439, 439, 439, 439, 439, 439, 439, 462, 462, 0, 1917, 0,
  /* 21076 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1818, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1135137, 1135137, 1135137, 0, 0, 0, 0, 0, 0,
  /* 21104 */ 0, 0, 0, 0, 319, 0, 0, 0, 0, 0, 1135137, 1135137, 0, 0, 0, 0, 0, 1396736, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21131 */ 192880, 192880, 192880, 192880, 192880, 192880, 192880, 192880, 192880, 0, 49152, 53248, 159744, 0, 0, 0,
  /* 21147 */ 0, 45056, 0, 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 937, 388, 388, 388, 159744, 159744, 159744,
  /* 21168 */ 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 0,
  /* 21182 */ 0, 0, 0, 0, 0, 0, 0, 276, 277, 278, 279, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 159744, 159744, 0, 0, 0, 0, 0,
  /* 21209 */ 159744, 0, 0, 0, 0, 0, 531, 532, 0, 0, 0, 0, 0, 0, 0, 0, 0, 676, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 159744,
  /* 21237 */ 159744, 0, 0, 2, 2, 0, 94212, 5, 6, 131072, 0, 0, 0, 0, 1439, 1440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229376,
  /* 21264 */ 0, 0, 0, 0, 0, 0, 0, 0, 163840, 163840, 163840, 0, 163840, 0, 0, 0, 163840, 0, 163840, 163840, 163840,
  /* 21285 */ 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 0,
  /* 21299 */ 0, 0, 0, 0, 106957, 163840, 0, 0, 0, 163840, 0, 0, 0, 163840, 0, 106957, 106957, 106957, 106957, 106957,
  /* 21319 */ 106957, 106957, 106957, 163840, 163840, 106957, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 577, 0, 0, 0,
  /* 21342 */ 0, 0, 0, 0, 0, 0, 0, 1148, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 1114112, 1114112, 1380352, 1114112, 1114112,
  /* 21364 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 21375 */ 1114112, 1900544, 1114112, 0, 0, 0, 167936, 167936, 167936, 0, 167936, 0, 0, 0, 0, 0, 0, 167936, 167936,
  /* 21394 */ 167936, 167936, 167936, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 606, 0, 608, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21421 */ 1845, 0, 388, 388, 388, 388, 388, 388, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936,
  /* 21437 */ 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 304, 0, 0, 0, 0,
  /* 21458 */ 0, 0, 0, 0, 0, 0, 1064960, 891, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 537, 0, 0, 0, 0, 0, 49152, 53248, 172032,
  /* 21486 */ 0, 0, 0, 0, 45056, 172032, 0, 172032, 0, 172032, 0, 172032, 172032, 172032, 172032, 172032, 172032, 0,
  /* 21504 */ 172032, 0, 0, 0, 0, 0, 172032, 172032, 172032, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 172032, 172032,
  /* 21526 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 21539 */ 172032, 0, 0, 0, 0, 0, 0, 0, 0, 328, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 235, 5, 6, 0, 239, 0, 0, 0, 0, 0, 0, 0,
  /* 21571 */ 0, 329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176128, 176128, 176128, 0, 176128, 0, 0, 0, 0, 0, 0, 176128, 176128,
  /* 21596 */ 176128, 176128, 176128, 57574, 57574, 2, 2, 3, 0, 5, 6, 0, 499, 0, 176128, 176128, 176128, 176128, 176128,
  /* 21615 */ 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 0, 0, 0, 0, 0, 0,
  /* 21632 */ 0, 0, 388, 388, 1692, 388, 388, 388, 388, 388, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 0,
  /* 21660 */ 301, 0, 0, 873, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 274, 0, 0, 0, 907, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21693 */ 0, 0, 0, 0, 172032, 0, 0, 0, 0, 0, 0, 0, 1210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 294912, 0, 0, 0,
  /* 21723 */ 107538, 0, 0, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 801, 0, 0,
  /* 21745 */ 1411, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1425408, 0, 439, 1622, 439, 439, 462, 1625, 462, 462, 0,
  /* 21771 */ 0, 0, 0, 0, 0, 0, 0, 572, 520, 0, 0, 567, 0, 0, 0, 439, 1720, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 21797 */ 439, 439, 439, 439, 439, 439, 1321, 462, 1765, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 21818 */ 462, 462, 799, 462, 0, 0, 0, 1827, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1421312, 0, 0, 439, 439, 439,
  /* 21845 */ 439, 2052, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1872, 439, 439, 439, 439, 439,
  /* 21866 */ 439, 2064, 462, 462, 462, 462, 462, 462, 2070, 462, 462, 462, 462, 462, 1112, 439, 439, 1115, 0, 0, 1116,
  /* 21887 */ 462, 462, 1119, 0, 439, 439, 439, 439, 439, 2104, 439, 2105, 2106, 439, 439, 439, 439, 439, 439, 462,
  /* 21907 */ 2065, 462, 462, 462, 462, 462, 462, 462, 2072, 462, 462, 0, 388, 439, 2136, 439, 439, 439, 439, 439, 439,
  /* 21928 */ 2142, 439, 439, 439, 462, 2146, 2176, 462, 462, 462, 462, 462, 462, 462, 462, 462, 439, 462, 0, 0, 0, 0,
  /* 21950 */ 0, 0, 0, 439, 2225, 439, 439, 439, 439, 439, 439, 439, 439, 462, 2234, 462, 462, 0, 0, 0, 439, 439, 439,
  /* 21973 */ 439, 462, 462, 462, 462, 0, 439, 2291, 184810, 184810, 0, 0, 184810, 57574, 57574, 2, 2, 3, 94212, 5, 6,
  /* 21994 */ 0, 0, 0, 0, 0, 615, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 0, 901, 0, 0, 0, 0, 388, 439, 439, 439, 439, 439,
  /* 22023 */ 439, 439, 439, 439, 439, 439, 439, 462, 462, 462, 462, 0, 0, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 22045 */ 439, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1069, 1071, 462, 462, 0, 0, 0, 192880,
  /* 22066 */ 192880, 192880, 0, 192880, 0, 0, 0, 0, 0, 0, 192880, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22093 */ 583, 0, 0, 0, 192880, 192880, 192880, 192880, 192880, 192880, 192880, 192880, 0, 0, 0, 0, 250, 0, 0, 0, 0,
  /* 22114 */ 0, 835, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1164, 0, 0, 0, 0, 0, 192880, 192880, 192880, 192880, 0, 0, 0, 2, 2,
  /* 22141 */ 3, 94212, 5, 6, 0, 0, 0, 0, 0, 849, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2091, 0, 0, 2092, 0, 0, 0, 0, 247, 0, 0,
  /* 22172 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 309, 0, 310, 329, 329, 0, 0, 329, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0,
  /* 22200 */ 0, 0, 0, 0, 860, 0, 0, 0, 920, 388, 388, 972, 439, 439, 439, 0, 0, 0, 0, 462, 462, 462, 462, 462, 462,
  /* 22225 */ 462, 462, 462, 462, 462, 1760, 462, 462, 462, 0, 0, 0, 580, 892, 0, 0, 895, 0, 0, 0, 0, 0, 0, 0, 0, 581,
  /* 22251 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 0, 0, 0, 1120, 0, 0, 0, 1126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22283 */ 830, 0, 0, 0, 0, 1401, 0, 0, 0, 0, 1126, 1403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 0, 0, 0, 0, 0, 0, 0, 439,
  /* 22313 */ 439, 439, 1748, 0, 1750, 0, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1759, 462, 462, 462, 462, 0,
  /* 22335 */ 49152, 53248, 0, 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 0, 252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22365 */ 525, 0, 0, 204800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 204800, 251, 252, 0, 204800, 204800, 204800,
  /* 22388 */ 204800, 204800, 205052, 205052, 204800, 204800, 204800, 204800, 205051, 204800, 204800, 204800, 204800,
  /* 22401 */ 205051, 205051, 204800, 204800, 204800, 204800, 204800, 0, 0, 0, 0, 0, 0, 0, 0, 592, 0, 0, 0, 0, 0, 0,
  /* 22423 */ 598, 0, 0, 204800, 205051, 204800, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 910, 0, 0, 0, 0, 0, 0, 0,
  /* 22450 */ 918, 0, 918, 0, 0, 0, 1135138, 155648, 1135138, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 0, 388, 388, 388, 935,
  /* 22473 */ 388, 388, 939, 388, 388, 0, 1135138, 0, 0, 0, 0, 0, 1396736, 0, 0, 0, 0, 0, 0, 0, 0, 596, 0, 0, 611, 0, 0,
  /* 22500 */ 0, 0, 1114797, 1581741, 1114797, 1598125, 1114797, 1606317, 1114797, 1114797, 1647277, 1114797, 1114797,
  /* 22513 */ 1667757, 1680045, 1114797, 1114797, 1114797, 1114797, 1962669, 1114797, 0, 0, 0, 0, 1077248, 0, 0, 0, 0,
  /* 22530 */ 1114858, 1114858, 1381098, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858,
  /* 22541 */ 1114858, 1114797, 1114858, 0, 0, 0, 0, 0, 1712813, 1114797, 1114797, 1753773, 1114797, 1114797, 1114797,
  /* 22556 */ 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1888941, 1114797, 1114797, 1761965,
  /* 22567 */ 1114797, 1114797, 1811117, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114858, 1114858,
  /* 22578 */ 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1544938, 1114858, 1114858, 1114858,
  /* 22589 */ 1114858, 1114858, 1581802, 1114797, 1540781, 1114797, 1114797, 1114797, 1114797, 1573549, 1114797,
  /* 22600 */ 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 744, 0, 0, 747, 1114858, 1114858,
  /* 22614 */ 1389290, 1114858, 1114858, 1675949, 1684141, 1692333, 1114797, 1114797, 1114797, 1114797, 1114797,
  /* 22625 */ 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 745, 1114858, 1114858, 1114858,
  /* 22637 */ 1122304, 1961984, 0, 1122304, 1122304, 1114797, 1114797, 1114797, 1114797, 1114797, 1421997, 1426093,
  /* 22649 */ 1114797, 1114797, 1114797, 1458861, 1651434, 1659626, 1114858, 1114858, 1114858, 1729258, 1745642,
  /* 22660 */ 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1114797,
  /* 22671 */ 1114858, 0, 1449984, 0, 0, 1839850, 1852138, 1114858, 1114858, 1114858, 1880810, 1114858, 1114858,
  /* 22684 */ 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1962730, 1114858, 1598186, 1114858, 1606378,
  /* 22695 */ 1114858, 1114858, 1647338, 1114858, 1114858, 1667818, 1680106, 1114858, 1114858, 1114858, 1712874,
  /* 22706 */ 1114858, 1446634, 1479402, 1483498, 1114858, 1114858, 1520362, 1114858, 1114858, 1114858, 1114858,
  /* 22717 */ 1114858, 1114858, 1762026, 1114858, 1114858, 1524458, 1114858, 1114858, 1114858, 1114858, 1114858,
  /* 22728 */ 1114858, 1114858, 1602282, 1114858, 1114858, 1114858, 1114858, 1639146, 1114858, 1528554, 1549034,
  /* 22739 */ 1114858, 1561322, 1114858, 1114858, 1589994, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858,
  /* 22750 */ 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1901290,
  /* 22761 */ 1114858, 1122304, 1364653, 1114797, 1114797, 1114797, 1114797, 1114797, 1438381, 1114797, 1114797,
  /* 22772 */ 1467053, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1901229, 1114797, 1114797, 1114797,
  /* 22783 */ 1114797, 1114797, 1114797, 1114797, 1114797, 0, 1757869, 1114797, 1114797, 1114797, 1114797, 1114797,
  /* 22795 */ 1114797, 1114797, 1114797, 1114797, 1860269, 1114797, 1114797, 1897133, 1114797, 1917613, 0, 1364714,
  /* 22807 */ 1114858, 1114858, 1114858, 1114858, 1114858, 1438442, 1114858, 1114858, 1467114, 1114858, 1114858,
  /* 22818 */ 1114858, 1114858, 1114858, 1114858, 1114858, 1114797, 1114797, 1114797, 1114797, 1114858, 1114858,
  /* 22829 */ 1114858, 1114858, 0, 0, 0, 0, 0, 0, 1433600, 0, 1757930, 1114858, 1114858, 1114858, 1114858, 1114858,
  /* 22845 */ 1114858, 1114858, 1114858, 1114858, 1860330, 1114858, 1114858, 1897194, 1114858, 1917674, 1552384,
  /* 22856 */ 1122304, 1122304, 1695744, 1814528, 1122304, 1855488, 1122304, 1122304, 1122304, 1114797, 1114797,
  /* 22867 */ 1114797, 1409709, 1114797, 1114797, 1114797, 1933997, 1372906, 1114858, 1114858, 1430250, 1114858,
  /* 22878 */ 1114858, 1114858, 1512170, 1114858, 1114858, 1577706, 1630954, 1700525, 1114797, 1114797, 1770157,
  /* 22889 */ 1114797, 1114797, 1807021, 1114797, 1815213, 1114797, 1114797, 1856173, 1876653, 1114797, 1114797,
  /* 22900 */ 1114797, 1487533, 1114797, 1114797, 1114797, 1114797, 1553069, 1114797, 1114797, 1610413, 1626797,
  /* 22911 */ 1114797, 1114797, 1696429, 1925805, 1114797, 1966765, 0, 0, 0, 0, 1114858, 1114858, 1114858, 1409770,
  /* 22925 */ 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1934058,
  /* 22936 */ 1114797, 1114797, 1114858, 1114858, 0, 0, 0, 0, 1454080, 0, 0, 1482752, 1519616, 0, 0, 1810432, 1487594,
  /* 22953 */ 1114858, 1114858, 1114858, 1114858, 1553130, 1114858, 1114858, 1610474, 1626858, 1114858, 1114858,
  /* 22964 */ 1696490, 1700586, 1114858, 1114858, 1114858, 1954538, 1114858, 1114797, 1114797, 1114797, 1114858,
  /* 22975 */ 1114858, 1114858, 0, 0, 0, 0, 0, 0, 247, 248, 249, 0, 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 938, 388,
  /* 23000 */ 388, 388, 1770218, 1114858, 1114858, 1807082, 1114858, 1815274, 1114858, 1114858, 1856234, 1876714,
  /* 23012 */ 1114858, 1114858, 1114858, 1925866, 1114858, 1966826, 1811178, 1114858, 1114858, 1114858, 1114858,
  /* 23023 */ 1114858, 1114858, 1114797, 1114797, 1114858, 1114858, 1404928, 0, 0, 0, 0, 0, 0, 1649, 0, 0, 0, 0, 0, 0,
  /* 23043 */ 0, 0, 0, 1457, 0, 0, 0, 0, 0, 0, 1429504, 1630208, 0, 1122304, 1429504, 1122304, 1122304, 1630208,
  /* 23061 */ 1122304, 1122304, 1122304, 1122304, 1122304, 1372845, 1114797, 1114797, 1114797, 1954477, 1114797, 0, 0,
  /* 23074 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 883, 884, 0, 0, 0, 1430189, 1114797, 1114797, 1114797, 1512109, 1114797,
  /* 23094 */ 1114797, 1577645, 1630893, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1839789,
  /* 23105 */ 1852077, 1114797, 1114797, 1114797, 1880749, 1114797, 1114797, 1114797, 1114797, 0, 1777664, 0, 1392640,
  /* 23118 */ 0, 1634304, 1392640, 1441792, 1122304, 1634304, 1822720, 1564672, 1785856, 1114797, 1393325, 1401517,
  /* 23130 */ 1442477, 1114797, 1114797, 1114797, 1114797, 1565357, 1634989, 1704621, 1786541, 1114797, 1823405,
  /* 23141 */ 1114797, 1114797, 1114797, 1921709, 1114858, 1753834, 1114858, 1114858, 1114858, 1114858, 1114858,
  /* 23152 */ 1114858, 1114858, 1114858, 1114858, 1114858, 1889002, 1114858, 1114858, 1114858, 1114797, 1114797,
  /* 23163 */ 1114797, 1114797, 0, 0, 0, 1114858, 1114858, 1114858, 1114858, 0, 0, 0, 1376941, 1114797, 1114797,
  /* 23178 */ 1114797, 1114797, 1831597, 1377002, 1114858, 1114858, 1114858, 1393386, 1401578, 1442538, 1114858,
  /* 23189 */ 1114858, 1114858, 1114858, 1565418, 1635050, 1704682, 1786602, 1114858, 1823466, 1114858, 1114858,
  /* 23200 */ 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1676010, 1684202, 1692394, 1114858, 1114858,
  /* 23211 */ 1114858, 1114858, 1114858, 1114797, 1114797, 1114797, 1114797, 0, 0, 1114858, 1114858, 1114858, 1114858,
  /* 23224 */ 0, 1921770, 1114797, 1114858, 0, 0, 0, 0, 0, 1720320, 0, 0, 0, 0, 1687552, 0, 1970176, 1499136, 1499136,
  /* 23243 */ 1114797, 1491629, 1499821, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797,
  /* 23254 */ 1913517, 1114858, 1491690, 1499882, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858, 1114858,
  /* 23265 */ 1114858, 1913578, 1114797, 1114858, 0, 0, 0, 0, 0, 0, 1676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0,
  /* 23291 */ 135168, 0, 1724416, 0, 0, 0, 0, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797,
  /* 23306 */ 1114797, 1114797, 1114797, 1544877, 1114797, 1114797, 1114797, 1114797, 1818624, 0, 0, 0, 0, 1114797,
  /* 23320 */ 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114858, 1831658,
  /* 23331 */ 1474560, 0, 1773568, 1114797, 1569453, 1790637, 1114797, 1114858, 1569514, 1790698, 1114858, 1593344,
  /* 23343 */ 1495725, 1114797, 1528493, 1548973, 1114797, 1561261, 1114797, 1114797, 1589933, 1114797, 1114797,
  /* 23354 */ 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1524397, 1114797, 1114797, 1114797, 1114797,
  /* 23365 */ 1114797, 1114797, 1114797, 1602221, 0, 0, 1114797, 1114797, 1516205, 1114797, 1114797, 1114797, 1114797,
  /* 23378 */ 1114797, 1114797, 1114797, 1114858, 1114858, 1516266, 1114858, 1114797, 1532589, 1114797, 1708717,
  /* 23389 */ 1114797, 1114797, 1114797, 1835693, 1114858, 1114858, 1532650, 1114858, 1708778, 1114858, 1114858,
  /* 23400 */ 1114858, 1114858, 1422058, 1426154, 1114858, 1114858, 1114858, 1458922, 1114858, 1114858, 1114858,
  /* 23411 */ 1114858, 1114858, 1114858, 1114797, 1114858, 1413120, 0, 1470464, 1835008, 0, 0, 0, 1114797, 1835754,
  /* 23425 */ 1114797, 1114858, 1462272, 0, 0, 0, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114858,
  /* 23438 */ 1114858, 1114858, 1114858, 1508074, 1114858, 1114858, 1114858, 1114858, 1540842, 1114858, 1114858,
  /* 23449 */ 1114858, 1114858, 1573610, 1114858, 1495786, 1114858, 1114797, 1114858, 1114797, 1114858, 1114797,
  /* 23460 */ 1114858, 1802925, 1802986, 0, 0, 0, 0, 0, 0, 0, 1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49152, 53248, 0,
  /* 23486 */ 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 221184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 0, 0, 0, 0, 221184,
  /* 23515 */ 0, 0, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184,
  /* 23529 */ 221184, 221184, 221184, 221184, 221184, 221184, 0, 0, 0, 0, 0, 0, 0, 0, 620, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23553 */ 221184, 221184, 221184, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 929, 0, 0, 0, 0, 388, 971, 972, 439,
  /* 23578 */ 439, 439, 0, 0, 0, 0, 462, 462, 462, 462, 1888, 462, 462, 462, 462, 462, 1996, 462, 462, 462, 462, 462,
  /* 23600 */ 462, 462, 462, 462, 462, 1576, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1380, 462, 462, 462, 462, 462,
  /* 23621 */ 462, 0, 0, 32768, 0, 0, 1572864, 0, 1675264, 0, 0, 0, 0, 1335296, 0, 0, 0, 0, 0, 930, 0, 388, 388, 388,
  /* 23645 */ 388, 388, 388, 388, 388, 388, 950, 388, 951, 388, 388, 388, 388, 1114112, 1114112, 1114112, 1953792,
  /* 23662 */ 1114112, 744, 0, 0, 0, 744, 0, 747, 0, 0, 0, 747, 1925120, 1114112, 1966080, 744, 0, 747, 0, 1114112,
  /* 23682 */ 1114112, 1114112, 1409024, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 811, 0,
  /* 23695 */ 1114112, 1114112, 1114112, 1114112, 0, 0, 0, 1376256, 1114112, 1114112, 1114112, 1114112, 1830912,
  /* 23708 */ 1376256, 1114112, 1114112, 1114112, 0, 0, 0, 225649, 225649, 225649, 0, 225649, 0, 0, 0, 0, 0, 0, 225649,
  /* 23727 */ 225649, 225649, 225649, 225649, 225649, 225649, 225649, 225649, 225649, 225649, 225649, 225649, 225649,
  /* 23740 */ 225649, 225649, 0, 0, 0, 0, 0, 0, 0, 0, 622, 0, 0, 0, 0, 0, 0, 0, 225768, 225768, 225649, 225649, 225775,
  /* 23763 */ 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1159, 0, 0, 1162, 0, 0, 1165, 0, 0, 0, 0, 0, 0, 1060864, 503,
  /* 23791 */ 504, 0, 0, 0, 0, 0, 0, 0, 310, 0, 0, 0, 0, 310, 0, 310, 0, 241664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23822 */ 0, 0, 571, 0, 2, 3, 94212, 5, 6, 0, 0, 253952, 0, 0, 0, 0, 253952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23852 */ 0, 0, 599, 0, 0, 0, 254322, 254322, 254322, 0, 254322, 0, 0, 0, 0, 0, 0, 254322, 253952, 253952, 253952,
  /* 23873 */ 253952, 254322, 253952, 253952, 254322, 254322, 254322, 254322, 254322, 254322, 254322, 254322, 254322, 0,
  /* 23887 */ 0, 0, 0, 0, 0, 0, 0, 848, 0, 388, 388, 972, 439, 439, 439, 0, 0, 254322, 254322, 254322, 0, 0, 2, 2, 3,
  /* 23912 */ 94212, 5, 6, 0, 0, 0, 0, 0, 1175, 0, 0, 0, 0, 1180, 0, 0, 0, 0, 0, 0, 390, 0, 390, 390, 390, 390, 390,
  /* 23939 */ 390, 340, 0, 245760, 0, 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 539, 0, 0, 0, 2, 3, 94212, 5, 6, 0,
  /* 23968 */ 0, 0, 262144, 0, 0, 0, 0, 262144, 0, 0, 0, 259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 612, 0, 0, 0, 0, 0, 0,
  /* 23999 */ 262515, 262515, 262515, 0, 262515, 0, 0, 0, 0, 0, 0, 262515, 262515, 262515, 0, 0, 2, 2, 3, 94212, 0, 6,
  /* 24021 */ 0, 0, 278528, 262515, 262515, 262515, 262515, 262515, 262515, 262515, 262515, 262515, 262515, 262515,
  /* 24035 */ 262515, 262515, 262515, 262515, 262515, 0, 0, 0, 0, 262144, 0, 0, 0, 0, 258048, 270336, 0, 0, 0, 0, 0, 0,
  /* 24057 */ 0, 0, 0, 0, 0, 0, 0, 556, 0, 0, 2, 0, 180224, 299008, 0, 0, 0, 0, 0, 1388544, 0, 0, 1417216, 0, 0, 0, 0,
  /* 24084 */ 0, 1191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1197, 0, 2, 3, 94212, 1147116, 6, 0, 0, 0, 0, 240, 0, 0, 0, 0, 240, 0,
  /* 24113 */ 0, 0, 274432, 0, 274432, 274432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 264, 318, 0, 0, 0, 0, 0, 274432, 274432, 0, 0,
  /* 24139 */ 274432, 0, 0, 2, 2, 3, 94212, 1147116, 6, 0, 0, 0, 0, 0, 1213, 0, 0, 0, 0, 0, 1216, 0, 0, 1219, 0, 282624,
  /* 24165 */ 282624, 0, 0, 282624, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1428, 0, 1429, 0, 0, 0, 0, 0, 1433, 0, 0,
  /* 24193 */ 1323, 107538, 0, 1323, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1083, 462, 462, 1085,
  /* 24213 */ 1401, 0, 0, 0, 0, 0, 1403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 0, 0, 0, 1463, 0, 0, 0, 0, 0, 0,
  /* 24245 */ 0, 0, 0, 0, 0, 0, 0, 568, 0, 0, 0, 0, 49152, 53248, 0, 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 351, 0, 0, 0,
  /* 24274 */ 263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 856, 0, 0, 0, 460, 460, 460, 460, 460, 460, 460, 460, 463, 463,
  /* 24301 */ 463, 463, 463, 463, 463, 463, 460, 460, 463, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1690, 0,
  /* 24325 */ 0, 388, 388, 388, 388, 388, 388, 388, 388, 0, 0, 0, 0, 0, 0, 1252, 388, 972, 439, 439, 439, 439, 439, 439,
  /* 24349 */ 439, 1878, 439, 439, 439, 439, 439, 439, 439, 439, 991, 439, 439, 439, 995, 439, 439, 439, 57575, 2, 3,
  /* 24370 */ 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 520, 0, 0, 0, 0, 0, 0, 0, 0, 290816, 290816, 290816, 0, 290816,
  /* 24397 */ 0, 0, 0, 0, 0, 0, 290816, 0, 0, 0, 278, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2034, 0, 0, 0, 290816, 290816,
  /* 24426 */ 290816, 290816, 290816, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1814, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24453 */ 625, 0, 0, 628, 0, 0, 0, 0, 908, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1388544, 0, 0, 1417216, 0, 0, 0, 0,
  /* 24482 */ 1368064, 0, 0, 1798144, 1941504, 233472, 0, 0, 1617920, 0, 0, 0, 0, 0, 0, 0, 1192, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24507 */ 1638, 0, 0, 0, 0, 0, 0, 0, 0, 232, 3, 94212, 5, 237, 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 1941, 0, 0, 0,
  /* 24537 */ 0, 0, 0, 0, 0, 0, 889, 946, 388, 972, 439, 439, 439, 0, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24566 */ 570, 0, 0, 49152, 53248, 294912, 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 0, 0, 388, 388, 934, 388, 388, 388,
  /* 24590 */ 388, 388, 388, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912,
  /* 24604 */ 294912, 294912, 294912, 294912, 294912, 0, 0, 0, 0, 0, 0, 0, 0, 852, 0, 0, 0, 0, 0, 0, 0, 0, 0, 294912,
  /* 24628 */ 294912, 294912, 0, 0, 232, 232, 3, 94212, 5, 2200050, 0, 0, 0, 0, 0, 1829, 1830, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24653 */ 0, 305, 0, 0, 0, 0, 0, 0, 500, 0, 0, 0, 0, 0, 1060864, 248, 249, 0, 0, 0, 0, 0, 0, 0, 388, 439, 439, 439,
  /* 24681 */ 439, 439, 462, 439, 439, 232, 2200050, 0, 0, 0, 0, 0, 0, 0, 1388544, 0, 0, 1417216, 0, 0, 0, 0, 0, 1843,
  /* 24705 */ 0, 0, 0, 0, 388, 388, 388, 388, 388, 1851, 0, 233, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 566, 0,
  /* 24733 */ 0, 0, 0, 0, 0, 244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 586, 0, 489, 489, 0, 0, 489, 0, 0, 2167281,
  /* 24763 */ 233, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1431, 0, 0, 0, 0, 0, 0, 0, 501, 0,
  /* 24794 */ 0, 0, 1060864, 248, 249, 0, 0, 0, 0, 0, 0, 0, 388, 439, 460, 460, 460, 439, 463, 460, 460, 0, 0, 946176,
  /* 24818 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 594, 0, 0, 0, 0, 0, 816, 6, 0, 0, 303104, 0, 0, 0, 0, 1388544, 0,
  /* 24848 */ 0, 1417216, 0, 0, 0, 0, 0, 1955, 388, 388, 388, 388, 388, 388, 1961, 388, 388, 388, 0, 0, 1167, 0, 0, 0,
  /* 24872 */ 388, 388, 972, 439, 439, 439, 439, 439, 439, 439, 1738, 439, 439, 439, 439, 1742, 439, 439, 439, 253, 253,
  /* 24893 */ 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 885, 0, 0, 253, 321, 253, 0, 0, 0, 0, 0, 0, 0, 0, 331, 301, 0,
  /* 24924 */ 301, 0, 0, 0, 287, 0, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 0, 0, 225768, 225768, 225768, 225768, 225768,
  /* 24947 */ 225768, 225768, 225768, 225768, 0, 49152, 53248, 0, 301, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 0, 253, 0, 0, 0,
  /* 24970 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 587, 0, 0, 358, 360, 372, 372, 372, 389, 372, 389, 389, 389, 389, 389,
  /* 24996 */ 389, 372, 412, 412, 412, 412, 412, 425, 425, 412, 412, 412, 412, 412, 412, 412, 412, 412, 389, 440, 440,
  /* 25017 */ 440, 440, 440, 464, 440, 440, 440, 440, 440, 484, 484, 484, 484, 484, 491, 491, 491, 491, 491, 491, 491,
  /* 25038 */ 491, 440, 440, 491, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 2195, 439, 439, 439, 439, 439, 439,
  /* 25062 */ 439, 439, 439, 2205, 510, 511, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 615, 0, 526, 0, 528, 0, 0, 0, 0,
  /* 25091 */ 0, 0, 0, 0, 0, 0, 0, 0, 541, 0, 0, 0, 507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 597, 0, 0, 0, 292, 292, 292, 0,
  /* 25122 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 284, 0, 0, 0, 0, 603, 0, 0, 0, 0, 609, 0, 0, 0, 550, 0, 0, 0, 0, 0,
  /* 25155 */ 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 155648, 1060864, 248, 249, 0, 212992, 0, 0, 0, 0, 0, 0,
  /* 25180 */ 0, 1945600, 0, 1622016, 0, 0, 0, 1761280, 0, 1847296, 0, 0, 0, 388, 388, 388, 636, 388, 388, 388, 388,
  /* 25201 */ 388, 388, 654, 388, 388, 0, 388, 388, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 25222 */ 439, 439, 439, 0, 388, 660, 388, 388, 388, 614, 0, 0, 614, 0, 0, 0, 510, 0, 0, 0, 0, 0, 262144, 0, 0, 0,
  /* 25248 */ 0, 0, 0, 0, 0, 0, 0, 388, 388, 972, 439, 439, 439, 0, 576, 550, 0, 388, 388, 439, 439, 439, 691, 439, 439,
  /* 25273 */ 439, 439, 439, 715, 718, 720, 439, 725, 439, 728, 439, 439, 740, 439, 439, 439, 0, 462, 462, 462, 462,
  /* 25294 */ 462, 462, 462, 462, 1758, 462, 462, 462, 462, 1762, 462, 462, 753, 462, 462, 462, 462, 462, 777, 780, 782,
  /* 25315 */ 462, 787, 462, 790, 462, 462, 0, 0, 0, 439, 439, 439, 2288, 462, 462, 462, 2290, 0, 439, 439, 439, 439,
  /* 25337 */ 439, 439, 2054, 439, 439, 439, 439, 2057, 439, 439, 439, 439, 439, 0, 1748, 0, 0, 0, 0, 0, 1750, 0, 0, 0,
  /* 25361 */ 802, 462, 462, 439, 439, 439, 728, 0, 0, 0, 462, 462, 462, 790, 0, 57574, 2, 3, 94212, 5, 6, 0, 0, 0, 0,
  /* 25386 */ 0, 0, 0, 0, 0, 0, 506, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 818, 822, 0, 0, 0, 0, 0, 0, 0, 0, 880, 0, 0, 0, 0,
  /* 25419 */ 0, 0, 0, 292, 292, 860, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 869, 0, 0, 0, 0, 1465, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25451 */ 0, 249856, 0, 0, 0, 0, 905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 844, 0, 0, 0, 920, 0, 0, 0, 0, 0,
  /* 25483 */ 0, 0, 0, 0, 0, 0, 0, 307, 0, 0, 0, 0, 1141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1153, 0, 0, 1156, 0, 0,
  /* 25515 */ 0, 1160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 1173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25546 */ 0, 0, 0, 522, 523, 524, 0, 1220, 0, 0, 388, 388, 388, 388, 388, 388, 388, 1229, 388, 388, 388, 388, 388,
  /* 25569 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 616, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1323, 107538, 1325, 1323, 462, 462, 462, 462,
  /* 25596 */ 462, 462, 462, 462, 462, 462, 462, 462, 1350, 462, 462, 462, 462, 1341, 462, 462, 462, 462, 462, 462, 462,
  /* 25617 */ 462, 462, 462, 462, 462, 462, 462, 1072, 462, 462, 462, 1372, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 25638 */ 462, 1384, 462, 462, 0, 0, 0, 2287, 439, 439, 439, 2289, 462, 462, 462, 0, 439, 439, 439, 439, 439, 729,
  /* 25660 */ 439, 439, 439, 439, 439, 439, 0, 462, 462, 462, 462, 1755, 462, 462, 462, 462, 462, 462, 462, 1761, 462,
  /* 25681 */ 1763, 462, 462, 1388, 462, 462, 462, 462, 1393, 439, 439, 439, 1397, 462, 462, 462, 0, 0, 0, 439, 439,
  /* 25702 */ 439, 439, 439, 439, 462, 462, 462, 462, 462, 462, 462, 462, 2071, 462, 462, 462, 1401, 0, 0, 0, 0, 0,
  /* 25724 */ 1403, 0, 0, 0, 0, 0, 0, 0, 0, 1408, 0, 1424, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 903, 0, 1450, 0, 0,
  /* 25755 */ 0, 0, 0, 0, 0, 0, 0, 1458, 0, 1197, 0, 0, 0, 0, 0, 274432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 388, 388, 972,
  /* 25784 */ 439, 975, 439, 0, 1477, 0, 0, 0, 388, 388, 388, 388, 1484, 1485, 388, 388, 388, 388, 388, 0, 0, 0, 0, 0,
  /* 25808 */ 0, 0, 0, 0, 617, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1652, 0, 0, 0, 0, 0, 0, 388, 388, 1475, 388, 388, 439, 439,
  /* 25836 */ 439, 439, 439, 439, 1511, 439, 1513, 439, 439, 439, 439, 439, 732, 439, 439, 439, 439, 439, 439, 0, 462,
  /* 25857 */ 462, 751, 439, 1516, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1322, 439,
  /* 25878 */ 439, 1531, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 2061, 439, 439,
  /* 25898 */ 1542, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 2111, 0, 0, 0, 1634, 0,
  /* 25920 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 538, 0, 0, 0, 0, 0, 1647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 899, 0,
  /* 25953 */ 0, 439, 439, 1746, 439, 439, 0, 1748, 0, 0, 0, 0, 0, 1750, 0, 0, 0, 0, 0, 843776, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25981 */ 0, 0, 1640, 0, 0, 0, 0, 0, 462, 462, 1791, 462, 462, 439, 439, 439, 462, 462, 462, 0, 0, 0, 0, 0, 0, 326,
  /* 26007 */ 0, 0, 316, 0, 0, 0, 332, 0, 0, 1802, 0, 0, 0, 0, 0, 0, 1806, 0, 0, 0, 0, 0, 0, 0, 0, 913, 0, 0, 0, 0, 0,
  /* 26038 */ 0, 0, 439, 1874, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1539, 1924, 0,
  /* 26060 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1139, 462, 462, 2006, 462, 462, 462, 462, 439, 439, 462, 462, 0,
  /* 26087 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 280, 281, 282, 283, 0, 0, 0, 2163, 0, 2165, 439, 439, 439, 439, 439, 439,
  /* 26114 */ 439, 439, 439, 439, 439, 439, 594359, 439, 1729, 439, 0, 0, 0, 2193, 0, 439, 439, 439, 439, 439, 439, 439,
  /* 26136 */ 439, 439, 439, 462, 462, 1916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1668, 0, 0, 0, 0, 0, 2223, 439, 439, 439,
  /* 26163 */ 439, 439, 439, 439, 439, 439, 439, 462, 462, 462, 462, 1401, 0, 1403, 0, 0, 1629, 0, 0, 0, 0, 254, 255,
  /* 26186 */ 256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 925, 0, 0, 0, 0, 0, 49152, 53248, 0, 0, 0, 340, 0, 45056, 0, 340, 0,
  /* 26215 */ 0, 0, 0, 0, 0, 388, 0, 388, 388, 388, 388, 388, 388, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 0, 441, 441, 441,
  /* 26242 */ 441, 441, 441, 441, 441, 465, 465, 465, 465, 465, 465, 465, 465, 441, 441, 465, 57574, 57574, 2, 2, 3,
  /* 26263 */ 94212, 5, 6, 0, 0, 0, 0, 0, 933888, 0, 0, 933888, 0, 0, 0, 0, 0, 0, 0, 837, 0, 0, 0, 840, 0, 0, 0, 0, 439,
  /* 26292 */ 1305, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 0, 462, 462, 462, 0, 1674, 0, 0, 0,
  /* 26315 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 919, 0, 0, 0, 1687, 0, 0, 0, 0, 0, 388, 388, 388, 1693, 388, 388, 388,
  /* 26343 */ 388, 665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1405, 0, 0, 0, 0, 462, 462, 462, 2209, 462, 2211, 462, 2213,
  /* 26369 */ 462, 439, 462, 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 388, 1963, 388, 259, 49152, 53248, 0,
  /* 26392 */ 0, 261, 341, 342, 45056, 342, 341, 349, 342, 349, 0, 349, 349, 361, 373, 373, 373, 391, 406, 391, 391,
  /* 26413 */ 391, 391, 391, 391, 409, 413, 413, 423, 423, 424, 413, 413, 424, 424, 424, 424, 424, 424, 424, 424, 424,
  /* 26434 */ 391, 442, 442, 442, 442, 442, 466, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 466, 466, 466, 466,
  /* 26455 */ 466, 466, 466, 466, 442, 442, 466, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1572864, 0, 1675264,
  /* 26478 */ 0, 0, 0, 0, 1335296, 0, 0, 0, 0, 0, 250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388,
  /* 26506 */ 388, 388, 388, 388, 0, 0, 0, 833, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 627, 629, 0, 0, 292, 292, 0, 0, 0,
  /* 26535 */ 0, 0, 0, 865, 833, 0, 0, 0, 0, 0, 0, 0, 1442, 0, 0, 0, 0, 0, 0, 0, 0, 1193, 0, 0, 0, 1195, 0, 0, 0, 0, 0,
  /* 26566 */ 0, 924, 0, 0, 0, 0, 0, 0, 388, 388, 972, 439, 974, 976, 462, 462, 462, 1057, 462, 1062, 462, 462, 462,
  /* 26589 */ 462, 462, 1068, 462, 462, 462, 462, 462, 1375, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 439, 462,
  /* 26610 */ 0, 0, 0, 2190, 0, 0, 0, 1211, 0, 0, 1214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0, 0, 126976, 126976, 0, 0,
  /* 26638 */ 0, 0, 388, 388, 388, 388, 388, 388, 388, 388, 1230, 388, 388, 388, 388, 666, 0, 0, 0, 0, 615, 0, 0, 0,
  /* 26662 */ 615, 0, 0, 462, 462, 462, 1343, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1352, 1370, 1371,
  /* 26683 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1788, 462, 439, 439, 1623, 1624,
  /* 26703 */ 462, 462, 1626, 1627, 1401, 0, 1403, 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 2099, 439, 439,
  /* 26726 */ 388, 1852, 388, 388, 388, 388, 388, 388, 388, 388, 439, 439, 439, 439, 439, 439, 439, 439, 1713, 439, 439,
  /* 26747 */ 439, 439, 1717, 439, 1978, 1979, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 462, 462, 462, 462,
  /* 26767 */ 2067, 2068, 2069, 462, 462, 462, 462, 462, 439, 2062, 439, 439, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 26787 */ 462, 462, 462, 462, 1383, 462, 462, 462, 462, 462, 2208, 462, 462, 462, 462, 462, 462, 439, 462, 0, 0, 0,
  /* 26809 */ 0, 0, 0, 0, 439, 263, 49152, 53248, 0, 0, 0, 303, 0, 45056, 0, 303, 0, 0, 0, 352, 0, 0, 0, 292, 292, 292,
  /* 26835 */ 0, 0, 0, 0, 0, 0, 0, 0, 554, 555, 0, 359, 362, 374, 374, 374, 392, 374, 392, 392, 392, 392, 392, 392, 410,
  /* 26860 */ 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 431, 414, 392, 443, 443,
  /* 26881 */ 443, 443, 443, 467, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 467, 467, 467, 467, 467, 467, 467,
  /* 26902 */ 467, 443, 443, 467, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1638400, 0, 1843200, 0, 0, 0,
  /* 26925 */ 1908736, 0, 0, 0, 0, 0, 0, 1455, 0, 0, 0, 0, 0, 1197, 0, 0, 0, 620, 0, 0, 0, 0, 620, 0, 0, 0, 0, 620, 0,
  /* 26954 */ 0, 0, 0, 620, 0, 0, 846, 847, 0, 0, 0, 0, 0, 0, 0, 855, 0, 0, 0, 0, 0, 0, 1060864, 248, 249, 0, 0, 0, 0,
  /* 26983 */ 0, 0, 0, 248, 249, 0, 0, 0, 0, 507, 0, 0, 292, 292, 0, 0, 862, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1135, 0,
  /* 27013 */ 0, 0, 0, 0, 0, 0, 875, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1136, 0, 0, 0, 928, 0, 0, 0, 0, 0, 931, 388,
  /* 27044 */ 933, 388, 388, 388, 388, 388, 388, 388, 961, 388, 388, 0, 0, 0, 0, 0, 0, 388, 944, 388, 388, 388, 388,
  /* 27067 */ 388, 388, 388, 388, 388, 388, 388, 388, 953, 388, 388, 0, 1504, 388, 439, 439, 439, 439, 439, 439, 439,
  /* 27088 */ 439, 439, 439, 439, 1715, 439, 439, 439, 388, 955, 388, 388, 388, 388, 388, 388, 388, 388, 0, 847, 0, 0,
  /* 27110 */ 966, 846, 439, 1013, 439, 1015, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 0, 462, 462,
  /* 27131 */ 748, 439, 439, 1035, 439, 439, 439, 439, 744, 107538, 972, 747, 462, 1047, 462, 462, 462, 439, 439, 439,
  /* 27151 */ 439, 0, 0, 0, 462, 462, 462, 462, 0, 230, 462, 1087, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 27173 */ 462, 462, 462, 462, 1901, 462, 1107, 462, 462, 462, 462, 439, 439, 439, 439, 0, 0, 462, 462, 462, 462, 0,
  /* 27195 */ 0, 0, 439, 439, 439, 439, 2281, 439, 462, 462, 462, 462, 462, 1391, 462, 439, 439, 439, 439, 462, 462,
  /* 27216 */ 462, 462, 0, 0, 0, 0, 0, 0, 0, 1630, 1401, 0, 0, 0, 0, 0, 1403, 0, 0, 0, 0, 0, 1406, 0, 0, 0, 0, 0,
  /* 27244 */ 1638400, 0, 1843200, 0, 0, 0, 1908736, 61440, 0, 0, 0, 0, 0, 1145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936,
  /* 27269 */ 167936, 167936, 167936, 167936, 167936, 0, 1437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1446, 0, 0, 0, 0, 257, 257,
  /* 27293 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 854, 0, 0, 857, 0, 0, 1553, 439, 1555, 439, 439, 439, 0, 0, 0, 0, 1323, 0,
  /* 27321 */ 0, 0, 0, 462, 462, 1753, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1581, 462, 462, 462,
  /* 27343 */ 1685, 0, 0, 0, 0, 0, 0, 0, 388, 1691, 388, 388, 388, 388, 388, 388, 960, 388, 962, 388, 0, 0, 0, 0, 0, 0,
  /* 27369 */ 0, 1468, 0, 0, 0, 0, 0, 0, 0, 0, 1931, 0, 0, 0, 0, 0, 0, 0, 1706, 439, 439, 1708, 439, 439, 439, 439, 439,
  /* 27396 */ 439, 439, 439, 439, 439, 439, 439, 0, 462, 462, 750, 439, 439, 1733, 439, 439, 439, 439, 439, 439, 439,
  /* 27417 */ 439, 439, 439, 439, 439, 439, 439, 997, 999, 462, 462, 1778, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 27438 */ 462, 462, 462, 462, 791, 462, 462, 439, 439, 439, 439, 1866, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 27459 */ 439, 439, 439, 439, 1881, 439, 439, 439, 439, 1875, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 27480 */ 439, 439, 439, 1011, 439, 462, 1893, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 27500 */ 1902, 439, 439, 2063, 439, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1595, 462, 462,
  /* 27520 */ 462, 462, 2123, 2124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1137, 0, 0, 462, 462, 2178, 462, 462, 462,
  /* 27546 */ 462, 462, 462, 462, 439, 462, 0, 0, 0, 0, 439, 439, 439, 439, 439, 439, 462, 462, 462, 462, 462, 462, 462,
  /* 27569 */ 2210, 462, 462, 462, 462, 439, 462, 0, 0, 0, 0, 0, 0, 388, 388, 1958, 388, 388, 388, 388, 388, 388, 388,
  /* 27592 */ 0, 0, 0, 0, 0, 0, 608, 0, 0, 0, 0, 268, 269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1184, 0, 300, 0,
  /* 27623 */ 300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1167, 1168, 0, 266, 49152, 53248, 0, 0, 0, 0, 0, 45056, 0, 0,
  /* 27651 */ 0, 269, 268, 0, 0, 0, 0, 1480, 388, 1482, 388, 388, 388, 388, 388, 388, 388, 388, 388, 1240, 388, 388,
  /* 27673 */ 388, 388, 388, 388, 268, 268, 363, 375, 385, 375, 393, 375, 393, 393, 393, 393, 393, 393, 375, 415, 415,
  /* 27694 */ 415, 415, 415, 426, 426, 415, 415, 415, 415, 415, 415, 415, 415, 415, 393, 444, 444, 444, 444, 444, 468,
  /* 27715 */ 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 468, 468, 468, 468, 468, 468, 468, 468, 444, 444, 468,
  /* 27736 */ 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 264, 0, 303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 248, 248,
  /* 27764 */ 0, 0, 0, 0, 0, 558, 0, 0, 561, 0, 0, 0, 0, 0, 0, 0, 569, 0, 0, 0, 0, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27796 */ 0, 1680, 0, 0, 0, 0, 0, 0, 0, 604, 605, 0, 607, 0, 0, 610, 0, 0, 0, 0, 0, 0, 0, 1650, 0, 0, 1653, 0, 0, 0,
  /* 27826 */ 0, 0, 0, 626, 0, 388, 388, 635, 388, 638, 388, 388, 646, 388, 652, 388, 656, 388, 388, 388, 1492, 388,
  /* 27848 */ 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 1244, 388, 388, 659, 388, 388, 388, 388, 0, 0,
  /* 27870 */ 0, 0, 554, 0, 0, 0, 610, 0, 618, 0, 670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 679, 0, 0, 0, 292, 292, 292,
  /* 27900 */ 0, 0, 0, 0, 0, 0, 0, 553, 0, 0, 388, 633, 388, 388, 388, 642, 388, 388, 650, 388, 388, 388, 657, 681, 670,
  /* 27925 */ 0, 0, 388, 388, 439, 439, 690, 439, 694, 439, 439, 706, 439, 716, 439, 721, 439, 439, 727, 730, 734, 439,
  /* 27947 */ 439, 439, 439, 439, 0, 462, 462, 462, 1754, 462, 1756, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1098,
  /* 27968 */ 462, 462, 462, 1101, 462, 462, 752, 462, 756, 462, 462, 768, 462, 778, 462, 783, 462, 462, 789, 792, 796,
  /* 27989 */ 462, 439, 462, 0, 0, 0, 2128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 881, 0, 0, 0, 0, 0, 0, 292, 292, 0, 0, 0, 0, 0,
  /* 28019 */ 0, 0, 0, 0, 0, 868, 0, 0, 0, 0, 288, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 0, 0, 274432, 274432, 274432, 274432,
  /* 28046 */ 274432, 274432, 274432, 274432, 274432, 0, 0, 874, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 886, 0, 0, 0, 292,
  /* 28070 */ 292, 292, 0, 0, 0, 0, 0, 0, 552, 0, 0, 0, 0, 578, 0, 0, 0, 0, 552, 578, 0, 0, 0, 0, 0, 0, 1662976, 0, 0,
  /* 28099 */ 0, 0, 1069056, 0, 0, 61440, 0, 0, 0, 890, 581, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1166, 0, 0, 0, 0, 906,
  /* 28128 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1407, 0, 439, 439, 439, 439, 1037, 439, 439, 744, 107538, 972,
  /* 28154 */ 747, 462, 462, 462, 462, 462, 439, 439, 439, 439, 0, 0, 462, 462, 462, 462, 0, 462, 462, 462, 1089, 462,
  /* 28176 */ 462, 462, 462, 462, 462, 462, 462, 462, 1102, 462, 462, 0, 2286, 0, 439, 439, 439, 439, 462, 462, 462,
  /* 28197 */ 462, 0, 439, 439, 439, 439, 439, 985, 439, 990, 439, 439, 439, 439, 439, 996, 439, 439, 439, 439, 439,
  /* 28218 */ 733, 439, 439, 439, 439, 439, 439, 0, 462, 462, 462, 439, 439, 808, 439, 0, 0, 0, 462, 462, 814, 462, 0,
  /* 28241 */ 57574, 462, 462, 1109, 462, 462, 439, 439, 439, 439, 0, 0, 462, 462, 462, 462, 0, 0, 0, 439, 439, 2279,
  /* 28263 */ 2280, 439, 439, 462, 462, 2283, 2284, 0, 0, 1142, 0, 1144, 0, 0, 1146, 0, 0, 0, 1149, 0, 1151, 1152, 0, 0,
  /* 28287 */ 0, 292, 292, 292, 0, 0, 0, 0, 0, 551, 0, 0, 0, 0, 0, 0, 1884160, 0, 0, 1949696, 0, 1961984, 0, 0, 0, 0, 0,
  /* 28314 */ 0, 1200, 0, 0, 0, 0, 0, 0, 0, 0, 1206, 0, 0, 0, 1157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1169, 0, 1187, 0,
  /* 28344 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1196, 0, 1197, 0, 0, 0, 1222, 388, 1223, 388, 1225, 388, 388, 388, 388, 388,
  /* 28370 */ 1231, 388, 388, 0, 388, 388, 439, 439, 439, 439, 439, 439, 439, 1512, 439, 439, 439, 0, 0, 0, 0, 462, 462,
  /* 28393 */ 1887, 462, 462, 462, 462, 462, 462, 1897, 462, 462, 462, 462, 462, 462, 462, 462, 462, 2215, 2216, 0, 0,
  /* 28414 */ 2219, 2220, 0, 1233, 388, 388, 388, 388, 1237, 388, 388, 388, 388, 1241, 388, 388, 388, 388, 388, 0, 530,
  /* 28435 */ 540, 0, 0, 530, 0, 0, 0, 0, 0, 0, 439, 439, 2168, 439, 439, 439, 439, 439, 439, 439, 439, 1739, 439, 439,
  /* 28459 */ 439, 439, 439, 439, 439, 439, 1534, 439, 439, 439, 439, 439, 439, 439, 439, 1546, 439, 439, 439, 439, 439,
  /* 28480 */ 439, 439, 439, 1985, 439, 439, 439, 1989, 462, 462, 462, 439, 439, 1259, 439, 439, 439, 439, 439, 439,
  /* 28500 */ 439, 1268, 439, 439, 439, 439, 1272, 439, 439, 439, 1275, 439, 439, 439, 439, 439, 439, 439, 1282, 1284,
  /* 28520 */ 439, 439, 439, 0, 0, 0, 0, 462, 1886, 462, 462, 462, 1889, 462, 462, 462, 439, 439, 439, 439, 0, 0, 0,
  /* 28543 */ 462, 462, 462, 462, 0, 57574, 439, 439, 439, 1291, 1292, 439, 1294, 1295, 439, 439, 439, 439, 439, 439,
  /* 28563 */ 1302, 439, 439, 439, 439, 439, 1310, 439, 439, 439, 439, 1314, 439, 439, 439, 439, 1320, 1304, 439, 439,
  /* 28583 */ 439, 439, 439, 439, 1311, 439, 439, 439, 439, 439, 439, 1318, 0, 0, 0, 292, 292, 292, 0, 0, 0, 0, 550, 0,
  /* 28607 */ 0, 0, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 317, 0, 0, 1323, 107538, 0, 1323, 1328, 1329, 462, 1330, 462, 462,
  /* 28632 */ 1333, 462, 462, 462, 462, 462, 439, 439, 439, 439, 907, 0, 462, 462, 462, 462, 0, 462, 462, 1342, 462,
  /* 28653 */ 462, 462, 462, 1346, 462, 462, 462, 1349, 462, 462, 462, 462, 462, 1575, 462, 1577, 462, 462, 462, 1580,
  /* 28673 */ 462, 462, 462, 462, 462, 1344, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1768, 462, 462, 462, 462,
  /* 28694 */ 462, 462, 462, 462, 462, 2185, 439, 462, 0, 0, 0, 0, 462, 462, 462, 1356, 1358, 462, 462, 462, 462, 462,
  /* 28716 */ 462, 1365, 1366, 462, 1368, 1369, 0, 1410, 0, 0, 0, 0, 1415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 249, 249,
  /* 28742 */ 0, 0, 0, 0, 1462, 0, 0, 0, 0, 0, 0, 1469, 0, 1471, 0, 0, 1474, 0, 0, 0, 0, 1675, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28772 */ 0, 0, 0, 1203, 0, 0, 0, 0, 1503, 388, 0, 388, 1505, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1514,
  /* 28795 */ 439, 439, 439, 439, 439, 1520, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1727, 439, 439, 439,
  /* 28816 */ 439, 439, 439, 439, 439, 1519, 439, 1521, 439, 439, 439, 439, 439, 439, 439, 439, 439, 741, 439, 439, 0,
  /* 28837 */ 462, 462, 462, 1540, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 462, 439,
  /* 28858 */ 439, 439, 1556, 439, 439, 0, 0, 0, 0, 1323, 0, 0, 0, 0, 462, 1752, 462, 462, 462, 462, 462, 1757, 462,
  /* 28881 */ 462, 462, 462, 462, 462, 462, 1345, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1998, 1999, 462, 462,
  /* 28901 */ 462, 462, 2003, 462, 1585, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 28921 */ 1584, 0, 0, 1660, 0, 1662, 1663, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 882, 0, 0, 0, 0, 0, 1731, 439, 439, 439,
  /* 28948 */ 1735, 439, 439, 439, 439, 1740, 439, 439, 439, 439, 439, 439, 0, 1560, 0, 0, 1323, 0, 1566, 0, 0, 462,
  /* 28970 */ 1744, 1745, 439, 439, 439, 0, 1748, 0, 0, 0, 0, 0, 1750, 0, 0, 0, 0, 304, 0, 388, 330, 388, 388, 388, 388,
  /* 28995 */ 388, 388, 330, 0, 1776, 462, 462, 462, 1780, 462, 462, 462, 462, 1785, 462, 462, 462, 462, 462, 462, 771,
  /* 29016 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 1379, 462, 462, 462, 462, 462, 462, 1789, 1790, 462, 462,
  /* 29036 */ 462, 439, 439, 439, 462, 462, 462, 0, 0, 0, 0, 0, 0, 439, 2167, 439, 439, 439, 2171, 439, 439, 439, 439,
  /* 29059 */ 0, 1826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1434, 0, 388, 388, 1853, 388, 388, 388, 388, 388, 388,
  /* 29086 */ 388, 439, 439, 439, 439, 439, 439, 439, 439, 1971, 439, 439, 439, 439, 439, 439, 439, 1864, 439, 439, 439,
  /* 29107 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 1873, 439, 439, 439, 439, 439, 1533, 439, 439, 439, 439, 439,
  /* 29128 */ 439, 439, 439, 439, 439, 439, 1299, 439, 439, 439, 439, 439, 439, 439, 1748, 0, 1750, 0, 462, 462, 462,
  /* 29149 */ 462, 462, 462, 462, 1891, 462, 439, 462, 0, 0, 2261, 0, 439, 439, 439, 439, 439, 439, 462, 462, 462, 439,
  /* 29171 */ 439, 439, 733, 0, 0, 0, 462, 462, 462, 795, 0, 57574, 0, 0, 1937, 0, 0, 0, 0, 1942, 0, 0, 0, 0, 0, 0, 0,
  /* 29198 */ 0, 924, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1953, 1954, 0, 388, 1957, 388, 388, 388, 1960, 388, 1962, 388, 388,
  /* 29223 */ 0, 388, 388, 439, 439, 439, 1509, 439, 439, 439, 439, 439, 439, 439, 439, 2254, 462, 462, 462, 462, 462,
  /* 29244 */ 462, 462, 439, 439, 439, 439, 462, 462, 462, 462, 0, 0, 0, 0, 0, 0, 0, 0, 462, 2005, 2007, 462, 462, 2010,
  /* 29268 */ 2011, 2012, 439, 2014, 462, 0, 0, 0, 0, 2019, 0, 2021, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
  /* 29296 */ 462, 2074, 462, 462, 462, 462, 462, 462, 462, 462, 462, 439, 2082, 462, 2083, 0, 0, 0, 292, 292, 292, 0,
  /* 29318 */ 0, 0, 549, 0, 0, 0, 0, 0, 0, 0, 2089, 0, 0, 0, 0, 0, 0, 0, 0, 2090, 0, 0, 0, 0, 0, 0, 0, 2095, 0, 0, 0, 0,
  /* 29350 */ 0, 388, 388, 388, 388, 388, 388, 388, 439, 439, 439, 439, 439, 439, 439, 439, 1972, 439, 439, 439, 439,
  /* 29371 */ 439, 439, 439, 744, 107538, 972, 747, 462, 462, 462, 462, 1050, 0, 388, 439, 439, 439, 439, 2138, 439,
  /* 29391 */ 439, 439, 439, 439, 439, 439, 462, 462, 2066, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1603, 1604,
  /* 29411 */ 462, 462, 462, 462, 462, 462, 462, 2148, 462, 462, 462, 462, 462, 462, 462, 439, 462, 0, 0, 0, 0, 439,
  /* 29433 */ 439, 439, 439, 2267, 439, 462, 462, 462, 0, 0, 2162, 0, 0, 0, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 29456 */ 2175, 462, 2207, 462, 462, 462, 462, 462, 462, 462, 439, 462, 2217, 2218, 0, 0, 0, 0, 315, 0, 316, 0, 0,
  /* 29479 */ 0, 0, 0, 0, 316, 0, 320, 0, 0, 2224, 439, 439, 2226, 439, 2228, 439, 439, 439, 439, 2233, 462, 462, 2235,
  /* 29502 */ 462, 2237, 462, 462, 462, 462, 2242, 2243, 0, 0, 0, 0, 0, 0, 0, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 29525 */ 439, 439, 462, 462, 462, 2274, 0, 0, 0, 439, 439, 439, 439, 439, 439, 462, 462, 462, 462, 462, 1589, 462,
  /* 29547 */ 1591, 462, 462, 462, 462, 462, 462, 462, 462, 1095, 462, 462, 462, 462, 462, 462, 462, 462, 462, 2081,
  /* 29567 */ 462, 439, 439, 462, 462, 0, 296, 49152, 53248, 0, 0, 296, 0, 343, 45056, 343, 0, 343, 343, 343, 0, 343,
  /* 29589 */ 343, 364, 0, 0, 0, 394, 296, 394, 394, 394, 394, 394, 394, 296, 364, 364, 364, 364, 364, 364, 364, 364,
  /* 29611 */ 364, 364, 364, 364, 364, 364, 364, 364, 437, 445, 445, 445, 445, 445, 469, 445, 445, 445, 445, 445, 445,
  /* 29632 */ 445, 445, 445, 445, 469, 469, 469, 469, 469, 469, 469, 469, 445, 445, 469, 57574, 57574, 2, 2, 3, 94212,
  /* 29653 */ 5, 6, 0, 0, 0, 0, 322, 0, 0, 0, 0, 0, 296, 0, 0, 0, 0, 296, 0, 0, 0, 529, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29686 */ 0, 1197, 0, 0, 0, 0, 0, 0, 388, 632, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 1498, 388,
  /* 29709 */ 388, 388, 388, 462, 462, 462, 686, 439, 439, 439, 0, 0, 0, 748, 462, 462, 462, 0, 57574, 292, 292, 0, 0,
  /* 29732 */ 0, 0, 0, 0, 0, 834, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1475, 0, 439, 978, 439, 439, 439, 986, 439,
  /* 29761 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1269, 439, 439, 439, 439, 462, 462, 462, 1058, 462, 462,
  /* 29782 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1606, 462, 462, 462, 462, 462, 1598, 462, 462, 462, 462,
  /* 29803 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 795, 462, 462, 2020, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29829 */ 0, 0, 1185, 0, 49152, 53248, 0, 0, 0, 0, 344, 45056, 344, 0, 344, 344, 344, 353, 344, 344, 344, 376, 376,
  /* 29852 */ 376, 395, 376, 395, 395, 395, 395, 395, 395, 376, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
  /* 29873 */ 416, 416, 416, 416, 416, 395, 446, 446, 446, 446, 446, 470, 446, 446, 446, 446, 446, 446, 446, 446, 446,
  /* 29894 */ 446, 470, 470, 470, 470, 470, 470, 470, 470, 446, 446, 470, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0,
  /* 29917 */ 0, 324, 0, 0, 327, 0, 0, 0, 0, 327, 0, 327, 0, 2, 6, 0, 0, 0, 0, 819, 823, 0, 0, 0, 0, 0, 0, 0, 0, 1132,
  /* 29947 */ 0, 1134, 0, 0, 0, 0, 0, 1323, 107538, 1326, 1323, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 29969 */ 462, 1910, 462, 462, 462, 0, 1925, 0, 0, 0, 0, 1930, 0, 0, 0, 0, 0, 0, 0, 0, 0, 294, 0, 0, 0, 0, 0, 0,
  /* 29997 */ 1936, 0, 0, 1938, 0, 0, 0, 0, 0, 0, 1945, 0, 0, 0, 0, 0, 0, 516, 517, 518, 0, 0, 0, 0, 0, 0, 0, 388, 459,
  /* 30026 */ 459, 459, 459, 459, 483, 459, 459, 1950, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
  /* 30049 */ 1489, 0, 0, 2028, 2029, 0, 0, 0, 0, 0, 0, 2032, 0, 0, 0, 2036, 0, 0, 0, 292, 292, 292, 0, 0, 151552, 0, 0,
  /* 30076 */ 0, 0, 0, 0, 0, 266, 302, 269, 269, 300, 0, 0, 0, 0, 0, 0, 0, 2039, 388, 388, 388, 388, 388, 388, 388,
  /* 30101 */ 2044, 2045, 439, 2047, 439, 439, 439, 439, 439, 1557, 0, 0, 0, 0, 1323, 0, 0, 0, 0, 1570, 462, 462, 2075,
  /* 30124 */ 462, 462, 462, 462, 462, 462, 462, 462, 439, 439, 462, 462, 0, 0, 2017, 0, 0, 439, 439, 2101, 439, 439,
  /* 30146 */ 439, 439, 439, 439, 2107, 439, 439, 439, 439, 439, 462, 439, 462, 0, 2126, 0, 0, 2129, 0, 0, 0, 0, 0, 0,
  /* 30170 */ 0, 0, 1456, 0, 0, 0, 1197, 0, 0, 0, 462, 462, 462, 462, 2113, 462, 462, 462, 462, 462, 462, 2119, 462,
  /* 30193 */ 462, 462, 462, 462, 1767, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1076, 462, 462, 1080, 462,
  /* 30213 */ 462, 462, 462, 462, 462, 462, 1907, 462, 462, 462, 462, 462, 462, 462, 462, 1066, 462, 462, 462, 462, 462,
  /* 30234 */ 462, 462, 542, 0, 0, 292, 292, 292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 871, 462, 754, 462, 462, 462,
  /* 30261 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1911, 462, 462, 803, 462, 439, 439, 439, 439, 0, 0,
  /* 30283 */ 0, 462, 462, 462, 462, 0, 57574, 388, 388, 1250, 0, 0, 0, 0, 0, 0, 388, 388, 972, 439, 439, 439, 439, 439,
  /* 30307 */ 439, 439, 1278, 439, 439, 439, 439, 439, 439, 439, 439, 439, 2055, 439, 439, 439, 439, 2060, 439, 0, 1659,
  /* 30328 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1657, 0, 0, 0, 270, 271, 272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30360 */ 1418, 0, 0, 0, 0, 270, 0, 270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0, 1813, 0, 0, 0, 0, 0, 0, 0,
  /* 30391 */ 0, 0, 0, 0, 1472, 0, 0, 0, 0, 0, 270, 0, 0, 323, 0, 0, 0, 0, 0, 0, 270, 0, 0, 0, 0, 0, 0, 1060864, 248,
  /* 30420 */ 249, 0, 0, 217088, 0, 0, 0, 0, 0, 0, 1815, 1816, 0, 0, 0, 0, 0, 0, 0, 0, 1416, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30449 */ 49152, 53248, 0, 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 354, 0, 0, 0, 292, 292, 292, 0, 548, 0, 0, 0, 0, 0, 0,
  /* 30477 */ 0, 0, 126976, 126976, 0, 0, 126976, 126976, 126976, 126976, 0, 0, 323, 377, 377, 377, 396, 377, 396, 396,
  /* 30497 */ 396, 396, 396, 396, 377, 417, 422, 422, 422, 422, 422, 427, 427, 422, 422, 422, 422, 422, 422, 422, 422,
  /* 30518 */ 422, 432, 422, 396, 447, 447, 447, 447, 447, 471, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 471,
  /* 30539 */ 471, 471, 471, 471, 471, 471, 471, 447, 447, 471, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 388,
  /* 30562 */ 388, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1714, 439, 439, 439, 439, 0, 543, 544, 292, 292,
  /* 30583 */ 292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 870, 0, 0, 0, 602, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 544, 0, 0, 0, 0,
  /* 30616 */ 1928, 0, 0, 0, 0, 0, 0, 1933, 1934, 0, 1935, 0, 0, 0, 0, 388, 388, 388, 388, 639, 388, 388, 388, 388, 388,
  /* 30641 */ 388, 388, 388, 948, 388, 388, 388, 388, 388, 388, 388, 462, 462, 757, 462, 765, 462, 462, 462, 462, 462,
  /* 30662 */ 462, 462, 462, 462, 462, 462, 1772, 462, 462, 462, 462, 462, 804, 462, 439, 439, 439, 439, 0, 0, 0, 462,
  /* 30684 */ 462, 462, 462, 0, 57574, 888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1197, 439, 439, 439, 980, 439,
  /* 30711 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1270, 439, 439, 439, 439, 439, 439, 1002, 439,
  /* 30732 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 2059, 439, 439, 439, 1033, 439, 439, 439, 439,
  /* 30753 */ 439, 744, 107538, 972, 747, 462, 462, 462, 462, 462, 439, 439, 439, 462, 462, 462, 0, 0, 0, 0, 0, 0, 0,
  /* 30776 */ 1544192, 0, 1581056, 1597440, 0, 0, 1646592, 1667072, 1679360, 462, 1052, 462, 462, 462, 462, 462, 462,
  /* 30793 */ 462, 462, 462, 462, 462, 462, 462, 462, 2121, 462, 462, 462, 1074, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 30814 */ 462, 462, 462, 462, 462, 1084, 462, 462, 1140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1150, 0, 0, 0, 0, 388,
  /* 30840 */ 388, 439, 439, 439, 439, 439, 439, 439, 439, 709, 439, 1207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30867 */ 1449, 439, 439, 1289, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1301, 439, 439, 439, 439, 439,
  /* 30887 */ 1017, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1030, 462, 462, 462, 1389, 462, 462, 462, 439, 439,
  /* 30907 */ 439, 439, 462, 462, 462, 462, 0, 0, 0, 0, 1628, 0, 0, 0, 0, 0, 1438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30935 */ 1448, 0, 0, 0, 292, 292, 292, 547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 839, 0, 0, 0, 0, 843, 0, 462, 462, 1573,
  /* 30962 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1103, 462, 462, 0, 1646, 0, 0, 1648, 0,
  /* 30984 */ 0, 0, 1651, 0, 0, 0, 1655, 0, 0, 0, 0, 388, 388, 439, 439, 439, 439, 439, 439, 705, 439, 439, 439, 0,
  /* 31008 */ 1562, 0, 1568, 462, 462, 462, 462, 462, 462, 462, 462, 462, 2116, 462, 2117, 2118, 462, 462, 462, 462,
  /* 31028 */ 462, 1658, 0, 0, 0, 0, 0, 0, 0, 1665, 0, 0, 0, 1669, 0, 0, 0, 0, 388, 388, 439, 439, 439, 439, 439, 697,
  /* 31054 */ 439, 439, 439, 439, 439, 439, 439, 1869, 439, 439, 439, 439, 439, 439, 439, 439, 1296, 1297, 439, 439,
  /* 31074 */ 439, 439, 439, 439, 0, 0, 0, 1841, 1842, 0, 0, 0, 0, 0, 1847, 388, 388, 1849, 388, 388, 0, 388, 388, 439,
  /* 31098 */ 439, 1508, 439, 439, 439, 439, 439, 439, 439, 439, 1279, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 31119 */ 439, 1876, 439, 439, 439, 439, 1879, 439, 439, 439, 439, 1882, 439, 439, 439, 439, 439, 1558, 1748, 0, 0,
  /* 31140 */ 0, 0, 1564, 1750, 0, 0, 0, 0, 0, 877, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 0, 0, 0, 0, 0, 462, 1903, 462,
  /* 31169 */ 462, 462, 462, 1906, 462, 462, 462, 462, 1909, 462, 462, 462, 462, 462, 1781, 462, 462, 462, 462, 462,
  /* 31189 */ 462, 462, 462, 462, 462, 439, 462, 0, 0, 0, 0, 2221, 0, 0, 1952, 0, 0, 0, 388, 388, 388, 388, 1959, 388,
  /* 31213 */ 388, 388, 388, 388, 1238, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31238 */ 0, 567, 0, 0, 0, 0, 439, 439, 439, 439, 1981, 439, 439, 439, 439, 439, 439, 439, 462, 462, 462, 462, 462,
  /* 31261 */ 1793, 439, 439, 1795, 462, 462, 0, 0, 1799, 0, 0, 0, 2085, 0, 0, 0, 2088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31288 */ 915, 0, 0, 0, 0, 0, 462, 462, 462, 462, 2180, 462, 2182, 2183, 2184, 462, 2186, 2187, 0, 0, 0, 0, 0, 0,
  /* 31312 */ 1060864, 248, 249, 200704, 0, 0, 0, 0, 0, 0, 0, 1177, 0, 0, 0, 0, 0, 0, 0, 0, 2031, 0, 0, 0, 0, 0, 0, 0,
  /* 31340 */ 439, 439, 2250, 439, 2251, 439, 439, 439, 462, 462, 462, 2256, 462, 2257, 462, 462, 439, 439, 462, 57574,
  /* 31360 */ 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1466, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1476, 462, 462, 2293, 2294,
  /* 31387 */ 439, 462, 439, 462, 439, 462, 0, 0, 0, 0, 0, 0, 0, 2131, 0, 0, 0, 0, 0, 439, 439, 439, 485, 485, 485, 485,
  /* 31413 */ 439, 462, 462, 462, 462, 462, 462, 462, 462, 1578, 462, 462, 462, 462, 462, 1583, 462, 462, 492, 439, 439,
  /* 31434 */ 462, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 388, 388, 439, 439, 439, 439, 439, 698, 439, 439,
  /* 31457 */ 711, 439, 0, 49152, 53248, 0, 0, 0, 0, 345, 45056, 345, 0, 345, 345, 345, 0, 345, 345, 345, 378, 378, 378,
  /* 31480 */ 397, 378, 397, 397, 397, 397, 397, 397, 378, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
  /* 31501 */ 418, 418, 418, 418, 434, 397, 448, 448, 448, 448, 448, 472, 448, 448, 448, 448, 448, 448, 448, 448, 448,
  /* 31522 */ 448, 472, 472, 472, 472, 472, 472, 472, 472, 448, 448, 472, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0,
  /* 31545 */ 0, 388, 388, 439, 439, 439, 439, 439, 700, 439, 439, 439, 439, 439, 439, 737, 439, 439, 439, 439, 439, 0,
  /* 31567 */ 462, 462, 462, 572, 0, 0, 0, 0, 0, 0, 0, 0, 0, 572, 0, 0, 0, 586, 0, 0, 0, 292, 292, 208896, 0, 0, 0, 0,
  /* 31595 */ 0, 0, 0, 0, 0, 0, 388, 388, 0, 439, 439, 439, 0, 0, 0, 388, 388, 388, 388, 388, 640, 388, 388, 388, 388,
  /* 31620 */ 388, 388, 388, 1855, 388, 388, 1858, 439, 439, 439, 439, 439, 462, 462, 462, 759, 462, 462, 462, 462, 462,
  /* 31641 */ 462, 462, 462, 462, 462, 462, 462, 594382, 462, 1774, 462, 2, 6, 0, 0, 0, 0, 819, 823, 0, 0, 0, 0, 0, 0,
  /* 31666 */ 0, 829, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1217, 0, 0, 0, 292, 292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 867, 0, 0,
  /* 31698 */ 0, 0, 0, 0, 1060864, 248, 25081, 0, 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 941, 388, 0, 0,
  /* 31723 */ 884, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1204, 1205, 0, 954, 388, 388, 388, 388, 388, 388, 388, 388,
  /* 31749 */ 388, 0, 0, 0, 0, 0, 0, 0, 0, 0, 520, 0, 439, 439, 439, 439, 981, 987, 439, 439, 439, 439, 439, 439, 439,
  /* 31774 */ 439, 439, 998, 439, 439, 1014, 439, 439, 439, 439, 439, 439, 1024, 439, 439, 439, 439, 439, 439, 439, 744,
  /* 31795 */ 107538, 972, 747, 462, 1046, 1048, 462, 462, 439, 439, 439, 1036, 439, 439, 439, 744, 107538, 972, 747,
  /* 31814 */ 462, 462, 462, 462, 462, 439, 439, 439, 462, 462, 462, 0, 0, 0, 1800, 0, 462, 462, 1053, 1059, 462, 462,
  /* 31836 */ 462, 462, 462, 462, 462, 462, 462, 1070, 462, 462, 439, 439, 462, 57574, 57840, 2, 2, 3, 94212, 5, 6, 0,
  /* 31858 */ 0, 0, 0, 0, 1636, 0, 0, 0, 1639, 0, 0, 0, 0, 1643, 0, 1086, 462, 462, 462, 462, 462, 462, 1096, 462, 462,
  /* 31883 */ 462, 462, 462, 462, 462, 462, 1602, 462, 462, 462, 462, 462, 462, 462, 462, 1108, 462, 462, 462, 439, 439,
  /* 31904 */ 439, 439, 0, 0, 462, 462, 462, 462, 0, 0, 0, 439, 2278, 439, 439, 439, 439, 462, 2282, 462, 462, 1154, 0,
  /* 31927 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1460, 0, 0, 0, 1189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
  /* 31959 */ 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 1227, 388, 388, 388, 388, 388, 388, 388, 1494, 388, 388, 388,
  /* 31982 */ 388, 388, 388, 388, 388, 388, 949, 388, 388, 388, 388, 388, 388, 439, 439, 439, 1261, 1262, 439, 439, 439,
  /* 32003 */ 1266, 439, 439, 439, 439, 439, 439, 439, 739, 439, 439, 439, 439, 0, 462, 462, 462, 1323, 107538, 1326,
  /* 32023 */ 1323, 462, 462, 462, 462, 462, 462, 462, 1335, 1336, 462, 462, 462, 439, 439, 439, 439, 0, 0, 580, 462,
  /* 32044 */ 462, 462, 462, 0, 57574, 1340, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1351, 462, 462,
  /* 32065 */ 439, 462, 439, 462, 439, 462, 439, 462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 0, 302, 462, 462, 462,
  /* 32092 */ 1373, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1786, 462, 462, 462, 462, 0, 0, 0, 1426,
  /* 32114 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1432, 0, 0, 1435, 1461, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32146 */ 1644, 462, 462, 462, 1599, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1900, 462, 462,
  /* 32166 */ 462, 462, 462, 462, 1610, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1367, 462, 462,
  /* 32187 */ 0, 1803, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1671, 0, 0, 1839, 0, 0, 0, 0, 1844, 0, 0, 0, 388, 388,
  /* 32217 */ 1848, 388, 388, 388, 0, 1219, 0, 1134, 1134, 1146, 388, 388, 972, 1254, 1255, 439, 1256, 2027, 0, 0, 0, 0,
  /* 32239 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1684, 0, 0, 439, 439, 439, 439, 2227, 439, 2229, 439, 439, 439, 462, 462,
  /* 32265 */ 462, 462, 462, 2114, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1099, 462, 462, 462, 462, 1105,
  /* 32285 */ 2236, 462, 2238, 462, 462, 462, 439, 462, 0, 0, 0, 0, 0, 0, 0, 2248, 0, 49152, 53248, 0, 0, 0, 0, 0,
  /* 32309 */ 45056, 0, 0, 0, 0, 0, 355, 0, 0, 0, 314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 914, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32341 */ 298, 379, 379, 387, 398, 379, 398, 398, 398, 398, 398, 398, 379, 419, 419, 419, 419, 419, 419, 419, 419,
  /* 32362 */ 419, 419, 419, 419, 419, 419, 419, 419, 398, 449, 449, 449, 449, 449, 473, 449, 449, 449, 449, 449, 449,
  /* 32383 */ 449, 449, 449, 449, 473, 473, 473, 473, 473, 473, 473, 473, 449, 449, 473, 57574, 57840, 2, 2, 3, 94212,
  /* 32404 */ 5, 6, 0, 0, 0, 0, 388, 388, 439, 439, 439, 439, 439, 701, 439, 439, 439, 439, 439, 439, 1020, 439, 439,
  /* 32427 */ 439, 439, 439, 439, 439, 439, 439, 1280, 439, 439, 439, 439, 439, 439, 0, 0, 0, 388, 388, 388, 388, 388,
  /* 32449 */ 641, 388, 388, 388, 388, 388, 388, 388, 1700, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 964, 0, 0,
  /* 32471 */ 0, 0, 0, 462, 462, 462, 760, 462, 462, 773, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1784, 462, 462,
  /* 32493 */ 462, 462, 462, 462, 462, 439, 439, 439, 439, 982, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 32514 */ 439, 439, 2110, 439, 462, 462, 462, 1054, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 32535 */ 1620, 462, 462, 0, 1122, 0, 0, 0, 1128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1444, 0, 0, 0, 0, 0, 0, 0, 0, 1143,
  /* 32564 */ 0, 0, 0, 0, 1147, 0, 0, 0, 0, 0, 0, 0, 390, 441, 441, 441, 441, 441, 465, 441, 441, 1323, 107538, 0, 1323,
  /* 32589 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 1337, 462, 462, 439, 462, 439, 462, 2297, 2298, 439, 462, 0,
  /* 32610 */ 0, 0, 0, 0, 0, 0, 2030, 0, 0, 0, 2033, 0, 0, 0, 0, 0, 0, 0, 1412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32641 */ 1681, 0, 0, 0, 1423, 0, 0, 0, 1427, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1808, 0, 0, 0, 0, 0, 0, 1452, 0, 0,
  /* 32671 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1420, 0, 0, 0, 0, 0, 1464, 0, 0, 0, 0, 0, 1470, 0, 0, 0, 0, 0, 0, 0,
  /* 32702 */ 1664, 0, 0, 0, 0, 0, 0, 0, 0, 1201, 0, 0, 0, 0, 0, 0, 0, 0, 439, 1541, 439, 439, 439, 1545, 439, 439, 439,
  /* 32729 */ 439, 439, 439, 439, 439, 439, 439, 439, 1741, 439, 439, 439, 439, 0, 0, 0, 388, 388, 388, 388, 388, 388,
  /* 32751 */ 388, 844164, 388, 388, 439, 439, 439, 439, 1970, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1025,
  /* 32771 */ 439, 439, 439, 439, 439, 844215, 439, 439, 439, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 32791 */ 462, 2001, 2002, 462, 462, 462, 0, 388, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 2144, 439, 462,
  /* 32812 */ 462, 439, 462, 2295, 2296, 439, 462, 439, 462, 0, 0, 0, 0, 0, 0, 2130, 0, 0, 2133, 0, 0, 0, 462, 823735,
  /* 32836 */ 823758, 0, 0, 0, 0, 439, 439, 439, 439, 439, 439, 462, 462, 462, 439, 439, 439, 439, 0, 0, 188416, 462,
  /* 32858 */ 462, 462, 462, 0, 57574, 311, 0, 0, 0, 0, 0, 0, 0, 0, 275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49152, 53248, 0,
  /* 32885 */ 310, 0, 0, 0, 45056, 0, 275, 0, 0, 0, 0, 0, 0, 674, 675, 0, 0, 0, 0, 550, 0, 0, 0, 450, 450, 450, 450,
  /* 32912 */ 450, 450, 450, 450, 474, 474, 474, 474, 474, 474, 474, 474, 450, 450, 474, 57574, 57574, 2, 2, 3, 94212,
  /* 32933 */ 5, 6, 0, 0, 0, 0, 388, 388, 439, 439, 439, 439, 439, 702, 439, 439, 439, 439, 439, 439, 1021, 1022, 439,
  /* 32956 */ 439, 439, 439, 439, 439, 439, 439, 1312, 439, 439, 439, 439, 439, 439, 0, 556, 0, 0, 559, 0, 0, 0, 0, 0,
  /* 32980 */ 565, 0, 0, 0, 0, 0, 0, 0, 2023, 0, 0, 0, 0, 0, 0, 0, 0, 1943, 0, 0, 0, 0, 0, 0, 0, 0, 0, 574, 0, 0, 0, 0,
  /* 33012 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1447, 0, 0, 0, 601, 0, 0, 0, 0, 0, 0, 0, 0, 522, 0, 0, 0, 0, 0, 0, 834, 0, 0,
  /* 33044 */ 0, 388, 388, 972, 439, 439, 439, 0, 0, 0, 613, 0, 0, 0, 0, 621, 0, 0, 0, 0, 0, 630, 0, 0, 0, 380, 386,
  /* 33071 */ 386, 399, 386, 399, 399, 399, 399, 399, 399, 380, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
  /* 33092 */ 386, 386, 386, 386, 386, 399, 450, 450, 450, 450, 450, 474, 450, 450, 669, 0, 0, 556, 0, 673, 0, 0, 613,
  /* 33115 */ 522, 677, 0, 0, 0, 0, 680, 439, 439, 723, 439, 439, 439, 439, 738, 439, 439, 439, 439, 0, 462, 462, 749,
  /* 33138 */ 462, 462, 462, 761, 462, 462, 774, 462, 462, 462, 785, 462, 462, 462, 462, 800, 462, 462, 462, 687, 439,
  /* 33159 */ 723, 439, 0, 0, 0, 749, 462, 785, 462, 0, 57574, 830, 831, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1683,
  /* 33187 */ 0, 292, 292, 0, 861, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1821, 0, 0, 0, 1000, 439, 439, 439, 439, 439,
  /* 33214 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1012, 0, 0, 0, 388, 388, 388, 388, 388, 388, 1228, 388,
  /* 33236 */ 388, 388, 388, 388, 388, 1854, 388, 388, 1856, 1857, 439, 1859, 439, 439, 439, 1862, 439, 439, 439, 439,
  /* 33256 */ 1309, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 0, 0, 0, 0, 1323, 0, 0, 0, 0, 462, 1323, 107538,
  /* 33279 */ 0, 1323, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1339, 462, 1572, 462, 462, 462, 462, 462,
  /* 33300 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 1773, 462, 462, 0, 0, 1633, 0, 0, 0, 1637, 0, 0, 0, 0, 1641,
  /* 33324 */ 0, 0, 0, 0, 0, 0, 1060864, 25078, 249, 0, 0, 0, 0, 0, 0, 0, 249, 249, 249, 249, 249, 249, 249, 249, 249,
  /* 33349 */ 1645, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1654, 0, 0, 0, 0, 0, 0, 1122304, 1122304, 1122304, 1482752, 1122304,
  /* 33372 */ 1122304, 1122304, 1122304, 1122304, 1122304, 0, 1686, 0, 0, 1689, 0, 0, 0, 388, 388, 388, 388, 388, 388,
  /* 33391 */ 388, 1696, 1719, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1726, 439, 439, 439, 439, 439, 0, 0, 0, 0,
  /* 33413 */ 0, 0, 0, 0, 0, 0, 0, 595, 0, 0, 0, 0, 1764, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1771, 462, 462,
  /* 33438 */ 462, 462, 462, 439, 439, 439, 462, 462, 462, 1797, 1798, 0, 0, 0, 1825, 0, 0, 0, 1828, 0, 0, 0, 0, 0, 0,
  /* 33463 */ 0, 0, 1835, 0, 0, 0, 0, 1939, 1940, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1667, 0, 0, 0, 0, 1672, 1838, 0, 0, 0,
  /* 33492 */ 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388, 1695, 388, 439, 439, 439, 439, 439, 1867, 439, 439, 439,
  /* 33515 */ 439, 439, 439, 439, 439, 439, 439, 743, 439, 0, 462, 462, 462, 462, 462, 1894, 462, 462, 462, 462, 462,
  /* 33536 */ 462, 462, 462, 462, 462, 462, 462, 462, 439, 462, 2188, 0, 2189, 0, 0, 0, 0, 1927, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33562 */ 0, 0, 0, 0, 1947, 0, 0, 0, 0, 1951, 0, 0, 0, 0, 1956, 388, 388, 388, 388, 388, 388, 388, 388, 1964, 1965,
  /* 33587 */ 439, 1967, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1975, 1976, 439, 439, 439, 439, 439, 1722,
  /* 33607 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1536, 439, 439, 439, 439, 439, 439, 439, 439, 1980, 439,
  /* 33628 */ 439, 439, 439, 439, 439, 439, 439, 462, 1990, 462, 462, 462, 462, 1588, 462, 462, 462, 1592, 462, 462,
  /* 33648 */ 462, 462, 462, 462, 462, 1377, 462, 462, 462, 462, 462, 462, 462, 462, 1347, 462, 462, 462, 462, 462, 462,
  /* 33669 */ 462, 0, 0, 0, 388, 388, 2040, 2041, 388, 388, 388, 388, 388, 388, 439, 439, 439, 1709, 439, 1711, 439,
  /* 33690 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 2056, 439, 439, 439, 439, 439, 439, 2049, 2050, 2051, 439,
  /* 33710 */ 439, 439, 439, 439, 439, 439, 439, 2058, 439, 439, 439, 439, 439, 439, 1039, 744, 107538, 972, 747, 462,
  /* 33730 */ 462, 462, 462, 462, 439, 688567, 1794, 462, 688590, 1796, 0, 0, 0, 0, 1801, 462, 462, 462, 2076, 462, 462,
  /* 33751 */ 462, 462, 462, 462, 462, 439, 439, 462, 462, 0, 2016, 0, 0, 0, 439, 439, 439, 2102, 439, 439, 439, 439,
  /* 33773 */ 439, 439, 439, 439, 439, 439, 439, 462, 439, 462, 0, 2260, 0, 2262, 439, 439, 439, 439, 439, 439, 462,
  /* 33794 */ 462, 462, 439, 439, 439, 730, 0, 0, 0, 462, 462, 462, 792, 0, 57574, 0, 388, 439, 439, 439, 439, 439, 439,
  /* 33817 */ 2140, 439, 439, 439, 439, 439, 462, 462, 0, 0, 0, 0, 0, 0, 1921, 0, 0, 0, 0, 0, 0, 0, 1552384, 0, 0,
  /* 33842 */ 1122304, 1409024, 1122304, 1122304, 1122304, 1122304, 462, 462, 462, 462, 2150, 462, 462, 462, 462, 462,
  /* 33858 */ 439, 462, 0, 2158, 0, 0, 0, 0, 2097, 0, 388, 388, 2098, 388, 388, 388, 388, 439, 439, 439, 439, 1710, 439,
  /* 33881 */ 439, 439, 439, 439, 439, 439, 1716, 439, 1718, 2161, 0, 0, 0, 0, 0, 439, 439, 439, 2169, 439, 439, 439,
  /* 33903 */ 439, 439, 439, 439, 1004, 439, 439, 1008, 439, 439, 439, 439, 439, 462, 462, 462, 2179, 462, 462, 462,
  /* 33923 */ 462, 462, 462, 439, 462, 0, 0, 0, 0, 439, 439, 2265, 2266, 439, 439, 462, 462, 2271, 0, 2191, 0, 0, 0,
  /* 33946 */ 439, 439, 439, 439, 439, 439, 439, 2202, 439, 2204, 462, 439, 462, 2125, 0, 2127, 0, 0, 0, 0, 0, 2132, 0,
  /* 33969 */ 0, 2134, 0, 0, 0, 382, 382, 382, 403, 382, 403, 403, 403, 403, 403, 403, 382, 421, 382, 382, 382, 382,
  /* 33991 */ 421, 421, 428, 382, 428, 428, 428, 382, 382, 382, 428, 428, 428, 428, 430, 382, 436, 403, 455, 455, 455,
  /* 34012 */ 455, 455, 479, 455, 455, 455, 455, 455, 455, 455, 455, 479, 479, 479, 479, 479, 479, 479, 479, 455, 455,
  /* 34033 */ 479, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 576, 0, 0, 0, 0, 582, 0, 0, 0, 0, 585, 0, 2272, 462,
  /* 34060 */ 462, 0, 0, 0, 439, 439, 439, 439, 439, 439, 462, 462, 462, 462, 462, 2241, 439, 462, 0, 0, 0, 0, 2245, 0,
  /* 34084 */ 2247, 439, 0, 276, 278, 313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2025, 0, 0, 0, 278, 49152, 53248, 0, 0,
  /* 34111 */ 277, 279, 278, 45056, 278, 279, 278, 350, 278, 0, 278, 278, 350, 381, 381, 381, 400, 407, 400, 400, 400,
  /* 34132 */ 400, 400, 400, 411, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 400,
  /* 34153 */ 451, 451, 451, 451, 451, 475, 451, 451, 451, 451, 451, 486, 486, 486, 486, 451, 475, 475, 475, 475, 475,
  /* 34174 */ 475, 475, 475, 493, 451, 451, 475, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 388, 388, 439, 439,
  /* 34197 */ 439, 439, 695, 439, 703, 439, 439, 439, 0, 0, 0, 0, 1885, 462, 462, 462, 462, 462, 462, 462, 462, 439,
  /* 34219 */ 439, 439, 1396, 462, 462, 462, 1400, 0, 0, 0, 512, 513, 514, 515, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1819, 0,
  /* 34245 */ 0, 0, 0, 0, 0, 527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1823, 0, 0, 573, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34278 */ 0, 0, 0, 0, 0, 1836, 0, 0, 0, 0, 508, 588, 589, 590, 0, 0, 0, 0, 0, 596, 0, 0, 0, 0, 388, 388, 439, 439,
  /* 34306 */ 439, 692, 439, 439, 439, 439, 439, 439, 0, 1561, 0, 0, 1323, 0, 1567, 0, 0, 462, 0, 0, 631, 388, 388, 388,
  /* 34330 */ 637, 388, 388, 645, 388, 388, 388, 655, 388, 388, 0, 388, 388, 439, 1507, 439, 439, 439, 439, 439, 439,
  /* 34351 */ 439, 439, 439, 1535, 439, 439, 439, 439, 439, 439, 0, 0, 671, 0, 628, 0, 596, 596, 0, 0, 0, 628, 0, 628,
  /* 34375 */ 0, 0, 0, 0, 2164, 0, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1281, 439, 1285, 1286, 439, 439, 0,
  /* 34398 */ 0, 0, 628, 683, 388, 439, 439, 439, 693, 696, 439, 704, 439, 439, 439, 439, 439, 439, 1264, 439, 439, 439,
  /* 34420 */ 439, 439, 439, 439, 439, 439, 1986, 439, 439, 462, 462, 1991, 462, 719, 722, 439, 439, 439, 731, 735, 439,
  /* 34441 */ 439, 439, 439, 439, 0, 462, 462, 462, 439, 439, 439, 729, 0, 0, 0, 462, 462, 462, 791, 0, 57574, 462, 755,
  /* 34464 */ 758, 462, 766, 462, 462, 462, 781, 784, 462, 462, 462, 793, 797, 462, 462, 462, 462, 1612, 462, 462, 462,
  /* 34485 */ 462, 462, 462, 462, 462, 462, 462, 462, 1100, 462, 462, 462, 462, 439, 439, 1001, 439, 439, 439, 439, 439,
  /* 34506 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 1287, 439, 439, 1034, 439, 439, 439, 439, 439, 744, 107538,
  /* 34526 */ 972, 747, 462, 462, 462, 462, 462, 439, 439, 439, 1026, 0, 0, 462, 462, 462, 1098, 0, 1073, 462, 462, 462,
  /* 34548 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1597, 462, 462, 462, 1090, 462, 462, 462, 462,
  /* 34569 */ 462, 462, 462, 462, 462, 462, 462, 1106, 1170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1824, 1186, 0,
  /* 34596 */ 1188, 0, 1190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2024, 0, 0, 0, 0, 0, 1198, 0, 586, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34627 */ 0, 0, 0, 0, 135168, 0, 0, 0, 0, 135168, 0, 0, 1221, 0, 388, 388, 388, 1224, 388, 388, 388, 388, 388, 388,
  /* 34651 */ 388, 388, 388, 1702, 388, 388, 1704, 388, 388, 388, 388, 1248, 388, 388, 0, 1190, 0, 0, 0, 0, 388, 388,
  /* 34673 */ 972, 439, 439, 439, 439, 439, 439, 439, 1983, 439, 439, 439, 439, 462, 462, 462, 462, 1401, 0, 1403, 0, 0,
  /* 34695 */ 0, 0, 0, 439, 1258, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1552, 1323,
  /* 34717 */ 107538, 0, 1323, 462, 462, 462, 462, 462, 1332, 462, 462, 462, 462, 462, 462, 772, 462, 462, 462, 462,
  /* 34737 */ 462, 462, 462, 462, 462, 1616, 462, 462, 462, 462, 462, 462, 462, 462, 1355, 462, 1359, 1360, 462, 462,
  /* 34757 */ 462, 462, 462, 462, 462, 462, 462, 462, 1348, 462, 462, 462, 462, 462, 1386, 462, 462, 462, 462, 462, 462,
  /* 34778 */ 439, 439, 439, 439, 462, 462, 462, 462, 0, 1124, 0, 1130, 0, 0, 0, 0, 0, 0, 1402, 0, 819, 0, 0, 0, 1404,
  /* 34803 */ 0, 823, 0, 0, 0, 0, 0, 0, 835, 0, 0, 0, 970, 388, 972, 439, 439, 439, 1673, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34832 */ 0, 0, 0, 0, 0, 1837, 1326, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 34854 */ 1621, 0, 1811, 1812, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1642, 0, 0, 1993, 462, 462, 462, 462, 462,
  /* 34880 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1775, 0, 0, 0, 2087, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34907 */ 135168, 135168, 0, 0, 0, 388, 439, 439, 439, 2137, 439, 439, 439, 439, 439, 439, 439, 439, 462, 462, 0, 0,
  /* 34929 */ 0, 0, 0, 1920, 0, 0, 0, 0, 0, 0, 0, 1677, 0, 0, 0, 0, 0, 0, 0, 0, 897, 0, 0, 0, 0, 0, 0, 0, 462, 2147,
  /* 34959 */ 462, 462, 462, 462, 462, 462, 462, 462, 439, 462, 0, 0, 0, 0, 439, 2264, 439, 439, 439, 2268, 462, 2270,
  /* 34981 */ 462, 462, 2177, 462, 462, 462, 2181, 462, 462, 462, 462, 439, 462, 0, 0, 0, 0, 2263, 439, 439, 439, 439,
  /* 35003 */ 439, 2269, 462, 462, 312, 0, 0, 0, 312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237568, 0, 0, 0, 0, 0, 49152,
  /* 35030 */ 53248, 0, 327, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 356, 0, 0, 0, 383, 383, 383, 404, 408, 404, 404, 404, 404,
  /* 35055 */ 404, 404, 408, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 408, 383, 383, 383, 383,
  /* 35076 */ 383, 383, 383, 404, 456, 456, 456, 456, 456, 480, 456, 456, 456, 456, 456, 456, 456, 456, 480, 480, 480,
  /* 35097 */ 480, 480, 480, 480, 480, 456, 456, 480, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 848, 0, 0, 0, 0,
  /* 35122 */ 0, 0, 0, 0, 0, 858, 0, 0, 0, 324, 0, 0, 0, 388, 0, 388, 388, 388, 388, 388, 388, 0, 324, 324, 324, 324,
  /* 35148 */ 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 438, 452, 452, 452, 452, 452, 476, 452, 452,
  /* 35169 */ 452, 452, 452, 452, 452, 452, 452, 452, 476, 476, 476, 476, 476, 476, 476, 476, 452, 452, 476, 57574,
  /* 35189 */ 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 388, 388, 439, 687, 439, 439, 439, 699, 439, 439, 712, 439, 943,
  /* 35213 */ 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 952, 388, 388, 0, 388, 388, 1506, 439, 439,
  /* 35234 */ 439, 1510, 439, 439, 439, 439, 439, 439, 439, 1006, 439, 439, 439, 439, 439, 439, 439, 439, 1522, 1523,
  /* 35254 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 983, 439, 439, 439, 439, 993, 439, 439, 439, 439, 439,
  /* 35275 */ 439, 439, 1005, 439, 439, 439, 1009, 439, 439, 439, 439, 1032, 439, 439, 439, 439, 439, 439, 744, 107538,
  /* 35295 */ 972, 747, 462, 462, 462, 462, 462, 439, 439, 1114, 439, 0, 0, 462, 462, 1118, 462, 0, 462, 462, 1055, 462,
  /* 35317 */ 462, 462, 462, 1065, 462, 462, 462, 462, 462, 462, 462, 462, 1079, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 35338 */ 1097, 462, 462, 462, 462, 462, 462, 462, 0, 1123, 0, 0, 0, 1129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 0,
  /* 35364 */ 0, 0, 0, 139264, 899, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2037, 0, 1124, 0, 0, 0, 0, 0, 1130, 0,
  /* 35394 */ 0, 0, 0, 0, 0, 0, 0, 1817, 0, 0, 1820, 0, 0, 0, 0, 1490, 1491, 388, 388, 388, 388, 388, 388, 388, 388,
  /* 35419 */ 388, 388, 388, 388, 388, 388, 388, 388, 1247, 616, 0, 0, 388, 388, 388, 388, 388, 643, 388, 388, 388, 388,
  /* 35441 */ 388, 388, 388, 958, 388, 959, 388, 388, 388, 0, 0, 0, 0, 0, 0, 388, 388, 972, 439, 439, 439, 439, 462,
  /* 35464 */ 462, 462, 762, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1363, 462, 462, 462, 462, 462,
  /* 35485 */ 462, 462, 805, 439, 439, 439, 439, 0, 0, 0, 462, 462, 462, 462, 0, 57574, 2, 6, 0, 0, 0, 0, 820, 824, 0,
  /* 35510 */ 0, 0, 0, 0, 0, 0, 0, 1831, 0, 0, 0, 0, 0, 0, 0, 1323, 107538, 1327, 1323, 462, 462, 462, 462, 462, 462,
  /* 35535 */ 462, 462, 462, 462, 462, 462, 1381, 1382, 462, 462, 462, 462, 439, 439, 439, 439, 439, 2053, 439, 439,
  /* 35555 */ 439, 439, 439, 439, 439, 439, 439, 439, 1298, 439, 439, 439, 439, 439, 0, 49152, 53248, 0, 0, 0, 283, 282,
  /* 35577 */ 45056, 282, 283, 282, 282, 282, 0, 282, 282, 282, 0, 0, 0, 401, 0, 401, 401, 401, 401, 401, 401, 283, 282,
  /* 35600 */ 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 433, 282, 401, 453, 453, 453,
  /* 35621 */ 453, 453, 477, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 477, 477, 477, 477, 477, 477, 477, 477,
  /* 35642 */ 453, 453, 477, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 388, 388, 439, 688, 439, 439, 439, 439,
  /* 35665 */ 439, 439, 713, 439, 0, 557, 0, 0, 0, 0, 0, 563, 564, 0, 0, 0, 0, 0, 0, 0, 489, 489, 489, 489, 489, 489,
  /* 35691 */ 489, 489, 489, 0, 0, 0, 575, 0, 0, 579, 0, 0, 0, 0, 0, 0, 0, 0, 0, 853, 0, 0, 0, 0, 0, 0, 600, 0, 0, 0, 0,
  /* 35722 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196608, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 647, 388, 388, 388,
  /* 35748 */ 388, 658, 388, 388, 663, 388, 388, 0, 627, 0, 0, 0, 668, 0, 0, 0, 0, 591, 0, 0, 0, 672, 0, 0, 0, 0, 0, 0,
  /* 35776 */ 0, 678, 0, 629, 0, 0, 0, 0, 159744, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 330, 0, 0, 0, 0, 330, 0, 0, 0,
  /* 35805 */ 678, 388, 684, 439, 439, 439, 439, 439, 439, 439, 707, 439, 439, 439, 439, 439, 1018, 439, 439, 439, 439,
  /* 35826 */ 439, 439, 439, 439, 439, 439, 994, 439, 439, 439, 439, 439, 439, 439, 724, 726, 439, 439, 736, 439, 439,
  /* 35847 */ 439, 439, 439, 0, 462, 462, 462, 439, 439, 439, 731, 0, 0, 0, 462, 462, 462, 793, 0, 57574, 462, 462, 462,
  /* 35870 */ 806, 439, 724, 439, 0, 0, 0, 812, 462, 786, 462, 0, 57574, 292, 292, 0, 0, 0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
  /* 35897 */ 0, 0, 0, 836, 0, 0, 0, 0, 0, 841, 0, 0, 0, 0, 889, 0, 0, 0, 893, 0, 0, 0, 0, 0, 0, 0, 902, 0, 0, 0, 0, 0,
  /* 35929 */ 0, 0, 0, 0, 0, 0, 0, 0, 1656, 0, 0, 439, 439, 439, 439, 1016, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 35954 */ 439, 439, 439, 1027, 439, 439, 439, 462, 462, 1088, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 35975 */ 462, 462, 1579, 462, 462, 1582, 462, 462, 388, 1249, 388, 0, 0, 0, 0, 0, 0, 388, 388, 972, 439, 439, 439,
  /* 35998 */ 439, 439, 439, 989, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1870, 439, 439, 439, 439, 439, 439, 1257,
  /* 36019 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1031, 439, 439, 1274, 439, 439,
  /* 36040 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1538, 439, 439, 1306, 439, 439, 439, 439, 439,
  /* 36061 */ 439, 439, 1313, 439, 439, 1316, 439, 439, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
  /* 36083 */ 388, 388, 388, 388, 1705, 1323, 107538, 0, 1323, 462, 462, 462, 462, 1331, 462, 462, 462, 462, 462, 462,
  /* 36103 */ 462, 1601, 462, 462, 462, 462, 462, 1607, 462, 462, 462, 1387, 462, 462, 1390, 462, 462, 439, 439, 439,
  /* 36123 */ 439, 462, 462, 462, 462, 0, 2276, 0, 439, 439, 439, 439, 439, 439, 462, 462, 462, 462, 767, 462, 462, 462,
  /* 36145 */ 462, 462, 462, 462, 462, 462, 462, 462, 1590, 462, 462, 462, 462, 462, 462, 462, 462, 462, 439, 439, 439,
  /* 36166 */ 439, 462, 462, 462, 462, 1120, 0, 0, 1425, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1670, 0, 0, 1436, 0, 0,
  /* 36194 */ 0, 0, 0, 1441, 0, 0, 1443, 0, 1445, 0, 0, 0, 0, 0, 0, 1540096, 0, 0, 1683456, 0, 0, 0, 0, 0, 0, 0, 896, 0,
  /* 36222 */ 0, 0, 0, 0, 0, 0, 0, 1060864, 0, 0, 0, 0, 0, 0, 929792, 0, 1451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36253 */ 1949, 0, 0, 0, 1478, 0, 0, 1481, 388, 1483, 388, 388, 388, 388, 388, 388, 388, 388, 1236, 388, 388, 388,
  /* 36275 */ 388, 388, 388, 388, 388, 388, 388, 388, 832, 0, 0, 0, 0, 0, 1529, 1530, 439, 1532, 439, 439, 439, 439,
  /* 36297 */ 439, 439, 439, 439, 439, 1537, 439, 439, 439, 439, 439, 1038, 439, 744, 107538, 972, 747, 1045, 462, 462,
  /* 36317 */ 1049, 462, 439, 439, 439, 1543, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1317,
  /* 36337 */ 439, 0, 462, 462, 462, 1574, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1593, 1594, 462,
  /* 36358 */ 1596, 462, 462, 1631, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 0, 0, 0, 1661, 0, 0, 0, 0, 0,
  /* 36387 */ 1666, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1926, 0, 0, 0, 0, 0, 0, 0, 1932,
  /* 36418 */ 0, 0, 0, 0, 0, 0, 878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 299, 0, 0, 0, 0, 0, 0, 388, 1966, 439, 439, 439, 439,
  /* 36447 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1730, 462, 462, 462, 2008, 462, 462, 462, 439,
  /* 36467 */ 2013, 462, 2015, 0, 0, 0, 0, 0, 0, 894, 0, 898, 0, 0, 832, 0, 0, 0, 0, 0, 838, 0, 0, 0, 0, 842, 0, 0, 0,
  /* 36496 */ 388, 2135, 439, 439, 439, 439, 439, 439, 439, 439, 2143, 439, 439, 2145, 462, 462, 462, 462, 1792, 439,
  /* 36516 */ 439, 439, 462, 462, 462, 0, 0, 0, 0, 0, 0, 923, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1202, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36546 */ 2192, 0, 2194, 439, 2196, 439, 439, 439, 439, 439, 439, 439, 439, 462, 462, 462, 462, 1896, 462, 462, 462,
  /* 36567 */ 462, 462, 462, 462, 462, 462, 462, 462, 1899, 462, 462, 462, 462, 462, 2206, 462, 462, 462, 462, 462, 462,
  /* 36588 */ 462, 462, 439, 462, 0, 0, 0, 0, 0, 2246, 0, 439, 2222, 0, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 36611 */ 439, 462, 462, 462, 462, 1075, 462, 462, 462, 462, 462, 462, 1082, 462, 462, 462, 462, 1061, 462, 462,
  /* 36631 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 2152, 462, 462, 462, 2155, 2156, 0, 0, 0, 0, 462, 2273, 462,
  /* 36653 */ 2275, 0, 2277, 439, 439, 439, 439, 439, 439, 462, 462, 462, 462, 1091, 462, 462, 462, 462, 462, 462, 462,
  /* 36674 */ 462, 462, 462, 462, 439, 462, 2157, 0, 2159, 0, 284, 285, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 0,
  /* 36700 */ 1396736, 0, 0, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 0, 0, 0, 0, 0, 49152, 53248, 0, 0, 0, 0, 346, 45056, 346,
  /* 36727 */ 0, 346, 346, 346, 0, 346, 346, 365, 0, 0, 284, 402, 0, 402, 402, 402, 402, 402, 402, 0, 365, 365, 365,
  /* 36750 */ 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 429, 365, 435, 402, 454, 454, 454, 454,
  /* 36771 */ 454, 478, 454, 454, 454, 454, 454, 487, 487, 487, 487, 454, 478, 478, 478, 478, 478, 478, 478, 478, 494,
  /* 36792 */ 454, 454, 478, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 530, 0, 0, 0, 0, 0, 0, 0, 0, 0, 540, 0, 0,
  /* 36820 */ 0, 0, 388, 634, 388, 388, 388, 388, 388, 388, 651, 388, 388, 388, 388, 1493, 388, 388, 388, 1495, 1496,
  /* 36841 */ 388, 388, 388, 388, 388, 388, 1699, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 439, 439, 1860,
  /* 36862 */ 439, 439, 439, 622, 0, 0, 0, 0, 622, 0, 0, 608, 0, 622, 0, 0, 0, 0, 622, 462, 462, 462, 688, 807, 439,
  /* 36887 */ 439, 0, 0, 0, 750, 813, 462, 462, 0, 57574, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 825, 0, 0, 827, 0, 0, 0, 0,
  /* 36915 */ 172032, 0, 172032, 172032, 172032, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 1527808, 0, 0, 0, 0, 1757184, 0,
  /* 36936 */ 0, 0, 827, 919, 0, 0, 0, 922, 0, 0, 0, 0, 0, 0, 926, 0, 0, 0, 0, 560, 0, 562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36967 */ 519, 520, 0, 0, 0, 0, 0, 926, 967, 968, 0, 926, 0, 919, 969, 0, 0, 388, 388, 972, 439, 439, 439, 439, 439,
  /* 36992 */ 439, 1558, 0, 0, 0, 1323, 1564, 0, 0, 0, 462, 439, 439, 979, 439, 439, 988, 439, 439, 992, 439, 439, 439,
  /* 37015 */ 439, 439, 439, 439, 744, 0, 0, 747, 462, 462, 462, 462, 462, 1051, 462, 462, 1060, 462, 462, 1064, 462,
  /* 37036 */ 462, 462, 462, 462, 462, 462, 462, 462, 1898, 462, 462, 462, 462, 462, 462, 462, 462, 439, 1394, 439, 439,
  /* 37057 */ 462, 1398, 462, 462, 0, 0, 1171, 0, 0, 1174, 0, 0, 0, 0, 1179, 0, 0, 0, 0, 0, 0, 0, 139264, 0, 0, 0, 0, 0,
  /* 37085 */ 0, 139264, 0, 439, 439, 439, 439, 1276, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1526,
  /* 37106 */ 439, 439, 439, 439, 439, 439, 439, 1544, 439, 439, 439, 439, 439, 439, 439, 1549, 439, 1551, 439, 439,
  /* 37126 */ 439, 439, 439, 1736, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1026, 439, 439, 439, 1029,
  /* 37146 */ 1571, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 2122, 439, 439, 439,
  /* 37166 */ 1734, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1728, 439, 439, 462, 462, 462,
  /* 37186 */ 1779, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1617, 462, 1619, 462, 462, 462, 439,
  /* 37206 */ 439, 439, 439, 439, 1877, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1524, 439, 439, 439, 1528,
  /* 37226 */ 439, 462, 462, 1904, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1908, 462, 462, 462,
  /* 37247 */ 462, 462, 0, 0, 0, 388, 388, 388, 388, 388, 388, 2043, 388, 388, 388, 439, 439, 439, 1969, 439, 439, 439,
  /* 37269 */ 439, 439, 439, 439, 1974, 439, 439, 1977, 462, 462, 462, 462, 2077, 462, 462, 462, 462, 462, 462, 439,
  /* 37289 */ 439, 462, 462, 2084, 0, 0, 2086, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2093, 0, 0, 0, 388, 388, 388, 388, 388,
  /* 37316 */ 388, 388, 388, 388, 388, 439, 439, 439, 439, 439, 439, 0, 388, 439, 439, 439, 439, 439, 2139, 439, 2141,
  /* 37337 */ 439, 439, 439, 439, 462, 462, 0, 0, 0, 1919, 0, 0, 0, 0, 0, 1922, 0, 0, 462, 462, 462, 2149, 462, 2151,
  /* 37361 */ 462, 462, 462, 462, 439, 462, 0, 0, 0, 0, 0, 0, 1662976, 0, 0, 0, 0, 1069056, 0, 0, 0, 0, 0, 0, 1176, 0,
  /* 37387 */ 0, 0, 0, 0, 1182, 0, 0, 0, 0, 0, 439, 439, 439, 439, 439, 439, 439, 2230, 439, 439, 462, 462, 462, 462,
  /* 37411 */ 1092, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1104, 462, 462, 462, 462, 2239, 462, 462, 439, 462, 0,
  /* 37432 */ 2244, 0, 0, 0, 0, 0, 439, 439, 439, 439, 439, 2200, 439, 439, 439, 439, 462, 2249, 439, 439, 439, 439,
  /* 37454 */ 439, 439, 439, 462, 2255, 462, 462, 462, 462, 462, 462, 775, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 37475 */ 1783, 462, 462, 462, 462, 1787, 462, 462, 462, 0, 0, 286, 0, 0, 0, 0, 0, 0, 292, 295, 0, 0, 0, 0, 0, 0,
  /* 37501 */ 911, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 275, 0, 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 648,
  /* 37529 */ 388, 653, 388, 388, 388, 664, 388, 0, 0, 630, 0, 0, 0, 613, 0, 0, 522, 0, 388, 661, 388, 388, 388, 0, 0,
  /* 37554 */ 0, 0, 0, 0, 0, 0, 0, 0, 619, 0, 624, 0, 0, 0, 0, 0, 0, 552, 0, 0, 0, 612, 0, 0, 0, 0, 624, 682, 0, 388,
  /* 37584 */ 388, 439, 689, 439, 439, 439, 439, 439, 708, 714, 717, 462, 462, 462, 689, 439, 439, 809, 0, 0, 0, 751,
  /* 37606 */ 462, 462, 815, 0, 57574, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37637 */ 927, 0, 0, 0, 0, 614, 0, 0, 0, 0, 0, 0, 528, 0, 0, 0, 0, 0, 0, 2166, 439, 439, 439, 439, 439, 439, 439,
  /* 37664 */ 439, 439, 439, 1880, 439, 439, 439, 439, 439, 0, 845, 0, 0, 0, 0, 850, 0, 0, 0, 0, 0, 0, 0, 0, 859, 292,
  /* 37690 */ 292, 0, 0, 0, 863, 864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 899, 0, 0, 0, 0, 0, 904, 388, 388, 956, 957, 388, 388,
  /* 37718 */ 388, 388, 388, 963, 0, 0, 965, 904, 0, 0, 0, 0, 1122304, 1122304, 1114112, 1114112, 1114112, 1114112,
  /* 37736 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 1114112, 1114112, 1114112, 965,
  /* 37749 */ 0, 0, 864, 965, 0, 0, 965, 850, 0, 388, 388, 972, 973, 439, 439, 439, 439, 439, 1263, 439, 439, 439, 439,
  /* 37772 */ 439, 439, 439, 439, 1271, 439, 977, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 37793 */ 439, 1303, 462, 462, 462, 1110, 462, 439, 439, 439, 439, 0, 0, 462, 462, 462, 462, 0, 0, 0, 439, 439, 439,
  /* 37816 */ 439, 462, 462, 462, 462, 0, 439, 439, 0, 0, 1124, 0, 0, 0, 1130, 0, 0, 0, 0, 0, 0, 0, 1138, 0, 0, 0, 388,
  /* 37843 */ 388, 388, 388, 388, 388, 388, 388, 388, 388, 439, 439, 2048, 0, 0, 1209, 0, 0, 0, 0, 0, 0, 1215, 0, 0, 0,
  /* 37868 */ 1218, 0, 0, 0, 0, 1122304, 1122304, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797,
  /* 37882 */ 1114797, 1114797, 1114797, 1114797, 1114797, 1508013, 1114797, 1114797, 1114797, 0, 0, 0, 388, 388, 388,
  /* 37897 */ 388, 1226, 388, 388, 388, 388, 388, 388, 1232, 388, 388, 388, 1698, 388, 388, 388, 1701, 388, 388, 388,
  /* 37917 */ 388, 388, 388, 388, 388, 1239, 388, 388, 388, 1243, 388, 388, 388, 439, 439, 1260, 439, 439, 439, 439,
  /* 37937 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1743, 439, 1273, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 37958 */ 439, 439, 1283, 439, 439, 439, 1288, 439, 439, 1307, 1308, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 37978 */ 439, 439, 0, 0, 0, 1563, 1323, 0, 0, 0, 1569, 462, 1323, 107538, 0, 1323, 462, 462, 462, 462, 462, 462,
  /* 38000 */ 1334, 462, 462, 462, 462, 462, 439, 1113, 439, 439, 0, 0, 462, 1117, 462, 462, 0, 462, 462, 462, 1357,
  /* 38021 */ 462, 462, 462, 1362, 462, 462, 462, 462, 462, 462, 462, 462, 844238, 462, 462, 462, 606647, 439, 606670,
  /* 38040 */ 462, 0, 1409, 0, 0, 0, 0, 1414, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128, 176128,
  /* 38063 */ 176128, 0, 0, 0, 1479, 0, 388, 388, 388, 388, 388, 388, 1486, 388, 388, 388, 388, 945, 388, 388, 388, 388,
  /* 38085 */ 388, 388, 388, 388, 388, 388, 388, 388, 388, 1245, 388, 388, 1515, 439, 439, 1518, 439, 439, 439, 439,
  /* 38105 */ 439, 439, 439, 1525, 439, 1527, 439, 439, 439, 439, 439, 1277, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 38125 */ 439, 439, 439, 1315, 439, 439, 439, 0, 439, 1554, 439, 439, 439, 439, 0, 0, 1562, 0, 1323, 0, 0, 1568, 0,
  /* 38148 */ 462, 462, 462, 462, 1905, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1605, 462, 462, 462,
  /* 38168 */ 1609, 462, 462, 462, 1611, 462, 462, 462, 1614, 462, 462, 462, 1618, 462, 462, 462, 462, 1093, 1094, 462,
  /* 38188 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 2153, 462, 462, 439, 462, 0, 0, 0, 0, 0, 0, 0, 1688, 0, 0, 0,
  /* 38213 */ 0, 388, 388, 388, 388, 1694, 388, 388, 388, 1137, 0, 0, 0, 0, 0, 388, 388, 972, 439, 439, 439, 439, 439,
  /* 38236 */ 439, 1003, 439, 439, 439, 439, 439, 439, 1010, 439, 439, 388, 1697, 388, 388, 388, 388, 388, 388, 388,
  /* 38256 */ 388, 388, 388, 388, 388, 388, 388, 388, 1502, 388, 439, 1707, 439, 439, 439, 439, 439, 1712, 439, 439,
  /* 38276 */ 439, 439, 439, 439, 439, 744, 107538, 972, 747, 462, 462, 462, 462, 462, 439, 439, 439, 1721, 439, 439,
  /* 38296 */ 439, 439, 1724, 1725, 439, 439, 439, 439, 439, 439, 439, 1265, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 38316 */ 1023, 439, 439, 439, 439, 439, 439, 439, 439, 1732, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 38337 */ 439, 439, 439, 439, 1883, 462, 462, 462, 1766, 462, 462, 462, 462, 1769, 1770, 462, 462, 462, 462, 462,
  /* 38357 */ 462, 1361, 462, 462, 462, 462, 462, 462, 462, 462, 462, 2080, 462, 462, 439, 439, 462, 462, 0, 462, 1777,
  /* 38378 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1376, 462, 1378, 462, 462, 462, 462,
  /* 38399 */ 462, 462, 1385, 0, 0, 1804, 0, 1805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1069056, 0, 0, 0, 0, 0, 0, 1840, 0,
  /* 38427 */ 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 1850, 388, 388, 662, 388, 388, 514, 0, 0, 667, 0, 0, 0, 596, 0, 0,
  /* 38453 */ 0, 0, 388, 388, 439, 686, 439, 439, 439, 439, 439, 439, 710, 439, 1863, 439, 1865, 439, 439, 439, 1868,
  /* 38474 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 1547, 439, 439, 439, 1550, 439, 439, 439, 1884, 439, 0, 0, 0,
  /* 38496 */ 0, 462, 462, 462, 462, 462, 462, 1890, 462, 1892, 462, 462, 462, 1895, 462, 462, 462, 462, 462, 462, 462,
  /* 38517 */ 462, 462, 462, 462, 462, 1392, 439, 439, 1395, 439, 462, 462, 1399, 462, 0, 1912, 439, 1914, 462, 0, 0, 0,
  /* 38539 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 942080, 0, 0, 0, 0, 0, 388, 439, 439, 1968, 439, 439, 439, 439, 439, 439, 1973,
  /* 38565 */ 439, 439, 439, 439, 439, 0, 0, 0, 1749, 0, 1321, 0, 0, 0, 1751, 0, 0, 0, 0, 2022, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38593 */ 0, 0, 0, 0, 1613824, 0, 0, 0, 0, 0, 1122304, 1122304, 0, 1114112, 1114112, 1388544, 0, 0, 2038, 388, 388,
  /* 38614 */ 388, 388, 388, 2042, 388, 388, 388, 388, 439, 439, 439, 439, 439, 439, 1559, 0, 0, 0, 1323, 1565, 0, 0, 0,
  /* 38637 */ 462, 2073, 462, 462, 462, 462, 2078, 462, 462, 462, 462, 462, 439, 439, 462, 462, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38661 */ 0, 0, 1923, 0, 0, 0, 2096, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 439, 439, 439, 439, 439, 439, 1723,
  /* 38685 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 742, 439, 439, 0, 462, 462, 462, 439, 2100, 439, 439, 439,
  /* 38706 */ 439, 439, 439, 439, 439, 439, 2108, 439, 439, 439, 462, 462, 462, 462, 1994, 462, 462, 462, 462, 462, 462,
  /* 38727 */ 462, 462, 462, 462, 462, 439, 439, 462, 462, 0, 0, 0, 0, 0, 462, 462, 462, 2112, 462, 462, 462, 462, 462,
  /* 38750 */ 462, 462, 462, 462, 2120, 462, 462, 462, 462, 1600, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1608,
  /* 38770 */ 462, 0, 0, 439, 439, 439, 439, 439, 439, 439, 439, 439, 2232, 462, 462, 462, 462, 1111, 439, 439, 439,
  /* 38791 */ 439, 0, 0, 462, 462, 462, 462, 0, 439, 439, 439, 439, 439, 2252, 2253, 439, 462, 462, 462, 462, 462, 462,
  /* 38813 */ 2258, 2259, 462, 2292, 439, 462, 439, 462, 439, 462, 439, 462, 0, 0, 0, 0, 0, 0, 0, 184648, 184810,
  /* 38834 */ 184810, 184810, 184810, 184810, 184810, 184810, 184810, 0, 49152, 53248, 0, 0, 287, 0, 0, 45056, 0, 0, 0,
  /* 38853 */ 0, 0, 0, 0, 533, 534, 535, 536, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 826, 0, 0, 0, 0, 0, 0,
  /* 38884 */ 1867776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 901, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38916 */ 0, 0, 1133, 0, 0, 0, 0, 0, 0, 439, 439, 439, 439, 984, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 38940 */ 439, 439, 2109, 439, 439, 462, 462, 462, 1056, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 38961 */ 462, 1613, 462, 1615, 462, 462, 462, 462, 462, 462, 462, 1997, 462, 462, 2000, 462, 462, 462, 462, 462, 0,
  /* 38982 */ 0, 0, 1125, 0, 0, 0, 1131, 0, 0, 0, 0, 0, 0, 0, 0, 225628, 0, 0, 0, 0, 0, 0, 0, 0, 1155, 0, 0, 0, 0, 0,
  /* 39012 */ 1161, 0, 0, 0, 0, 0, 0, 0, 0, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 0, 1208, 0,
  /* 39032 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2026, 0, 0, 0, 1148, 388, 388, 388, 388, 388, 388, 388, 388, 388,
  /* 39059 */ 388, 388, 388, 388, 388, 1246, 388, 388, 388, 1234, 388, 388, 388, 388, 388, 388, 388, 388, 1242, 388,
  /* 39079 */ 388, 388, 388, 1138, 0, 0, 1251, 1215, 1218, 388, 388, 972, 439, 439, 439, 439, 439, 439, 1019, 439, 439,
  /* 39100 */ 439, 439, 439, 439, 439, 439, 439, 1007, 439, 439, 439, 439, 439, 439, 439, 439, 1290, 439, 439, 439, 439,
  /* 39121 */ 439, 439, 439, 439, 439, 1300, 439, 439, 439, 439, 439, 439, 1737, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 39142 */ 439, 1267, 439, 439, 439, 439, 439, 439, 1353, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1364, 462,
  /* 39162 */ 462, 462, 462, 462, 769, 462, 462, 462, 462, 786, 788, 462, 462, 798, 462, 439, 439, 1517, 439, 439, 439,
  /* 39183 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1028, 439, 439, 439, 1913, 462, 1915, 0, 0, 0, 0, 0, 0,
  /* 39206 */ 0, 0, 0, 0, 0, 0, 1194, 0, 0, 0, 0, 0, 0, 439, 439, 439, 439, 2103, 439, 439, 439, 439, 439, 439, 439,
  /* 39231 */ 439, 439, 439, 462, 462, 462, 462, 1995, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 2004, 0, 0,
  /* 39252 */ 439, 439, 439, 439, 439, 439, 439, 439, 2231, 439, 462, 462, 462, 462, 1374, 462, 462, 462, 462, 462, 462,
  /* 39273 */ 462, 462, 462, 462, 462, 1782, 462, 462, 462, 462, 462, 462, 462, 462, 462, 2154, 462, 439, 462, 0, 0, 0,
  /* 39295 */ 2160, 462, 462, 462, 462, 2240, 462, 439, 462, 0, 0, 0, 0, 0, 0, 0, 439, 439, 439, 439, 2170, 439, 2172,
  /* 39318 */ 2173, 2174, 439, 2285, 462, 0, 0, 0, 439, 439, 439, 439, 462, 462, 462, 462, 0, 439, 439, 439, 439, 439,
  /* 39340 */ 1293, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1871, 439, 439, 439, 439, 439, 0, 49152, 53248, 0,
  /* 39361 */ 0, 330, 0, 0, 45056, 0, 0, 0, 0, 0, 0, 0, 580, 329, 0, 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 936, 388,
  /* 39388 */ 940, 388, 942, 457, 457, 457, 457, 457, 457, 457, 457, 481, 481, 481, 481, 481, 481, 481, 481, 457, 457,
  /* 39409 */ 481, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 876, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946, 0, 0, 0,
  /* 39438 */ 0, 462, 462, 462, 763, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 2115, 462, 462, 462,
  /* 39459 */ 462, 462, 462, 462, 462, 462, 2079, 462, 462, 462, 462, 439, 439, 462, 462, 0, 462, 1354, 462, 462, 462,
  /* 39480 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 770, 776, 779, 462, 462, 462, 462, 462, 794, 462,
  /* 39501 */ 462, 0, 49152, 53248, 0, 289, 0, 0, 347, 45056, 347, 0, 347, 347, 347, 0, 347, 347, 366, 0, 0, 0, 405, 0,
  /* 39525 */ 405, 405, 405, 405, 405, 405, 0, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
  /* 39546 */ 366, 366, 405, 458, 458, 458, 458, 458, 482, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 482, 482,
  /* 39567 */ 482, 482, 482, 482, 482, 482, 458, 458, 482, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 909, 0, 0, 0,
  /* 39592 */ 0, 0, 0, 0, 0, 0, 0, 0, 916, 917, 0, 0, 0, 0, 0, 0, 1453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1417, 0, 0,
  /* 39624 */ 0, 0, 1421, 1422, 459, 459, 459, 459, 459, 459, 459, 459, 483, 483, 483, 483, 483, 483, 483, 483, 459,
  /* 39645 */ 459, 483, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 921, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1181, 0,
  /* 39673 */ 0, 0, 0, 617, 0, 0, 388, 388, 388, 388, 388, 644, 388, 388, 388, 388, 388, 388, 388, 1235, 388, 388, 388,
  /* 39696 */ 388, 388, 388, 388, 388, 388, 388, 388, 388, 1499, 388, 1501, 388, 462, 462, 462, 764, 462, 462, 462, 462,
  /* 39717 */ 462, 462, 462, 462, 462, 462, 462, 462, 1077, 462, 462, 462, 1081, 462, 462, 462, 462, 462, 462, 1063,
  /* 39737 */ 462, 462, 462, 1067, 462, 462, 462, 462, 462, 872, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 887, 1121, 0,
  /* 39764 */ 0, 0, 1127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1678, 1679, 0, 0, 1682, 0, 0, 0, 1632, 0, 0, 0, 0, 0, 0, 0,
  /* 39794 */ 0, 0, 0, 0, 0, 0, 0, 118784, 0, 0, 0, 0, 583, 388, 388, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 39819 */ 1548, 439, 439, 439, 439, 439, 0, 0, 1172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1809, 0, 0, 1323,
  /* 39845 */ 107538, 0, 1323, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1338, 462, 462, 462, 462, 2009, 462,
  /* 39865 */ 462, 439, 439, 462, 462, 0, 0, 0, 2018, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 2046,
  /* 39888 */ 439, 439, 439, 439, 439, 439, 1982, 1984, 439, 439, 1987, 1988, 462, 462, 462, 1992, 462, 462, 1586, 1587,
  /* 39908 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1078, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 39929 */ 462, 462, 2212, 462, 2214, 439, 462, 0, 0, 0, 0, 0, 336311, 439, 439, 439, 336334, 462, 462, 462, 0, 0, 0,
  /* 39952 */ 0, 0, 0, 0, 0, 1060864, 0, 0, 0, 0, 0, 584, 0, 439, 439, 439, 439, 1747, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39981 */ 1807, 0, 0, 0, 0, 0, 1810, 0, 49152, 53248, 0, 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 357, 0, 0, 0, 388, 388,
  /* 40008 */ 388, 388, 388, 388, 388, 388, 649, 388, 388, 388, 388, 946, 388, 388, 388, 388, 388, 388, 388, 388, 388,
  /* 40029 */ 388, 388, 439, 439, 439, 439, 1861, 439, 0, 925696, 0, 925696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40054 */ 925696, 0, 0, 925696, 0, 925696, 0, 0, 0, 0, 0, 0, 925696, 925696, 0, 0, 0, 0, 0, 0, 0, 925696, 0, 0,
  /* 40078 */ 925696, 925696, 0, 0, 0, 0, 925696, 925696, 0, 0, 925696, 925696, 0, 0, 0, 0, 929, 0, 0, 388, 388, 388,
  /* 40100 */ 388, 388, 388, 388, 388, 388, 388, 1497, 388, 388, 1500, 388, 388, 0, 0, 925696, 0, 0, 925696, 0, 0, 0,
  /* 40122 */ 925696, 0, 0, 0, 925696, 0, 0, 925696, 0, 0, 925696, 925696, 0, 0, 0, 0, 0, 0, 0, 925696, 0, 925696, 0,
  /* 40145 */ 925696, 0, 0, 0, 0, 926032, 926032, 0, 925696, 0, 0, 0, 926032, 0, 0, 0, 0, 0, 0, 0, 591, 0, 0, 0, 0, 0,
  /* 40171 */ 531, 0, 0, 0, 925696, 925696, 925696, 0, 0, 0, 2, 2166784, 3, 94212, 5, 6, 0, 0, 0, 0, 1199, 0, 0, 0, 0,
  /* 40196 */ 0, 0, 0, 0, 0, 0, 0, 1833, 0, 0, 0, 0, 0, 0, 0, 311296, 0, 0, 1060864, 248, 249, 0, 0, 0, 0, 0, 0, 0, 618,
  /* 40225 */ 0, 623, 0, 626, 0, 0, 0, 0, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 40241 */ 1114112, 1114112, 1114112, 1114856, 0, 1114112, 1114859, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 40253 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1507328, 1114112, 1114112, 1114112,
  /* 40264 */ 1114112, 1540096, 1114112, 1114112, 1114112, 1114112, 1572864, 1114112, 1114112, 1114112, 1114112,
  /* 40275 */ 1114112, 1114112, 1114112, 1114112, 1114112, 0, 0, 1114112, 1114112, 1114112, 1114112, 0, 2166784, 6, 0,
  /* 40290 */ 0, 0, 0, 0, 0, 0, 1388544, 0, 0, 1417216, 0, 0, 0, 0, 1212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110592, 0, 0,
  /* 40319 */ 0, 0, 0, 0, 0, 0, 934272, 934272, 934272, 0, 934272, 0, 0, 0, 0, 0, 0, 934272, 934272, 934272, 0, 0, 2, 2,
  /* 40343 */ 3, 94212, 5, 6, 0, 0, 0, 934272, 934272, 934272, 934272, 934272, 934272, 934272, 934272, 934272, 934272,
  /* 40360 */ 934272, 934272, 934272, 934272, 934272, 934272, 0, 0, 0, 0, 0, 0, 0, 0, 1060864, 0, 0, 0, 0, 36864, 0, 0,
  /* 40382 */ 0, 337, 337, 942419, 0, 0, 0, 0, 337, 0, 0, 0, 0, 0, 0, 0, 851, 0, 0, 0, 0, 0, 0, 0, 0, 925696, 292, 0, 0,
  /* 40411 */ 925696, 0, 925696, 0, 0, 0, 942419, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 942419, 942419, 942419, 942419,
  /* 40434 */ 942419, 942419, 942419, 942419, 942419, 942419, 942419, 942419, 942419, 942419, 942419, 942419, 0, 0, 0,
  /* 40449 */ 0, 0, 0, 0, 0, 1061444, 0, 0, 0, 0, 0, 0, 0, 339, 0, 942419, 942419, 942419, 0, 0, 2, 2, 3, 94212, 5, 6,
  /* 40475 */ 0, 0, 0, 0, 1413, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1163, 0, 0, 0, 0, 0, 0, 950272, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40507 */ 0, 0, 0, 0, 0, 0, 0, 937984, 0, 0, 0, 110592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1832, 0, 0, 1834, 0, 0,
  /* 40537 */ 0, 0, 0, 110592, 110592, 110592, 110592, 0, 110592, 0, 0, 0, 0, 0, 0, 110592, 110592, 110592, 0, 0, 0, 0,
  /* 40559 */ 0, 0, 0, 0, 0, 0, 0, 1846, 388, 388, 388, 388, 388, 388, 110592, 110592, 110592, 110592, 110592, 110592,
  /* 40579 */ 110592, 110592, 110592, 110592, 110592, 110592, 110592, 110592, 110592, 110592, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40597 */ 1380352, 0, 1507328, 0, 0, 0, 0, 1691648
];

ExistParser.EXPECTED =
[
  /*    0 */ 575, 580, 578, 581, 585, 589, 593, 597, 792, 604, 609, 1825, 616, 816, 713, 626, 792, 630, 635, 1025, 668,
  /*   21 */ 973, 700, 642, 720, 648, 792, 793, 662, 667, 672, 700, 1031, 720, 644, 678, 792, 688, 695, 699, 700, 704,
  /*   42 */ 720, 738, 792, 792, 1161, 710, 674, 719, 706, 792, 911, 1028, 975, 720, 724, 926, 729, 715, 792, 733, 1037,
  /*   63 */ 799, 736, 742, 753, 746, 1034, 750, 757, 761, 765, 769, 775, 771, 779, 783, 787, 1540, 1791, 791, 1838,
  /*   83 */ 877, 792, 792, 792, 797, 792, 792, 924, 792, 792, 792, 792, 792, 792, 803, 792, 792, 809, 792, 792, 792,
  /*  104 */ 792, 792, 792, 792, 792, 814, 792, 792, 792, 792, 792, 792, 792, 1301, 792, 792, 792, 792, 792, 792, 820,
  /*  125 */ 792, 792, 792, 792, 825, 792, 792, 1301, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 631, 830, 792,
  /*  146 */ 1319, 879, 834, 838, 842, 846, 792, 858, 862, 866, 966, 982, 870, 874, 1556, 1049, 883, 887, 1848, 893,
  /*  166 */ 826, 899, 1723, 1537, 792, 905, 600, 663, 1004, 792, 1003, 792, 1780, 910, 1048, 895, 1893, 1391, 792, 915,
  /*  186 */ 792, 921, 792, 930, 889, 792, 1818, 792, 1782, 725, 1380, 934, 1316, 605, 1048, 940, 949, 1782, 944, 948,
  /*  206 */ 917, 953, 963, 970, 979, 988, 992, 996, 1000, 792, 1358, 792, 1410, 1008, 1012, 1016, 1019, 1752, 906,
  /*  225 */ 1816, 1041, 1045, 1053, 1057, 1061, 1359, 1386, 1066, 1070, 1749, 1190, 1077, 792, 1083, 792, 1089, 1096,
  /*  243 */ 1179, 1100, 1243, 1259, 792, 1258, 792, 1357, 1104, 1543, 1108, 1289, 1112, 792, 1118, 792, 1377, 1125,
  /*  261 */ 1129, 1225, 1133, 1827, 1133, 1407, 1139, 1143, 1147, 1152, 1073, 1165, 1172, 619, 1746, 1176, 1183, 1759,
  /*  279 */ 1187, 1194, 1198, 1202, 1206, 1210, 1214, 1218, 792, 1134, 1580, 1222, 1229, 1233, 1237, 1241, 1694, 612,
  /*  297 */ 1247, 1251, 1255, 1263, 1267, 1271, 1135, 1022, 1278, 1283, 1770, 1287, 1296, 792, 1293, 849, 1155, 1305,
  /*  315 */ 1279, 1309, 1313, 638, 792, 637, 1323, 1328, 1333, 1337, 1344, 792, 1341, 792, 622, 1463, 1435, 1348, 1352,
  /*  334 */ 1148, 1356, 1148, 1363, 1367, 1371, 1384, 1390, 651, 1417, 1397, 1401, 1503, 1414, 1421, 1425, 1429, 1433,
  /*  352 */ 1404, 658, 1329, 1527, 1562, 1563, 1374, 792, 935, 1439, 1443, 1450, 1454, 1458, 1462, 984, 1168, 1467,
  /*  370 */ 1471, 1475, 1479, 1486, 1490, 936, 1593, 1496, 1114, 1586, 1501, 1684, 792, 654, 956, 1507, 1514, 1497,
  /*  388 */ 810, 852, 901, 657, 900, 1518, 1647, 1522, 1596, 821, 1526, 1531, 792, 1092, 1603, 1574, 1547, 1551, 1555,
  /*  407 */ 1560, 792, 1567, 1482, 1571, 1578, 1584, 1709, 1802, 1590, 1600, 1675, 1607, 1510, 1611, 1618, 1773, 1614,
  /*  425 */ 1622, 1626, 1630, 1634, 1638, 1642, 792, 804, 1646, 1651, 1655, 1659, 1663, 1667, 1668, 1809, 1672, 1678,
  /*  443 */ 1534, 1682, 1688, 1692, 805, 1446, 1698, 1158, 1854, 1702, 1085, 1722, 1393, 1707, 1863, 1713, 1717, 1703,
  /*  461 */ 792, 1392, 1721, 792, 1727, 792, 1731, 1735, 1739, 792, 854, 1391, 1324, 1743, 1121, 1756, 1763, 792, 1767,
  /*  480 */ 792, 1777, 1786, 1790, 1795, 1800, 1492, 1274, 1806, 1832, 1813, 1822, 1831, 1079, 1836, 1842, 1796, 1846,
  /*  498 */ 1852, 1861, 1858, 792, 792, 792, 1062, 1867, 1871, 1875, 1879, 1883, 792, 792, 792, 1887, 1562, 792, 792,
  /*  517 */ 792, 792, 792, 792, 958, 792, 792, 792, 792, 792, 792, 792, 792, 792, 959, 792, 792, 792, 792, 792, 792,
  /*  538 */ 792, 792, 690, 792, 792, 792, 792, 792, 792, 792, 680, 792, 792, 792, 792, 792, 792, 691, 792, 792, 792,
  /*  559 */ 792, 1891, 792, 792, 684, 792, 792, 1299, 792, 682, 792, 792, 792, 792, 792, 1827, 1951, 3362, 3067, 1909,
  /*  579 */ 1897, 1909, 1909, 1909, 1909, 1901, 1909, 1908, 1913, 1917, 1904, 1921, 1925, 1929, 1933, 1937, 1941, 1945,
  /*  597 */ 1948, 1962, 1973, 2050, 3140, 2518, 2402, 3459, 2448, 2448, 2448, 2382, 2055, 1977, 3330, 2448, 1965, 2694,
  /*  615 */ 3282, 3725, 2609, 1981, 2448, 1965, 2804, 2448, 1965, 3071, 3035, 2045, 1988, 1997, 2050, 3461, 2448, 2448,
  /*  633 */ 2448, 2384, 3243, 2007, 2448, 2448, 1965, 3032, 3040, 2104, 2019, 2021, 2021, 2043, 2358, 2044, 2026, 2186,
  /*  651 */ 2448, 1965, 3109, 2448, 1965, 3300, 3305, 2448, 2448, 2448, 3338, 2034, 2448, 2448, 2448, 2409, 3725, 2609,
  /*  669 */ 2609, 2609, 2014, 1982, 2060, 2062, 2062, 2105, 2071, 2186, 2049, 2448, 2448, 1966, 2448, 2448, 2448, 1967,
  /*  687 */ 2448, 2448, 3774, 2448, 2448, 1968, 2448, 2448, 3724, 2609, 2609, 2609, 2059, 2062, 2062, 2062, 2062, 2063,
  /*  705 */ 2067, 2021, 2021, 2044, 2075, 2061, 2062, 2062, 2062, 2147, 2021, 2021, 2043, 2090, 2020, 2021, 2021, 2021,
  /*  723 */ 2021, 2134, 2448, 2448, 2448, 2447, 2061, 2062, 2062, 2127, 3725, 2081, 2062, 2062, 2356, 2021, 2021, 2127,
  /*  741 */ 2165, 2096, 2448, 2103, 2126, 2021, 2109, 3768, 2356, 2022, 3767, 2062, 2021, 2109, 2983, 2062, 2117, 2357,
  /*  759 */ 2123, 2127, 2131, 2144, 2141, 2110, 2151, 2861, 2159, 2163, 2186, 2186, 2186, 2186, 2177, 2175, 2003, 2172,
  /*  777 */ 2181, 2185, 2000, 2190, 2194, 2198, 2202, 2206, 2210, 2214, 2218, 2222, 2226, 2230, 2373, 2448, 2448, 2448,
  /*  795 */ 2448, 2030, 2240, 2246, 2448, 2448, 2352, 2081, 2254, 2448, 2448, 2448, 2450, 3643, 2343, 2448, 2448, 2448,
  /*  813 */ 2494, 2448, 3706, 2448, 2448, 2353, 2062, 2968, 2448, 2448, 2448, 2495, 3707, 2448, 2448, 2448, 2518, 2260,
  /*  831 */ 2448, 2810, 2267, 2709, 2287, 2291, 2295, 2298, 2302, 2304, 2308, 2310, 2314, 2318, 2322, 2328, 2448, 2332,
  /*  849 */ 2448, 2051, 2052, 2448, 2052, 2448, 2448, 3079, 3661, 3752, 2448, 2242, 2683, 2999, 2448, 2335, 3240, 2601,
  /*  867 */ 2427, 2448, 2341, 2370, 2448, 2750, 3481, 2009, 2379, 2267, 2448, 2234, 2448, 2448, 2263, 2695, 3270, 2050,
  /*  885 */ 2388, 3142, 2448, 3694, 2383, 2448, 2519, 2454, 2397, 2383, 2448, 2448, 2426, 2858, 2398, 2448, 2448, 2448,
  /*  903 */ 2556, 3356, 3331, 2448, 2448, 2448, 2564, 2419, 2448, 2448, 2448, 2608, 2520, 2432, 2448, 2448, 2491, 2448,
  /*  921 */ 2744, 1983, 2440, 2448, 2256, 2448, 2448, 2352, 2609, 2447, 2448, 2036, 2958, 3634, 2448, 2448, 2448, 2660,
  /*  939 */ 2664, 2952, 2463, 3042, 3635, 3754, 2448, 2037, 3635, 2480, 2448, 2448, 2473, 2448, 2669, 3606, 2502, 2448,
  /*  957 */ 2274, 2448, 2448, 2965, 2448, 2448, 2501, 2448, 2967, 2448, 2347, 2351, 2362, 3143, 2448, 3145, 2448, 2354,
  /*  975 */ 2062, 2062, 2084, 2021, 3708, 3145, 3144, 2448, 2370, 2448, 2448, 2375, 3208, 3708, 3722, 3721, 2967, 3143,
  /*  993 */ 2448, 3146, 3706, 3721, 3144, 2448, 3721, 3722, 3145, 3146, 2448, 2415, 2383, 2448, 2448, 2111, 2525, 2529,
  /* 1011 */ 3741, 3421, 2535, 2539, 2542, 2560, 2545, 2548, 2551, 2551, 2554, 2448, 2443, 3555, 2448, 2448, 3723, 2609,
  /* 1029 */ 2355, 2062, 2062, 2104, 2041, 2021, 2096, 2125, 2127, 2021, 2021, 2088, 2572, 2588, 2077, 2600, 2119, 3233,
  /* 1047 */ 3085, 2448, 2448, 3753, 2448, 2448, 3295, 2605, 2092, 1993, 2613, 2617, 2448, 1984, 2617, 2448, 2448, 2448,
  /* 1065 */ 2673, 2015, 2624, 2448, 2630, 2637, 3332, 2644, 2448, 2448, 3779, 2765, 2365, 3377, 2448, 2448, 2578, 2582,
  /* 1083 */ 2366, 3378, 2448, 2448, 2619, 3612, 2448, 3780, 2677, 2448, 2448, 3834, 3345, 2448, 3737, 2448, 2098, 2167,
  /* 1101 */ 2682, 2449, 2687, 2706, 2448, 2448, 3351, 2638, 2575, 2448, 2717, 2722, 2727, 2448, 2448, 2633, 2448, 3077,
  /* 1119 */ 2721, 2726, 2448, 2449, 3671, 3216, 2448, 3739, 2009, 2693, 2945, 3753, 3216, 2250, 2742, 2448, 2448, 2448,
  /* 1137 */ 2865, 2448, 3738, 2009, 2693, 2137, 2575, 2393, 3101, 3247, 2754, 2448, 2448, 2448, 3077, 2448, 3822, 2758,
  /* 1155 */ 2448, 2518, 2867, 2448, 2518, 3833, 2448, 2609, 2609, 2609, 3738, 2009, 2774, 2448, 2626, 3386, 3311, 3312,
  /* 1173 */ 2780, 3248, 2786, 2775, 3754, 2167, 2694, 2448, 3594, 2946, 2792, 2448, 2977, 2808, 2168, 2782, 2815, 2448,
  /* 1191 */ 2652, 2657, 2668, 2814, 2448, 3546, 2155, 2819, 2978, 2821, 3230, 2833, 2837, 2836, 3230, 2827, 3341, 2821,
  /* 1209 */ 2831, 2835, 2834, 3119, 2842, 2837, 2821, 2846, 2596, 2712, 2713, 2855, 3527, 2530, 2877, 3427, 2448, 2692,
  /* 1227 */ 1965, 2738, 2884, 2890, 2894, 2902, 2905, 2909, 2913, 2919, 2917, 2923, 2927, 2930, 2927, 2934, 2448, 2448,
  /* 1245 */ 2691, 2448, 2015, 3762, 2448, 2770, 3708, 3114, 2448, 2653, 2950, 2956, 3819, 2448, 2801, 3825, 2699, 2448,
  /* 1263 */ 2640, 2962, 2972, 2976, 3435, 2982, 2448, 3435, 2982, 2052, 2671, 2448, 2823, 3215, 3698, 2987, 2448, 3306,
  /* 1281 */ 3119, 3130, 3130, 2448, 2991, 2497, 1958, 3003, 2448, 2448, 2694, 3166, 3520, 3008, 3013, 2448, 3007, 3012,
  /* 1299 */ 2448, 2966, 2448, 2448, 3708, 2448, 3552, 3281, 2448, 3761, 2702, 2956, 2448, 3017, 2998, 3569, 3027, 2448,
  /* 1317 */ 3043, 2383, 2448, 2273, 2278, 2282, 3040, 2448, 2448, 2448, 3078, 3412, 2448, 2448, 2448, 3121, 3047, 2448,
  /* 1335 */ 2442, 3555, 2448, 3720, 2770, 3127, 3608, 3072, 3036, 2448, 3058, 2448, 3064, 3554, 3076, 1956, 3083, 3129,
  /* 1353 */ 2767, 2448, 3089, 3096, 2448, 2448, 2448, 3131, 2506, 2448, 3096, 2448, 2448, 2670, 2054, 2838, 2448, 3553,
  /* 1371 */ 3100, 1956, 3127, 2448, 3121, 3120, 2448, 3131, 2731, 2448, 2459, 3635, 3217, 2769, 1991, 2448, 2448, 2761,
  /* 1389 */ 2448, 3105, 2433, 2448, 2448, 2448, 2620, 3613, 3100, 2448, 3113, 2767, 2567, 2448, 3539, 3118, 2448, 3575,
  /* 1407 */ 2448, 3132, 2748, 2448, 2510, 2513, 2517, 2672, 3273, 3125, 2448, 3164, 3271, 1967, 3114, 2568, 2639, 1965,
  /* 1425 */ 2898, 2448, 3539, 3118, 3136, 2411, 3574, 2324, 3246, 2531, 2448, 2448, 2849, 2448, 2664, 2448, 2436, 3151,
  /* 1443 */ 3213, 2113, 3157, 2434, 2448, 3579, 3747, 3161, 3170, 3173, 3177, 3181, 3185, 3189, 3190, 3191, 3195, 3197,
  /* 1461 */ 3201, 3204, 2448, 2448, 2448, 3138, 3318, 3740, 2448, 3147, 2788, 3680, 2448, 2632, 3211, 2448, 3221, 3227,
  /* 1479 */ 2584, 3680, 3237, 2448, 3366, 2625, 3060, 3252, 2448, 2448, 3252, 2283, 3256, 2448, 2448, 2851, 3717, 3414,
  /* 1497 */ 2448, 2448, 2236, 2448, 3286, 3292, 2448, 2448, 2897, 2669, 2448, 3731, 3208, 2448, 3400, 2448, 3687, 3385,
  /* 1515 */ 3310, 3317, 3322, 3356, 3305, 2448, 2776, 2662, 2448, 3328, 3260, 2051, 2448, 2448, 2448, 3340, 2448, 3835,
  /* 1533 */ 3346, 2448, 3463, 3550, 2448, 3469, 2383, 2448, 2248, 3603, 2448, 2015, 2624, 2943, 3396, 3271, 3403, 2428,
  /* 1551 */ 2749, 2448, 2448, 2496, 2053, 2448, 2448, 2448, 3453, 3355, 3371, 2448, 2448, 3120, 2448, 3338, 3355, 3371,
  /* 1569 */ 2448, 3360, 3271, 3403, 2591, 2448, 3475, 2663, 2626, 3028, 2671, 2448, 2448, 3272, 2965, 2795, 3370, 2448,
  /* 1587 */ 2448, 3278, 2269, 2421, 3404, 3390, 3391, 2112, 3260, 2411, 3336, 2448, 2591, 2053, 2448, 2937, 3350, 2448,
  /* 1605 */ 2136, 2008, 3673, 3395, 2422, 3405, 2433, 2448, 2879, 2383, 3418, 3679, 3023, 3736, 3409, 2594, 3681, 3054,
  /* 1623 */ 3425, 3431, 2869, 2868, 2872, 2483, 3022, 3021, 3425, 3433, 2871, 2870, 3271, 3700, 2873, 3425, 2486, 2487,
  /* 1641 */ 3439, 3440, 3444, 3448, 3450, 3643, 2448, 2448, 2448, 3474, 2435, 3457, 3467, 3473, 2476, 3479, 3485, 3489,
  /* 1659 */ 3493, 3496, 3500, 3504, 3508, 3510, 3515, 3511, 3519, 2448, 2448, 2448, 3524, 3534, 1983, 3153, 2448, 3539,
  /* 1677 */ 2798, 2448, 3538, 2448, 3543, 3530, 3559, 2448, 2448, 3299, 3304, 3563, 2448, 2448, 3563, 3567, 3573, 2448,
  /* 1695 */ 2448, 3313, 2941, 3585, 3791, 2448, 3462, 3600, 2448, 2448, 2448, 3627, 2404, 2405, 2448, 2448, 3375, 3350,
  /* 1713 */ 3287, 3678, 3267, 3053, 3791, 2448, 2391, 3831, 3631, 3617, 2448, 2448, 2448, 3656, 2620, 3631, 2455, 1956,
  /* 1731 */ 3641, 3646, 2448, 3579, 3050, 3791, 2448, 2323, 2054, 2448, 3119, 3650, 3660, 3665, 2099, 2448, 3545, 3351,
  /* 1749 */ 2448, 2648, 3020, 2448, 2448, 3781, 2678, 3677, 2466, 3793, 2448, 3636, 3232, 2154, 3832, 2448, 3324, 3685,
  /* 1767 */ 3223, 3661, 2383, 2448, 3637, 2995, 2448, 2880, 2448, 2879, 3223, 3661, 1954, 2448, 3653, 2448, 2822, 1964,
  /* 1785 */ 2448, 2448, 3691, 3215, 3698, 2469, 2448, 2448, 2448, 3709, 3704, 2448, 2448, 2448, 3766, 3119, 3713, 2448,
  /* 1803 */ 2448, 3382, 3060, 3729, 2448, 2448, 3645, 3215, 3288, 3679, 2448, 3753, 2580, 2448, 3667, 2448, 2448, 2519,
  /* 1821 */ 2454, 3735, 3745, 3730, 2448, 3680, 2448, 2448, 1965, 2738, 3331, 2448, 2448, 2734, 2448, 3452, 2448, 2448,
  /* 1839 */ 2448, 3581, 2448, 2448, 3751, 2448, 3758, 2886, 2448, 2448, 2448, 3587, 2448, 3794, 2448, 2448, 2448, 3591,
  /* 1857 */ 2448, 3772, 2448, 2448, 2010, 2448, 2448, 2448, 3623, 3214, 3263, 3212, 2336, 3212, 3778, 3785, 3789, 3265,
  /* 1875 */ 3092, 3798, 3274, 3802, 3805, 3812, 3808, 3816, 2337, 2448, 3619, 3829, 3596, 3269, 2448, 2965, 1969, 2448,
  /* 1893 */ 2448, 2448, 3680, 2521, 4143, 3865, 3840, 3841, 3865, 3862, 3850, 3850, 3867, 3874, 3873, 3849, 3850, 3850,
  /* 1911 */ 3850, 3850, 4152, 3861, 3850, 3850, 3864, 3850, 3850, 3850, 3877, 3879, 3879, 3868, 3869, 3869, 3869, 3870,
  /* 1929 */ 3874, 3871, 3874, 3874, 3875, 3874, 3874, 3881, 4505, 3883, 3887, 3884, 3889, 3884, 3884, 3885, 3891, 3892,
  /* 1947 */ 3891, 3891, 3894, 3896, 4622, 4050, 4061, 4063, 3927, 4064, 3928, 4064, 4064, 4205, 4419, 4122, 4223, 4062,
  /* 1965 */ 4064, 4064, 4064, 4065, 4064, 4064, 4064, 4066, 4141, 4064, 3851, 3910, 3907, 4064, 3927, 3926, 4024, 4024,
  /* 1983 */ 4114, 4064, 4064, 4064, 3898, 3852, 4503, 4503, 4020, 4426, 4064, 4064, 4237, 4064, 4538, 4064, 3856, 3911,
  /* 2001 */ 3912, 4146, 3911, 3961, 3911, 4370, 4597, 3903, 4064, 4064, 4064, 3927, 3928, 4024, 4064, 4064, 4064, 3928,
  /* 2019 */ 4247, 3943, 4503, 4503, 4503, 4503, 3939, 4026, 4502, 4503, 3944, 4064, 4368, 4064, 4595, 4597, 4597, 4064,
  /* 2037 */ 4064, 3851, 4386, 4151, 4585, 3942, 4503, 4503, 4503, 4504, 4252, 4026, 3911, 4147, 4064, 4064, 4064, 3851,
  /* 2055 */ 4064, 4064, 4064, 3852, 4024, 4113, 4025, 4252, 4252, 4252, 4252, 3958, 3958, 3941, 3942, 3943, 3958, 3941,
  /* 2073 */ 3942, 3942, 4503, 4248, 4064, 4064, 3897, 4214, 4024, 4024, 4025, 4252, 4253, 3941, 3943, 4503, 4504, 3939,
  /* 2091 */ 4248, 4064, 4064, 3911, 4354, 4504, 4248, 4064, 4064, 3927, 4064, 4064, 4113, 4252, 4252, 4252, 4253, 3958,
  /* 2109 */ 4503, 3939, 4064, 4064, 4064, 3931, 4064, 4285, 4504, 4248, 4064, 4617, 4216, 4064, 4503, 4248, 4064, 4252,
  /* 2127 */ 4252, 4252, 4503, 4503, 4503, 4064, 4617, 4252, 4503, 4064, 4064, 3903, 4064, 4064, 4503, 3939, 3939, 3939,
  /* 2145 */ 4503, 4248, 4252, 4505, 4247, 3935, 4391, 4629, 4064, 4628, 3908, 4064, 4064, 4117, 3912, 4371, 3947, 3951,
  /* 2163 */ 3953, 3956, 3911, 3911, 4064, 4064, 3897, 4064, 3897, 3994, 3913, 3915, 4258, 3966, 3911, 3911, 4370, 3913,
  /* 2181 */ 3963, 3948, 3949, 3965, 3969, 3911, 3911, 3911, 3911, 3971, 4147, 4257, 3914, 3911, 3973, 3975, 3975, 3954,
  /* 2199 */ 3948, 3977, 3978, 3857, 3967, 4280, 3980, 3858, 3859, 3859, 3982, 3984, 3987, 3991, 3989, 3990, 3985, 3986,
  /* 2217 */ 3989, 3990, 4064, 3856, 4071, 3993, 3937, 3996, 3998, 4000, 4002, 4005, 4004, 4005, 4005, 4007, 4009, 4617,
  /* 2235 */ 4421, 4064, 4064, 3945, 4064, 4474, 4020, 4064, 4064, 4014, 4064, 4029, 4064, 4392, 4064, 4064, 3856, 4519,
  /* 2253 */ 4282, 4064, 4238, 4064, 4064, 4033, 4064, 4064, 4285, 4393, 4064, 3846, 4013, 4294, 4055, 4629, 4064, 4064,
  /* 2271 */ 4034, 4064, 4069, 3908, 4064, 4064, 3908, 3846, 4144, 3845, 4054, 4614, 4064, 4064, 4064, 4015, 4144, 4271,
  /* 2289 */ 4064, 4212, 4624, 4292, 4625, 4076, 4077, 4080, 4079, 4079, 4082, 4083, 4085, 4087, 4088, 4089, 4089, 4089,
  /* 2307 */ 4089, 4089, 4090, 4092, 4092, 4092, 4093, 4094, 4095, 4097, 4097, 4098, 4097, 4097, 4100, 4102, 4064, 4064,
  /* 2325 */ 4064, 4018, 4064, 4064, 4285, 3928, 4491, 4208, 4246, 4283, 4063, 4147, 4064, 4064, 4067, 4068, 4127, 4140,
  /* 2343 */ 4064, 4064, 4061, 4064, 4567, 4064, 4568, 4155, 4134, 4064, 4064, 4064, 4024, 4252, 4252, 4252, 3939, 4503,
  /* 2361 */ 3936, 4064, 4139, 4150, 4064, 3899, 4400, 4105, 4061, 4064, 4510, 4107, 4064, 3916, 4064, 4064, 3927, 4593,
  /* 2379 */ 3932, 4064, 4141, 4378, 4063, 4064, 4064, 4064, 4036, 4151, 4219, 4154, 4064, 3917, 4064, 4064, 4519, 4056,
  /* 2397 */ 4115, 4157, 4486, 4482, 4063, 4619, 4363, 4063, 4064, 4627, 4064, 4064, 4064, 4481, 4064, 4064, 4063, 4064,
  /* 2415 */ 4204, 4619, 4486, 4482, 4379, 4629, 4064, 4064, 4063, 4151, 4051, 3851, 4568, 4064, 4064, 4064, 4023, 4338,
  /* 2433 */ 4422, 4064, 4064, 4064, 4056, 4064, 4064, 4378, 4629, 4064, 4064, 4065, 4284, 4064, 3897, 4064, 4064, 4064,
  /* 2451 */ 4064, 3856, 4044, 4486, 4276, 4063, 4064, 3928, 3851, 4386, 4064, 4059, 4064, 4174, 4063, 4064, 3920, 4413,
  /* 2469 */ 4064, 3920, 4413, 4289, 4173, 4199, 4063, 4064, 3923, 4110, 4347, 4172, 4620, 4175, 4064, 3924, 4064, 4623,
  /* 2487 */ 4064, 4161, 4112, 4103, 4064, 4245, 4063, 4064, 3931, 4514, 4386, 4064, 4064, 4607, 4064, 4617, 4620, 4063,
  /* 2505 */ 4064, 4489, 4592, 4142, 4161, 4064, 4608, 4222, 4064, 3932, 4165, 4223, 4487, 4064, 4064, 4064, 4115, 4173,
  /* 2523 */ 4486, 4338, 3928, 4064, 4141, 4616, 4609, 4284, 4064, 4064, 4064, 4119, 4177, 4179, 4031, 4180, 4182, 4184,
  /* 2541 */ 4187, 4186, 4186, 4189, 4190, 4190, 4190, 4190, 4191, 4190, 4196, 4196, 4196, 4196, 4197, 4064, 4064, 4065,
  /* 2559 */ 4518, 4190, 4193, 4194, 4190, 4608, 4222, 4046, 4064, 4020, 4019, 4064, 4020, 4064, 4291, 4063, 4064, 4020,
  /* 2577 */ 4337, 4064, 4020, 4588, 4239, 3928, 3928, 4064, 4064, 4540, 4064, 4064, 4147, 4030, 4064, 4023, 3846, 4064,
  /* 2595 */ 4023, 4064, 4064, 4308, 4064, 4508, 4064, 4064, 4064, 4121, 4064, 4226, 4232, 4064, 4024, 4024, 4024, 4024,
  /* 2613 */ 4064, 4509, 4064, 3898, 4242, 4244, 4064, 4064, 4065, 4605, 4592, 4064, 4284, 4064, 4064, 4386, 4064, 4290,
  /* 2631 */ 4072, 4064, 4064, 4067, 4392, 4064, 3856, 3908, 4019, 4064, 4064, 4064, 4124, 4509, 4064, 4260, 4056, 4064,
  /* 2649 */ 4214, 4264, 4161, 4266, 4064, 4064, 4064, 4145, 4420, 4064, 4269, 4064, 4037, 4594, 4246, 4615, 4284, 4064,
  /* 2667 */ 4064, 4509, 4064, 4064, 4064, 4151, 4064, 4064, 4064, 4068, 4207, 4143, 4239, 4064, 4064, 4274, 4064, 4064,
  /* 2685 */ 4064, 4171, 4519, 4264, 4161, 4380, 3847, 4064, 4064, 4628, 4064, 4064, 4064, 4170, 4055, 4411, 4063, 4064,
  /* 2703 */ 4064, 4610, 4410, 4489, 4592, 4142, 4144, 4144, 4063, 3908, 4064, 4115, 4112, 4064, 3856, 4519, 4143, 4056,
  /* 2721 */ 4498, 4592, 4039, 4142, 4167, 4167, 4275, 4412, 4064, 4064, 4489, 4592, 4588, 4064, 4064, 4611, 4161, 4498,
  /* 2739 */ 4592, 4039, 4166, 4055, 4411, 4064, 4064, 4114, 4064, 4592, 3846, 4064, 4064, 4064, 4217, 4592, 4039, 4612,
  /* 2757 */ 4515, 4040, 4613, 4412, 4064, 4064, 4616, 4045, 4490, 3846, 4064, 4064, 4118, 4064, 4064, 4064, 4285, 4064,
  /* 2775 */ 4284, 4064, 3908, 4064, 3908, 3897, 4064, 4628, 4064, 4064, 4249, 4040, 4469, 4064, 4064, 4135, 4064, 4250,
  /* 2793 */ 4485, 4412, 4064, 4065, 4251, 4042, 4129, 4131, 4064, 4065, 4279, 4591, 4039, 4612, 4412, 4484, 4469, 4064,
  /* 2811 */ 4064, 4141, 4378, 4249, 4210, 4469, 4064, 4064, 4249, 4210, 4306, 4064, 4064, 4064, 4222, 3897, 3903, 4064,
  /* 2829 */ 4303, 4306, 4064, 4489, 3908, 4064, 4115, 4049, 4112, 4064, 4064, 4115, 4422, 3921, 3903, 4064, 4305, 4288,
  /* 2847 */ 3903, 4064, 4308, 4063, 4064, 4064, 4202, 4611, 3903, 4115, 4112, 4115, 4059, 4338, 4063, 4287, 3911, 4070,
  /* 2865 */ 4064, 4203, 4343, 4422, 4064, 4064, 4065, 4161, 4422, 4064, 4064, 4536, 3932, 3932, 4064, 4065, 4042, 4276,
  /* 2883 */ 4063, 4624, 3928, 4064, 4064, 4141, 4590, 3931, 4064, 4310, 4123, 4064, 4313, 4198, 4065, 4118, 4063, 4064,
  /* 2901 */ 4064, 4066, 4064, 4065, 4267, 4073, 4074, 4316, 4074, 4318, 4320, 4331, 4330, 4330, 4330, 4322, 4324, 4324,
  /* 2919 */ 4324, 4324, 4325, 4326, 4324, 4324, 4327, 4329, 4333, 4333, 4333, 4333, 4334, 4340, 4335, 4334, 4333, 4336,
  /* 2937 */ 4064, 4065, 4520, 4128, 4344, 4063, 4064, 4064, 4147, 4064, 3908, 4019, 4064, 4346, 4175, 4064, 4064, 4151,
  /* 2955 */ 4385, 4064, 4607, 4064, 4064, 4159, 4162, 4350, 4419, 4569, 4064, 4066, 4064, 4064, 4064, 4245, 4064, 4064,
  /* 2973 */ 4353, 4064, 4132, 4299, 4064, 4064, 4064, 4249, 4210, 4360, 4064, 4064, 4064, 4252, 3927, 4064, 4617, 4198,
  /* 2991 */ 4067, 3957, 4048, 4382, 4416, 4211, 4055, 4419, 4064, 4064, 4064, 4270, 4501, 4064, 4384, 4272, 4395, 4279,
  /* 3009 */ 3959, 4438, 4587, 4587, 4402, 4055, 4404, 4064, 4064, 4415, 4021, 4379, 4063, 4064, 4064, 4536, 4542, 4063,
  /* 3027 */ 4298, 4064, 4064, 4064, 4275, 4415, 4297, 4022, 4588, 4430, 4063, 4064, 4064, 4379, 4404, 4064, 4064, 4172,
  /* 3045 */ 4620, 4162, 4115, 4525, 4063, 4064, 4067, 3921, 4586, 4064, 4064, 4064, 4536, 4610, 4019, 4064, 4064, 4201,
  /* 3063 */ 4621, 4285, 4610, 4399, 4284, 3839, 3844, 3841, 4415, 4499, 4118, 4618, 4588, 4392, 4064, 4064, 4064, 4278,
  /* 3081 */ 4369, 4592, 4064, 4285, 4064, 4064, 4226, 4228, 4064, 4424, 4426, 4064, 4067, 4064, 3929, 4499, 4118, 4429,
  /* 3099 */ 4422, 4408, 4064, 4064, 4064, 4284, 4064, 4296, 4116, 4426, 4499, 4118, 4430, 4063, 4064, 4397, 4616, 4064,
  /* 3117 */ 4064, 4119, 4064, 4064, 4064, 4288, 4064, 4064, 4064, 4287, 4064, 4064, 4288, 4376, 4064, 4064, 4064, 4256,
  /* 3135 */ 4489, 4064, 4151, 4151, 4064, 4151, 4064, 4582, 4064, 4064, 4064, 4026, 4064, 4064, 4064, 4027, 4064, 4385,
  /* 3153 */ 4064, 4064, 4288, 4386, 4407, 4437, 4116, 4613, 4624, 4064, 4115, 3851, 3851, 4064, 4064, 4278, 4498, 4233,
  /* 3171 */ 4064, 4064, 4234, 3919, 4064, 4440, 4443, 4348, 4443, 4445, 4136, 4137, 4447, 4448, 4451, 4450, 4450, 4450,
  /* 3189 */ 4453, 4454, 4454, 4454, 4454, 4455, 4454, 4457, 4457, 4457, 4458, 4464, 4459, 4457, 4457, 4457, 4458, 4457,
  /* 3207 */ 4460, 4466, 4055, 4532, 4064, 4067, 4064, 4064, 4064, 4337, 4064, 4064, 4064, 4173, 4471, 4275, 4064, 4064,
  /* 3225 */ 4288, 4518, 4473, 4064, 4476, 4064, 4067, 4489, 4064, 4064, 4064, 4221, 4064, 4479, 4386, 4151, 4219, 4109,
  /* 3243 */ 4064, 3852, 4289, 4018, 4064, 4064, 4064, 4296, 4301, 4064, 4148, 4493, 4495, 4017, 4064, 4064, 4016, 4285,
  /* 3261 */ 4367, 4621, 4064, 4068, 4068, 4067, 4064, 4067, 3921, 4064, 4064, 4064, 4624, 4064, 4064, 4066, 4068, 4067,
  /* 3279 */ 4314, 4275, 4064, 4069, 4043, 4064, 4064, 4249, 4064, 4064, 4064, 4365, 3909, 4064, 4479, 4151, 4064, 4069,
  /* 3297 */ 4064, 4230, 4065, 4497, 4301, 4507, 4512, 4512, 4131, 4064, 4064, 4064, 4374, 4286, 4468, 3897, 4064, 4064,
  /* 3315 */ 3931, 4342, 4064, 4624, 4064, 4151, 4064, 4064, 4222, 4064, 4064, 4288, 4631, 4385, 4064, 3931, 4064, 4064,
  /* 3333 */ 4064, 3897, 4010, 3851, 4222, 4064, 4064, 4289, 4064, 4064, 4064, 4303, 4522, 4527, 4061, 4055, 4130, 4130,
  /* 3351 */ 4064, 4064, 4064, 4377, 4065, 4523, 4042, 4246, 4275, 3903, 3908, 4064, 4064, 4293, 3845, 4064, 4398, 4246,
  /* 3369 */ 4615, 4246, 4275, 4131, 4064, 4064, 4432, 4527, 4061, 4055, 4163, 4064, 4064, 4529, 4616, 4064, 4386, 4064,
  /* 3387 */ 3932, 4064, 4286, 4587, 4064, 4064, 4064, 4385, 4385, 4064, 4285, 4468, 3897, 4064, 4385, 4064, 3851, 4051,
  /* 3405 */ 4064, 4064, 4103, 4114, 4200, 4289, 4063, 3851, 4064, 3851, 4064, 4051, 4064, 4608, 4201, 4063, 4064, 4069,
  /* 3423 */ 4177, 4052, 4542, 4063, 4064, 4064, 4311, 4112, 4064, 4488, 4063, 4103, 4064, 4064, 4356, 4358, 4064, 4365,
  /* 3441 */ 4542, 4064, 4623, 4365, 4239, 4365, 4239, 4238, 4238, 4060, 4060, 4064, 4064, 4365, 4064, 4064, 4064, 4608,
  /* 3459 */ 4064, 4365, 3901, 4064, 4064, 4064, 3917, 4058, 3903, 4111, 4064, 4064, 4378, 4283, 4110, 4064, 4064, 4064,
  /* 3477 */ 4389, 4594, 4262, 4435, 4064, 4064, 4390, 4218, 4435, 4461, 4461, 4461, 4462, 4461, 4462, 4544, 4546, 4550,
  /* 3495 */ 4555, 4555, 4551, 4552, 4548, 4553, 4554, 4549, 4555, 4557, 4549, 4555, 4555, 4559, 4561, 4563, 4563, 4563,
  /* 3513 */ 4564, 4563, 4571, 4565, 4563, 4563, 4566, 4064, 4064, 4064, 4395, 4573, 4378, 4532, 4112, 4064, 3919, 3919,
  /* 3531 */ 4064, 4064, 4057, 3922, 4064, 4413, 3920, 4606, 4064, 4064, 4064, 4432, 4240, 3851, 4064, 4064, 4396, 3921,
  /* 3549 */ 4064, 4607, 4235, 4064, 4064, 4406, 4064, 4064, 4362, 4392, 4575, 4064, 4064, 3905, 3933, 4577, 4579, 4063,
  /* 3567 */ 4064, 4388, 4064, 4064, 4418, 4064, 4387, 4064, 4064, 4064, 4434, 4064, 3902, 4581, 4064, 4064, 4477, 4064,
  /* 3585 */ 4413, 4114, 4064, 4064, 4480, 4364, 3918, 4603, 4276, 4064, 4072, 4064, 4064, 4069, 3903, 4047, 4064, 3904,
  /* 3603 */ 4064, 4103, 4143, 4064, 3842, 4064, 4064, 4065, 4415, 4592, 4500, 4041, 4486, 4276, 4276, 4063, 4064, 4064,
  /* 3621 */ 4497, 4254, 4573, 4378, 4532, 4483, 3917, 4118, 4174, 4112, 4118, 4524, 4143, 4486, 4175, 4064, 4064, 4064,
  /* 3639 */ 4067, 4279, 3856, 4044, 4261, 4430, 4064, 3897, 4064, 4064, 4056, 4631, 4601, 4276, 4064, 4113, 4064, 4113,
  /* 3657 */ 4064, 4064, 4441, 4592, 4118, 4142, 4633, 4162, 4162, 4422, 4064, 3927, 4064, 4628, 4378, 4427, 4064, 4064,
  /* 3675 */ 4531, 4064, 4365, 3909, 4623, 4064, 4064, 4064, 4386, 3851, 4601, 4386, 4064, 4064, 4534, 4162, 4064, 4222,
  /* 3693 */ 4427, 4064, 4115, 4104, 4363, 4064, 4366, 4623, 4064, 4065, 4161, 4064, 4635, 4064, 4064, 4539, 4064, 4064,
  /* 3711 */ 4064, 4012, 4519, 4588, 4486, 4063, 4633, 4224, 3927, 3927, 4064, 4617, 4064, 4064, 4064, 4113, 4024, 4024,
  /* 3729 */ 4064, 4413, 4064, 4064, 4064, 4593, 4209, 4064, 4064, 4064, 4608, 4051, 4064, 4064, 4064, 4169, 4064, 4537,
  /* 3747 */ 4064, 4064, 4584, 4064, 4141, 4144, 4064, 4064, 4064, 4020, 4064, 4064, 4141, 4589, 3928, 4064, 4026, 4123,
  /* 3765 */ 4064, 4141, 4064, 4064, 4064, 4617, 4252, 4064, 4590, 4064, 4064, 4596, 4064, 4255, 4064, 4064, 4067, 4367,
  /* 3783 */ 4490, 4207, 4068, 4285, 4067, 4637, 4067, 4068, 4064, 4064, 4599, 4064, 4064, 4064, 4590, 4639, 4068, 4064,
  /* 3801 */ 3930, 4372, 3853, 3852, 4068, 4068, 3854, 4641, 4641, 4643, 4643, 4641, 4642, 4643, 4641, 4642, 4641, 4645,
  /* 3819 */ 4064, 4125, 4351, 4064, 4065, 4591, 4038, 4400, 4142, 4106, 4645, 3855, 4064, 4064, 4601, 4064, 4064, 4064,
  /* 3837 */ 4517, 4522, 524292, 524320, 1074266112, 524288, 0x80000000, 537133056, 262144, 262144, 0, 6, 524348,
  /* 3850 */ 524288, 524288, 0, 24, 24, 120, 0, 32, -331298902, -1402861600, -1402861600, 21120, 67633152, 1074266112,
  /* 3864 */ 17536, 524288, 524320, 67633152, 1544028160, 336068608, 336068608, 470286336, 470286336, 655360,
  /* 3874 */ 1544028160, 1544028160, 470286336, 655360, 655392, 1074397184, 655364, 1544028160, 1544159232, 294976,
  /* 3884 */ 557120, 557120, 557180, 294912, 34111552, 1074298944, 557120, 34111612, 34111612, 101220476, 1544060992,
  /* 3895 */ 1544060992, 503873660, 8192, 0, 41, 16128, 1048576, 1048576, 128, 0, 112, 159744, 28, 0, 128, 4, 32, 32,
  /* 3913 */ 33, 33, 34, 48, 0, 48, 4096, 0, 64, 0, 66, 134217728, 0x80000000, 16512, 0, 256, 0, 134, 0, 512, 0, 569,
  /* 3935 */ 33587264, 33587200, 32, 41, 32768, 33587200, 64, 33554496, 33554496, 33587200, 65536, 393216, 160, 544,
  /* 3949 */ 544, 3145760, 131104, 524320, 1048608, 2097184, 1049120, 536870944, 32, 64, 64, 128, 32, 262176, 2097696,
  /* 3964 */ 544, 1048608, 1048608, 32, 96, 2097184, 2097184, 33, 42, 331350016, 544, 32, 544, 2228832, -331298904,
  /* 3979 */ -331298904, 40, 744, -329119776, -1401813024, -1401813016, -329070624, -328546328, -329070616, -329070624,
  /* 3989 */ -329070615, -329070616, -329070616, -328546336, 160, 32, 97, 224, 42, 43, 106, 234, 281022507, 281030699,
  /* 4003 */ 281079851, 281081211, 281081147, 281081147, -329070616, -328546328, -52283541, 0, 8704, 32, 262144,
  /* 4014 */ 1056768, 0, 14976, -805306368, 0, 16384, 0, 8192, 49152, 65536, 131072, 131072, 32768, 0, 4608, 478150656,
  /* 4030 */ 0, 16512, -2147483616, 25165824, 0, 18432, 8, 256, 1024, 14336, 196608, 262144, 1572864, 8388608, 2048,
  /* 4045 */ 4194304, 576, 0, 24576, 131072, 2097152, 4194304, 0, -2147483616, 1048576, 33554432, 67108864, 0, 28672,
  /* 4059 */ 524288, 8388608, 8388608, 16777216, 0x80000000, 0, 0, 1, 0, 2, 0, 4, -2147418112, 32, 0x80000000, 16777224,
  /* 4075 */ 16777224, -1542717312, 402718787, 402718787, -1668476928, -1668476928, 402718787, 423690307, -2079522685,
  /* 4084 */ -2079522685, -1811087229, -1811087225, -1676869501, -2078465913, -1676869437, -1676869437, -1668476733,
  /* 4092 */ -592588800, -592588800, -592457728, -592457728, -592456636, -592456620, -592456620, -592456492, -592588605,
  /* 4101 */ -592588605, -592456489, 0, 65536, 786432, 3145728, 8388608, -603979776, -1543503872, 0, 65540, 1073741824,
  /* 4113 */ 0, 131072, 0, 4096, 8192, 8192, 16384, 0x80000000, 3, 65536, 2097152, 0, 42, 188480, 856064, 8388608,
  /* 4129 */ 33554432, 268435456, -1073741824, 0, 192576, -2080374784, 0, 458752, 67112960, 67112960, -1811939328,
  /* 4140 */ -1677721600, 0, 262144, 524288, 1048576, 0, 34, 32, 0, 35, 1908736, 0, 524288, 536889728, 603979776, 0,
  /* 4156 */ 851968, 114688, 786432, 4096, 524288, 1048576, 8388608, 268435456, -536870912, 576, 262144, 3145728,
  /* 4168 */ 33554432, 262208, 0, 1318912, 0, 49152, 524288, 268435456, 0x80000000, 594, -2147483616, -2139095008,
  /* 4180 */ -2146435040, -2146426848, -1600642528, 83918848, 88113152, 83918848, -2053594592, -2053594592, 83918852,
  /* 4189 */ 83919446, -1516723680, -1516723680, -1516722656, -1516723680, -1382505952, -1516723680, -138428631,
  /* 4197 */ -138428631, 0, 2097152, 268435456, 8, 16, 512, 4096, 49152, 20971520, 1024, 262144, 4194304, 8192, 131072,
  /* 4212 */ 20971520, 0x80000000, 32, 8704, 83886080, 0, 3133440, 0, 786432, 88080384, 0, 4194304, 8388608,
  /* 4225 */ 0x80000000, 32, 41472, 93847552, 0x80000000, 22, 33344, 93847552, 0, 4194308, 0, 4718592, 42496, 0,
  /* 4239 */ 8388608, 0, 20480, 245504, 129761280, -268435456, 0, 16777216, 33554432, 33587200, 0, 6144, 8192, 32768,
  /* 4253 */ 32768, 64, 2, 2, 4, 608, 96, 32768, 16777216, 134217728, 131136, 32768, 524288, 22, 0, 16777224, 9728, 0,
  /* 4271 */ 20971520, 0, 61440, 32768, 67108864, 268435456, 1073741824, 1, 8, 32, 168, 1048576, 67108864, 536870912, 0,
  /* 4286 */ 8, 4, 0, 16, 0, 18, 32, -2147221504, 262144, 0x80000000, 1, 256, 12288, 0, 56623104, 512, 14336, 4096,
  /* 4304 */ 131072, 4096, 2097152, 1073741824, 4096, 1073741824, 32768, 8388612, 2048, 1, 512, 6144, 134218768,
  /* 4317 */ 16777224, 553680904, -1841143710, 306339938, 1380081762, -1841143709, 860012650, 860020842, 860020842,
  /* 4326 */ 860021354, 860020842, 860024938, 862117994, 927129706, 927129706, 306339939, -145231381, -145231381,
  /* 4335 */ -144707093, -145231381, 0, 67108864, 402653184, -144707093, -144707093, 4096, 262144, 67108864, 1073741824,
  /* 4346 */ 155712, 37748736, 0, 67112960, 180288, 54525952, 872415232, 188992, 0, 228065280, 1, 42, 520640, 55574528,
  /* 4360 */ 1946157056, 0x80000000, 4, 8388608, 469762048, 0, 1048576, 4, 16, 16, 32, 40, 96, 24, 8, 16777216, 1024,
  /* 4377 */ 134217728, 4194304, 16777216, 67108864, 0x80000000, 4194304, 33554432, 57856, 0, 268435456, 0, 825, 0,
  /* 4390 */ 1024, 0, 2048, 0, 2560, 1, 2, 16, 1024, 16384, 32768, 196608, 1048576, 20971520, 1879048192, 0x80000000, 1,
  /* 4407 */ 536870912, 4, 2048, 16384, 268435456, 1610612736, 0, 33554432, 8, 64, 57344, 49152, 805306368, 0,
  /* 4421 */ 201326592, 1073741824, 0x80000000, 8, 8192, 16384, 536870912, 8192, 65536, 536870912, 1073741824, 1, 8192,
  /* 4434 */ 16, 134217728, 37748736, 2097168, 256, 126976, 4194308, 1024, 131072, 134234112, 67112960, 67113472,
  /* 4446 */ 67112960, 336073216, 2050, 536872962, 335550978, 335550978, 3074, 134237186, 336075266, 336075266,
  /* 4456 */ 386406914, -677856733, -677856733, -677856605, -677856733, 0, 268435472, 268435472, -677856605, -677856605,
  /* 4466 */ 16384, 16777216, 16, 2097152, 1610612736, 2, 6656, 3072, 0, 276824064, 19456, 0, 327155712, 117440512, 0,
  /* 4481 */ 335544320, 469762048, 1073741824, 8192, 196608, 2097152, 8388608, 134217728, 16, 64, 512, 2048, 14848,
  /* 4494 */ 9994240, 117440512, -805306368, 2, 32, 256, 4096, 57344, 0, 33587200, 33587200, 32768, 32832, 32768,
  /* 4508 */ 9961472, -1610612736, 0, 3002368, 117440512, 268435456, 4096, 67108864, 1610612736, 1, 32, 512, 8192,
  /* 4521 */ 1572864, 512, 12288, 32768, 262144, 1073741824, 32768, 1572864, 16384, 33554432, 16384, 134217728,
  /* 4533 */ 536870912, 1, 1572864, 1, 1048576, 65536, 16777216, 0, 6656, 8388608, 1073741824, 1342177328, 544768,
  /* 4546 */ 67653632, 544768, 1342722096, 1342722096, 1342730288, 38293504, 1342705712, 1342722096, 1342705712,
  /* 4555 */ 1342730288, 1342730288, 1342722096, 1346916400, 1342787636, 1359499312, 1342861424, 1342730288, -792922567,
  /* 4564 */ -792922567, -792922311, -792922567, 0, 402653184, 0, 188480, -792922311, -792922311, 32, 2048, 52, 86016,
  /* 4577 */ 324608, 3670016, 8388608, 1342177280, 4, 65536, 402653184, 2, 64, 33554432, 131072, 262144, 1048576, 256,
  /* 4591 */ 256, 512, 1024, 4096, 16384, 16384, 128, 128, 16, 268435456, 16384, 524288, 24576, 524288, 8, 48,
  /* 4607 */ 1342177280, 0, 134217728, 64, 8192, 262144, 2097152, 67108864, 67108864, 134217728, 0, 32768, 65536,
  /* 4620 */ 524288, 2097152, 8192, 65536, 0, 0x80000000, -2146959360, 304, 0, 536870912, 0x80000000, 32, 8192, 1048576,
  /* 4634 */ 2097152, 16, 8192, 10, 0, 134, 96, 120, 120, 122, 120, 122, 122
];

ExistParser.TOKEN =
[
  "(0)",
  "END",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "URIQualifiedName",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "CharRef",
  "QName",
  "StringConstructorChars",
  "NCName",
  "S",
  "S",
  "CommentContents",
  "PragmaContents",
  "DirCommentContents",
  "DirPIContents",
  "CDataSectionContents",
  "Wildcard",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'<![CDATA['",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'=>'",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "']]>'",
  "']``'",
  "'``['",
  "'`{'",
  "'after'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'child'",
  "'collation'",
  "'comment'",
  "'construction'",
  "'context'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'digit'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'eq'",
  "'every'",
  "'except'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'infinity'",
  "'inherit'",
  "'insert'",
  "'instance'",
  "'intersect'",
  "'into'",
  "'invoke'",
  "'is'",
  "'item'",
  "'json-item'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'lt'",
  "'map'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'object'",
  "'of'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'rename'",
  "'replace'",
  "'return'",
  "'revalidation'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'self'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'strict'",
  "'strip'",
  "'structured-item'",
  "'switch'",
  "'text'",
  "'then'",
  "'to'",
  "'transform'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unordered'",
  "'update'",
  "'updating'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'when'",
  "'where'",
  "'window'",
  "'with'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'|'",
  "'||'",
  "'}'",
  "'}`'",
  "'}}'"
];

// End
